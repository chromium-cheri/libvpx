{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8ff60042_9c467c42",
        "filename": "vp9/encoder/vp9_svc_layercontext.c",
        "patchSetId": 1
      },
      "lineNbr": 1345,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-07-11T23:45:45Z",
      "side": 1,
      "message": "I found that this is not equivalent to the original expression.\n\nFor examp[le, suppose `rc-\u003eprojected_frame_size` is 16 and `rc-\u003eavg_frame_bandwidth` is 5.\n\nThe original expression `rc-\u003eprojected_frame_size \u003e 3 * rc-\u003eavg_frame_bandwidth` is\n`16 \u003e 3 * 5`, which is true.\n\nBut the new expression `rc-\u003eprojected_frame_size / 3 \u003e rc-\u003eavg_frame_bandwidth` is `16 / 3 \u003e 5`, which is false.\n\nSo it is safer to cast to `int64_t`.",
      "revId": "032aa8f7c4f18bae675a8096ddccbccfda664449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30dad64a_11239a87",
        "filename": "vp9/encoder/vp9_svc_layercontext.c",
        "patchSetId": 1
      },
      "lineNbr": 1345,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-07-12T00:14:26Z",
      "side": 1,
      "message": "\u003e I found that this is not equivalent to the original expression.\n\u003e \n\u003e For examp[le, suppose `rc-\u003eprojected_frame_size` is 16 and `rc-\u003eavg_frame_bandwidth` is 5.\n\u003e \n\u003e The original expression `rc-\u003eprojected_frame_size \u003e 3 * rc-\u003eavg_frame_bandwidth` is\n\u003e `16 \u003e 3 * 5`, which is true.\n\u003e \n\u003e But the new expression `rc-\u003eprojected_frame_size / 3 \u003e rc-\u003eavg_frame_bandwidth` is `16 / 3 \u003e 5`, which is false.\n\u003e \n\u003e So it is safer to cast to `int64_t`.\n\nMarco, do we care about the rounding difference for this?",
      "parentUuid": "8ff60042_9c467c42",
      "revId": "032aa8f7c4f18bae675a8096ddccbccfda664449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad54a1e0_b0576e84",
        "filename": "vp9/encoder/vp9_svc_layercontext.c",
        "patchSetId": 1
      },
      "lineNbr": 1345,
      "author": {
        "id": 1126910
      },
      "writtenOn": "2024-07-12T00:28:07Z",
      "side": 1,
      "message": "No, I think it\u0027s fine to do rc-\u003eprojected_frame_size / 3 \u003e rc-\u003eavg_frame_bandwidth",
      "parentUuid": "30dad64a_11239a87",
      "revId": "032aa8f7c4f18bae675a8096ddccbccfda664449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13181539_2d8b324d",
        "filename": "vp9/encoder/vp9_svc_layercontext.c",
        "patchSetId": 1
      },
      "lineNbr": 1345,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-07-12T00:34:03Z",
      "side": 1,
      "message": "\u003e No, I think it\u0027s fine to do rc-\u003eprojected_frame_size / 3 \u003e rc-\u003eavg_frame_bandwidth\n\nThanks for confirming.",
      "parentUuid": "ad54a1e0_b0576e84",
      "revId": "032aa8f7c4f18bae675a8096ddccbccfda664449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55f08527_ee8b940c",
        "filename": "vp9/encoder/vp9_svc_layercontext.c",
        "patchSetId": 1
      },
      "lineNbr": 1345,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-07-12T17:28:55Z",
      "side": 1,
      "message": "I do this kind of manipulation in overflow checks all the time, so I was really worried that it was incorrect.\n\nI worked out the details. There are two cases where this kind of manipulation is correct.\n\nIf we ignore overflows:\n\n1) `x \u003e\u003d 3 * y` is equivalent to `x / 3 \u003e\u003d * y`.\n\nNote: Overflow checks are of this form, so they are correct. For example, to check whether `a * b \u003e INT_MAX`, we check `a \u003e INT_MAX / b`.\n\n2) `x \u003e 3 * y` is equivalent to `(x + 2) / 3 \u003e * y`.\n\nNote: `(x + 2) / 3` means the ceiling of `x / 3.0`.",
      "parentUuid": "13181539_2d8b324d",
      "revId": "032aa8f7c4f18bae675a8096ddccbccfda664449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdd4129e_69973442",
        "filename": "vp9/encoder/vp9_svc_layercontext.c",
        "patchSetId": 1
      },
      "lineNbr": 1345,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-07-12T17:58:30Z",
      "side": 1,
      "message": "\u003e I do this kind of manipulation in overflow checks all the time, so I was really worried that it was incorrect.\n\u003e \n\u003e I worked out the details. There are two cases where this kind of manipulation is correct.\n\u003e \n\u003e If we ignore overflows:\n\u003e \n\u003e 1) `x \u003e\u003d 3 * y` is equivalent to `x / 3 \u003e\u003d * y`.\n\u003e \n\u003e Note: Overflow checks are of this form, so they are correct. For example, to check whether `a * b \u003e INT_MAX`, we check `a \u003e INT_MAX / b`.\n\u003e \n\nThanks for verifying those checks.\n\n\u003e 2) `x \u003e 3 * y` is equivalent to `(x + 2) / 3 \u003e * y`.\n\u003e \n\u003e Note: `(x + 2) / 3` means the ceiling of `x / 3.0`.\n\nI added a note to the commit message to note we ignored rounding for this change based on Marco\u0027s comment.",
      "parentUuid": "55f08527_ee8b940c",
      "revId": "032aa8f7c4f18bae675a8096ddccbccfda664449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}