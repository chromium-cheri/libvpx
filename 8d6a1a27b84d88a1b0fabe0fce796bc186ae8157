{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0cde485d_e4c4a8c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-02-21T02:27:18Z",
      "side": 1,
      "message": "Anonymous unions are a useful language extension. It is used in the `YV12_BUFFER_CONFIG` struct in libaom. I think we should allow this extension.",
      "revId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08f688d4_04b1b51c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-02-21T03:15:51Z",
      "side": 1,
      "message": "\u003e Anonymous unions are a useful language extension. It is used in the `YV12_BUFFER_CONFIG` struct in libaom. I think we should allow this extension.\n\nI think this is supported in most, if not all compilers; we haven\u0027t had any error reports. After https://chromium-review.googlesource.com/c/webm/libvpx/+/5291961 I thought it might be helpful to have nightly build with `-Wpedantic` enabled.\n\nAbsent this we could bump the minimum to C11. [FFmpeg was exploring this recently](https://ffmpeg.org/pipermail/ffmpeg-devel/2024-February/321165.html).",
      "parentUuid": "0cde485d_e4c4a8c3",
      "revId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2261367_a6dea253",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-02-21T17:17:05Z",
      "side": 1,
      "message": "I am afraid that `-Wpedantic` is too strict. Some widely supported language extensions are convenient.\n\nRe: https://chromium-review.googlesource.com/c/webm/libvpx/+/5291961: I seem to remember some compiler (maybe MSVC? I didn\u0027t check) rejected the `\u003d {}` struct initializer when I tried it before.\n\nIt s a good idea to upgrade to C11.",
      "parentUuid": "08f688d4_04b1b51c",
      "revId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e96d3d8_1f8c3897",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-02-21T17:17:05Z",
      "side": 1,
      "message": "James: I think it is fine to make this change in libvpx; your call. But we should allow anonymous unions in libaom, because they are heavily used in the `YV12_BUFFER_CONFIG` struct.",
      "revId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8721cf08_0f55754c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-02-21T23:15:14Z",
      "side": 1,
      "message": "\u003e James: I think it is fine to make this change in libvpx; your call. But we should allow anonymous unions in libaom, because they are heavily used in the `YV12_BUFFER_CONFIG` struct.\n\nWe had some discussion about this and formally moving to C11 in libaom at least might be the best option.",
      "parentUuid": "2e96d3d8_1f8c3897",
      "revId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0bf6a02_60632671",
        "filename": "vp9/encoder/vp9_context_tree.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-02-21T00:45:58Z",
      "side": 1,
      "message": "suggestions welcome. We use this style in the libwebp decode api.",
      "range": {
        "startLine": 93,
        "startChar": 4,
        "endLine": 93,
        "endChar": 5
      },
      "revId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9dec219_cafaafab",
        "filename": "vp9/encoder/vp9_context_tree.h",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-02-21T17:17:05Z",
      "side": 1,
      "message": "`u` is a commonly used name for this kind of union.",
      "parentUuid": "e0bf6a02_60632671",
      "range": {
        "startLine": 93,
        "startChar": 4,
        "endLine": 93,
        "endChar": 5
      },
      "revId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Commit-Queue",
        "description": {
          "value": "Submit requirement for the \u0027Commit-Queue\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "8d6a1a27b84d88a1b0fabe0fce796bc186ae8157",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}