{
  "comments": [
    {
      "key": {
        "uuid": "AAAAdn//Rw4\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2014-10-27T18:38:43Z",
      "side": 1,
      "message": "is this caught by the tests? i see some tests for lpf_8 but they don\u0027t seem to cover this.",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAdn//Rw8\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2014-10-27T18:38:43Z",
      "side": 1,
      "message": "Please add a line with BUG\u003d867 or a link to https://code.google.com/p/webm/issues/detail?id\u003d867",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAdn//Sp8\u003d",
        "filename": "vp9/common/x86/vp9_loopfilter_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2014-10-17T17:52:38Z",
      "side": 1,
      "message": "filt_loopfilter_avx2 is only used by this function. Maybe better to move it in the function, and then use DECLARE_ALIGNED_ARRAY instead.",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAdn//RxE\u003d",
        "filename": "vp9/common/x86/vp9_loopfilter_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 1108495
      },
      "writtenOn": "2014-10-27T18:31:51Z",
      "side": 1,
      "message": "so there will be an overhead each time the function is called.\nthat\u0027s why I preferred to declare it as global.",
      "parentUuid": "AAAAdn//Sp8\u003d",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAdn//Sq4\u003d",
        "filename": "vp9/common/x86/vp9_loopfilter_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 413,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2014-10-17T16:52:27Z",
      "side": 1,
      "message": "Could you test this workaround using different gcc version?",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAdn//Sqs\u003d",
        "filename": "vp9/common/x86/vp9_loopfilter_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 413,
      "author": {
        "id": 1108495
      },
      "writtenOn": "2014-10-17T16:57:56Z",
      "side": 1,
      "message": "it was already tested with 4.8.1 and 4.9.1",
      "parentUuid": "AAAAdn//Sq4\u003d",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAdn//Rw0\u003d",
        "filename": "vp9/common/x86/vp9_loopfilter_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 422,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2014-10-27T18:38:43Z",
      "side": 1,
      "message": "is there a performance penalty for this? is it possible to isolate which version of 4.9 this occurs in? if this is slower, i would prefer:\n#if (not the broken gcc)\nold version of code\n#else (broken version of gc)\nthis code",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAdn//Sq8\u003d",
        "filename": "vp9/common/x86/vp9_loopfilter_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 617,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2014-10-17T16:52:27Z",
      "side": 1,
      "message": "Could an unpacking with 0 be used instead of shuffling? (something like: _mm256_unpacklo_epi8)",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAdn//Sqo\u003d",
        "filename": "vp9/common/x86/vp9_loopfilter_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 617,
      "author": {
        "id": 1108495
      },
      "writtenOn": "2014-10-17T16:57:56Z",
      "side": 1,
      "message": "I can do unpacking the problem is that I will have to do 2 loads\n8 bytes to the first half of the register and another load to the second half of the register it will be more expensive then using broadcast+ shuffle",
      "parentUuid": "AAAAdn//Sq8\u003d",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAdn//Sqg\u003d",
        "filename": "vp9/common/x86/vp9_loopfilter_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 617,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2014-10-17T17:16:07Z",
      "side": 1,
      "message": "I was thinking to do:\n  p256_7 \u003d _mm256_unpacklo_epi8(p256_7, ZERO_REG)",
      "parentUuid": "AAAAdn//Sqo\u003d",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAdn//SqQ\u003d",
        "filename": "vp9/common/x86/vp9_loopfilter_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 617,
      "author": {
        "id": 1108495
      },
      "writtenOn": "2014-10-17T17:28:45Z",
      "side": 1,
      "message": "the data in the register looks like that\n1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16\nif you will do unpacklo it will look like:\n1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0\nand you need the register to be:\n1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0\n\nThat\u0027s why I mentioned to you that you need to do twice load in order to use unpack",
      "parentUuid": "AAAAdn//Sqg\u003d",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAdn//SqA\u003d",
        "filename": "vp9/common/x86/vp9_loopfilter_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 617,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2014-10-17T17:52:38Z",
      "side": 1,
      "message": "ok. If it only unpacks the lower 8 values, it is not enough.",
      "parentUuid": "AAAAdn//SqQ\u003d",
      "revId": "6ee1adee255c59f1be63ed91d0080e9ad6d65c58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}