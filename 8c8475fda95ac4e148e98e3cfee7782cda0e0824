{
  "comments": [
    {
      "key": {
        "uuid": "64dc2704_5df3bec7",
        "filename": "vpx_dsp/arm/sad4d_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-07-12T03:26:26Z",
      "side": 1,
      "message": "I was about to start testing it (my assumption is that is switches from two loops where the inside loop is unrolled, to two full loops) but it turns out we only want to load \u0027a\u0027 once and compare it 4 times, and switching the looping breaks that.",
      "range": {
        "startLine": 63,
        "startChar": 29,
        "endLine": 63,
        "endChar": 36
      },
      "revId": "8c8475fda95ac4e148e98e3cfee7782cda0e0824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39a64157_01ad95ca",
        "filename": "vpx_dsp/arm/sad4d_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-07-12T02:43:22Z",
      "side": 1,
      "message": "I wonder if there\u0027s any reordering be done to access all of b[0], then b[1]. might be mildly better",
      "revId": "8c8475fda95ac4e148e98e3cfee7782cda0e0824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a66d4db_c78ab21e",
        "filename": "vpx_dsp/arm/sad4d_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-07-12T03:05:43Z",
      "side": 1,
      "message": "It seems to handle it quite well. The accumulator does not get pushed to the stack. That\u0027s why the 64x version is written differently. When I tried to use an array for sum[] the 64x fell apart.\n\nAll the b_loop[] values stay in registers too. It might not need to push/save as many if it was only tracking one at a time, but the code is pretty much all vector instructions.",
      "parentUuid": "39a64157_01ad95ca",
      "revId": "8c8475fda95ac4e148e98e3cfee7782cda0e0824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cd8c72b_f3ecf37b",
        "filename": "vpx_dsp/arm/sad4d_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-07-12T03:12:07Z",
      "side": 1,
      "message": "The 8x8 (and 8x4) even manages to skip the vdup_n_u16() by using vabdl.u8 before vabal.u8, even though the code calls for vabal_u8(sum[j], a_u8, b_u8).\n\nThose are both fully unrolled. When it gets to 16x it has a loop and zeros the registers and then uses accumulate.\n\nI was super surprised to see that. Did not expect it to go changing instructions on me.",
      "revId": "8c8475fda95ac4e148e98e3cfee7782cda0e0824",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}