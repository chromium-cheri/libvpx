{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8de0accc_9970c354",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1573372
      },
      "writtenOn": "2023-05-02T11:26:08Z",
      "side": 1,
      "message": "This CL introduced AVX2 intrinsics for the following functions:\n\n1. vpx_idct16x16_256_add\n2. vpx_idct32x32_1024_add\n3. vpx_idct32x32_135_add\n\nThe Borg test results of good encoding mode:\n```\n                 Instruction Count\ncpu   Resolution   Reduction(%)\n 0       LOWRES2      0.846\n 0       MIDRES2      0.844\n 0        HDRES2      0.747\n 0       Average      0.812\n```\nThe instruction count reduction specified has been measured using command:\n```\n$ perf stat -e instructions:u ./vpxenc â€¦\n```\nThis is a bit-exact change.",
      "revId": "51268bfb9db7653f066a4d87646b3cc36e3a2c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f69e9ab2_3884e811",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-05-02T20:47:59Z",
      "side": 1,
      "message": "Nice speedup for the encoder.",
      "parentUuid": "8de0accc_9970c354",
      "revId": "51268bfb9db7653f066a4d87646b3cc36e3a2c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27a6b18e_ae1e7ed8",
        "filename": "test/dct16x16_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 595,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-05-02T20:47:59Z",
      "side": 1,
      "message": "Is aligned to 32 also guaranteed in libaom?",
      "range": {
        "startLine": 595,
        "startChar": 20,
        "endLine": 595,
        "endChar": 22
      },
      "revId": "51268bfb9db7653f066a4d87646b3cc36e3a2c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "696c1f28_5a27f200",
        "filename": "test/dct16x16_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 595,
      "author": {
        "id": 1573372
      },
      "writtenOn": "2023-05-03T12:08:39Z",
      "side": 1,
      "message": "In libvpx, we conducted an experiment to verify alignment of input and output pointers. The pointers are not guaranteed to be 32-byte aligned. Hence, we have updated the CL with below changes,\n\n* Reverted alignment changes made for the input and output buffers of unit test\n\n* Replaced load/store instructions with unaligned load/store",
      "parentUuid": "27a6b18e_ae1e7ed8",
      "range": {
        "startLine": 595,
        "startChar": 20,
        "endLine": 595,
        "endChar": 22
      },
      "revId": "51268bfb9db7653f066a4d87646b3cc36e3a2c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14280416_64b302ef",
        "filename": "test/dct16x16_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 595,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-05-03T16:02:50Z",
      "side": 1,
      "message": "Oh, yes, this is libvpx. Good to fix it. Also, if aligning some libvpx buffers to 32 helps the optimization performance, we can do it. Could you check if this applies to this cl?",
      "parentUuid": "696c1f28_5a27f200",
      "range": {
        "startLine": 595,
        "startChar": 20,
        "endLine": 595,
        "endChar": 22
      },
      "revId": "51268bfb9db7653f066a4d87646b3cc36e3a2c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "154557e2_08678d82",
        "filename": "test/dct16x16_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 595,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-05-04T22:21:05Z",
      "side": 1,
      "message": "Hopefully I made myself clear. This would work if we want to use 32-byte alignment and the libvpx buffers can be allocated to 32-byte aligned.",
      "parentUuid": "14280416_64b302ef",
      "range": {
        "startLine": 595,
        "startChar": 20,
        "endLine": 595,
        "endChar": 22
      },
      "revId": "51268bfb9db7653f066a4d87646b3cc36e3a2c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdac37fe_7154eed9",
        "filename": "test/dct16x16_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 595,
      "author": {
        "id": 1573372
      },
      "writtenOn": "2023-05-05T12:12:03Z",
      "side": 1,
      "message": "We confirmed the alignment of input and output buffers used in idct functions. The input buffer `dqcoeff` is assured to be 32-byte aligned in the encoder but not in the decoder. Whereas the output buffer `pd-\u003edst.buf` is not assured to be 32-byte aligned for chroma planes. Since chroma planes use frame borders as 80 pixels for 4:2:0 subsampling, 32-byte alignment is not guaranteed.\n\nTherefore, we have updated the CL with below changes for the input buffer.\n- Buffer alignment of `dqcoeff` in `TileWorkerData` and `RowMTWorkerData` is modified to 32-bytes in decoder.\n- Unaligned load instruction is replaced with an aligned instruction for low-bd intrinsics.\n- Assertions added to ensure 32-byte alignment in the intrinsic functions.\n- Alignment of input buffers declared in unit test is modified to 32-bytes.\nPlease note that for high-bd, still unaligned load instructions are used since load operation could read data from unaligned address.\nFor this change observed a negligible impact on module level gain.",
      "parentUuid": "154557e2_08678d82",
      "range": {
        "startLine": 595,
        "startChar": 20,
        "endLine": 595,
        "endChar": 22
      },
      "revId": "51268bfb9db7653f066a4d87646b3cc36e3a2c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61c80a4f_73c2ff2b",
        "filename": "vpx_dsp/x86/inv_txfm_avx2.c",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-05-02T20:47:59Z",
      "side": 1,
      "message": "Can you confirm that passing in 3 __m256i parameters is fine?",
      "range": {
        "startLine": 55,
        "startChar": 45,
        "endLine": 56,
        "endChar": 54
      },
      "revId": "51268bfb9db7653f066a4d87646b3cc36e3a2c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "174cd0e1_81f3af4f",
        "filename": "vpx_dsp/x86/inv_txfm_avx2.c",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1573372
      },
      "writtenOn": "2023-05-03T12:08:39Z",
      "side": 1,
      "message": "If the arguments are more than 3, it is preferred to pass them as pointers rather than as values. Hence, we have made the necessary changes accordingly.",
      "parentUuid": "61c80a4f_73c2ff2b",
      "range": {
        "startLine": 55,
        "startChar": 45,
        "endLine": 56,
        "endChar": 54
      },
      "revId": "51268bfb9db7653f066a4d87646b3cc36e3a2c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad60cfb2_84407cea",
        "filename": "vpx_dsp/x86/inv_txfm_avx2.c",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-05-03T16:02:50Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "174cd0e1_81f3af4f",
      "range": {
        "startLine": 55,
        "startChar": 45,
        "endLine": 56,
        "endChar": 54
      },
      "revId": "51268bfb9db7653f066a4d87646b3cc36e3a2c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}