{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "db6d43c7_3fa61f4a",
        "filename": "vp8/encoder/encodeframe.c",
        "patchSetId": 2
      },
      "lineNbr": 753,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-10-04T20:27:35Z",
      "side": 1,
      "message": "This condition could be `cpi-\u003emt_current_mb_col_size \u003c cm-\u003emb_rows` if we just want to make sure `cpi-\u003emt_current_mb_col` is large enough rather than the exact right size.",
      "revId": "c23da380a386e2cae2c757f06a2aebfd72451413",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb748cd4_95cfc0cf",
        "filename": "vp8/encoder/encodeframe.c",
        "patchSetId": 2
      },
      "lineNbr": 753,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2023-10-05T18:05:17Z",
      "side": 1,
      "message": "\u003e This condition could be `cpi-\u003emt_current_mb_col_size \u003c cm-\u003emb_rows` if we just want to make sure `cpi-\u003emt_current_mb_col` is large enough rather than the exact right size.\n\nWe can only scale within the original mb_rows so in that case you would fix it at its largest possible value.",
      "parentUuid": "db6d43c7_3fa61f4a",
      "revId": "c23da380a386e2cae2c757f06a2aebfd72451413",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ffea2e8_efdc60cb",
        "filename": "vp8/encoder/onyx_int.h",
        "patchSetId": 2
      },
      "lineNbr": 529,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-10-04T20:17:01Z",
      "side": 1,
      "message": "The reason we\u0027re having problems with `mt_current_mb_col` is that its size is implicitly `cm-\u003emb_rows`. So whenever `cm-\u003emb_rows` changes, we need to reallocate `mt_current_mb_col` at the same time. But we also want to allocate `mt_current_mb_col` only when we need it (i.e., only when we are using multiple threads). It was tricky to meet both requirements.\n\nBy recording the size of `mt_current_mb_col` explicitly in this new field and by allocating `mt_current_mb_col` right before we start to use it, it is much easier to meet both requirements.",
      "revId": "c23da380a386e2cae2c757f06a2aebfd72451413",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5fdb962_2634e2b3",
        "filename": "vp8/encoder/onyx_int.h",
        "patchSetId": 2
      },
      "lineNbr": 529,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-10-04T20:27:35Z",
      "side": 1,
      "message": "A simpler solution is to give up on the second requirement (allocate `mt_current_mb_col` only when we are using multiple threads). Then it\u0027s easy to just meet the first requirement (whenever `cm-\u003emb_rows` changes, reallocate `mt_current_mb_col` at the same time). But `mt_current_mb_col` will be wasted in single-threaded mode.",
      "parentUuid": "9ffea2e8_efdc60cb",
      "revId": "c23da380a386e2cae2c757f06a2aebfd72451413",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "c23da380a386e2cae2c757f06a2aebfd72451413",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "c23da380a386e2cae2c757f06a2aebfd72451413",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Commit-Queue",
        "description": {
          "value": "Submit requirement for the \u0027Commit-Queue\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c23da380a386e2cae2c757f06a2aebfd72451413",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c23da380a386e2cae2c757f06a2aebfd72451413",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "c23da380a386e2cae2c757f06a2aebfd72451413",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}