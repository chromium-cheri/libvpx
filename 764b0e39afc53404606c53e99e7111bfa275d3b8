{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9a7a24e4_20290534",
        "filename": "test/vp9_boolcoder_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 56,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-22T22:42:40Z",
      "side": 1,
      "message": "I will change `kBufferSize` to `sizeof(bw_buffer)` after your review.",
      "range": {
        "startLine": 56,
        "startChar": 41,
        "endLine": 56,
        "endChar": 52
      },
      "revId": "764b0e39afc53404606c53e99e7111bfa275d3b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e340de4c_777044a6",
        "filename": "vp9/encoder/vp9_bitstream.c",
        "patchSetId": 3
      },
      "lineNbr": 948,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-22T23:31:26Z",
      "side": 1,
      "message": "I will remove this TODO comment after your review. This TODO comment assumes that `vpx_writer` will call `vpx_internal_error()` to report a buffer overflow error. I just realized that `vpx_writer` can also stop writing if it reaches the end of buffer, and `vpx_stop_encode()` can be modified to report if there was a buffer overflow error.",
      "revId": "764b0e39afc53404606c53e99e7111bfa275d3b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5190c65c_b75f8dde",
        "filename": "vp9/encoder/vp9_bitstream.c",
        "patchSetId": 3
      },
      "lineNbr": 1057,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-22T22:42:40Z",
      "side": 1,
      "message": "The original code returns 0 to indicate an error. But the caller doesn\u0027t check if the return value is 0. So I changed the code to call `vpx_internal_error()` to report an error.",
      "revId": "764b0e39afc53404606c53e99e7111bfa275d3b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e57e60cc_b5eb42ca",
        "filename": "vp9/encoder/vp9_bitstream.c",
        "patchSetId": 3
      },
      "lineNbr": 1131,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-22T22:42:40Z",
      "side": 1,
      "message": "The check at line 1118 ensures that it is safe to write 4 bytes to `data_ptr + total_size` here.",
      "revId": "764b0e39afc53404606c53e99e7111bfa275d3b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a22bb4a_a4af1155",
        "filename": "vp9/encoder/vp9_bitstream.c",
        "patchSetId": 3
      },
      "lineNbr": 1390,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-22T22:42:40Z",
      "side": 1,
      "message": "I verified that `vp9_pack_bitstream()` is only called by `encoder_encode()`, after `encoder_encode()` has set up the jump buffer in `cm-\u003eerror`. Therefore `vp9_pack_bitstream()` and the functions it calls can call `vpx_internal_error(\u0026cm-\u003eerror, ...)` to report an error.",
      "revId": "764b0e39afc53404606c53e99e7111bfa275d3b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f695fc3_9f3229b0",
        "filename": "vp9/encoder/vp9_bitstream.c",
        "patchSetId": 3
      },
      "lineNbr": 1426,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-22T22:42:40Z",
      "side": 1,
      "message": "I will add curly braces to this if statement after your review.",
      "revId": "764b0e39afc53404606c53e99e7111bfa275d3b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee2d704f_34196ccb",
        "filename": "vpx_dsp/bitwriter.c",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-22T22:33:21Z",
      "side": 1,
      "message": "This is modeled after `vpx_reader_init()`.\n\n```\nint vpx_reader_init(vpx_reader *r, const uint8_t *buffer, size_t size,\n                    vpx_decrypt_cb decrypt_cb, void *decrypt_state) {\n  if (size \u0026\u0026 !buffer) {\n    return 1;\n  } else {\n    r-\u003ebuffer_end \u003d buffer + size;\n    r-\u003ebuffer \u003d buffer;\n    r-\u003evalue \u003d 0;\n    r-\u003ecount \u003d -8;\n    r-\u003erange \u003d 255;\n    r-\u003edecrypt_cb \u003d decrypt_cb;\n    r-\u003edecrypt_state \u003d decrypt_state;\n    vpx_reader_fill(r);\n    return vpx_read_bit(r) !\u003d 0;  // marker bit\n  }\n}\n```",
      "revId": "764b0e39afc53404606c53e99e7111bfa275d3b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18b96f94_cfc0f309",
        "filename": "vpx_dsp/bitwriter.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-22T22:33:21Z",
      "side": 1,
      "message": "The changes to `vpx_writer` are modeled after `vpx_reader`.\n\n```\ntypedef struct {\n  // Be careful when reordering this struct, it may impact the cache negatively.\n  BD_VALUE value;\n  unsigned int range;\n  int count;\n  const uint8_t *buffer_end;\n  const uint8_t *buffer;\n  vpx_decrypt_cb decrypt_cb;\n  void *decrypt_state;\n  uint8_t clear_buffer[sizeof(BD_VALUE) + 1];\n} vpx_reader;\n\nint vpx_reader_init(vpx_reader *r, const uint8_t *buffer, size_t size,\n                    vpx_decrypt_cb decrypt_cb, void *decrypt_state);\n```",
      "revId": "764b0e39afc53404606c53e99e7111bfa275d3b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}