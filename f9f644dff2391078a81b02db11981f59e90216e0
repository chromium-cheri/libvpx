{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e836cd8c_75e8eb6b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2023-07-26T00:31:12Z",
      "side": 1,
      "message": "We may lose a little self-documentation due to the removal of parameter names.\n\nFor reference, here is the diff from the post clang-tidy cleanup:\n\n```\ndiff --git a/test/add_noise_test.cc b/test/add_noise_test.cc\nindex 30e71d060..b83dce2f3 100644\n--- a/test/add_noise_test.cc\n+++ b/test/add_noise_test.cc\n@@ -25,7 +25,6 @@ static const int kNoiseSize \u003d 3072;\n \n using AddNoiseFunc \u003d void (*)(uint8_t *, const int8_t *, int, int, int, int, int);\n \n-typedef ;\n using AddNoiseTestFPParam \u003d std::tuple\u003cdouble, AddNoiseFunc\u003e;\n \n class AddNoiseTest : public ::testing::Test,\ndiff --git a/test/avg_test.cc b/test/avg_test.cc\nindex 8975f63d2..ee41fa002 100644\n--- a/test/avg_test.cc\n+++ b/test/avg_test.cc\n@@ -96,7 +96,6 @@ class AverageTestBase : public ::testing::Test {\n };\n using AverageFunction \u003d unsigned int (*)(const uint8_t *, int);\n \n-typedef std;\n using AvgFunc \u003d std::tuple\u003cint, int, int, int, AverageFunction\u003e;\n \n class AverageTest : public AverageTestBase\u003cuint8_t\u003e,\n@@ -156,7 +155,6 @@ class AverageTestHBD : public AverageTestBase\u003cuint16_t\u003e,\n #if HAVE_NEON || HAVE_SSE2 || HAVE_MSA\n using IntProRowFunc \u003d void (*)(int16_t *, const uint8_t *, const int, const int);\n \n-typedef s;\n using IntProRowParam \u003d std::tuple\u003cint, IntProRowFunc, IntProRowFunc\u003e;\n \n class IntProRowTest : public AverageTestBase\u003cuint8_t\u003e,\n@@ -207,7 +205,6 @@ GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(IntProRowTest);\n \n using IntProColFunc \u003d int16_t (*)(const uint8_t *, const int);\n \n-typedef s;\n using IntProColParam \u003d std::tuple\u003cint, IntProColFunc, IntProColFunc\u003e;\n \n class IntProColTest : public AverageTestBase\u003cuint8_t\u003e,\n@@ -235,7 +232,6 @@ GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(IntProColTest);\n #endif  // HAVE_NEON || HAVE_SSE2 || HAVE_MSA\n \n using SatdFunc \u003d int (*)(const tran_low_t *, int);\n-typed;\n using SatdTestParam \u003d std::tuple\u003cint, SatdFunc\u003e;\n \n class SatdTest : public ::testing::Test,\n@@ -288,7 +284,6 @@ class SatdLowbdTest : public SatdTest {\n };\n \n using BlockErrorFunc \u003d int64_t (*)(const tran_low_t *, const tran_low_t *, int);\n-typedef std;\n using BlockErrorTestFPParam \u003d std::tuple\u003cint, BlockErrorFunc\u003e;\n \n class BlockErrorTestFP\ndiff --git a/test/convolve_test.cc b/test/convolve_test.cc\nindex c1187d8e3..eeb17df65 100644\n--- a/test/convolve_test.cc\n+++ b/test/convolve_test.cc\n@@ -34,7 +34,6 @@ static const unsigned int kMaxDimension \u003d 64;\n \n using ConvolveFunc \u003d void (*)(const uint8_t *, ptrdiff_t, uint8_t *, ptrdiff_t, const InterpKernel *, int, int, int, int, int, int);\n \n-typedef ;\n using WrapperFilterBlock2d8Func \u003d void (*)(const uint8_t *, const unsigned int, const int16_t *, const int16_t *, uint8_t *, unsigned int, unsigned int, unsigned int, int);\n \n struct ConvolveFunctions {\ndiff --git a/test/dct16x16_test.cc b/test/dct16x16_test.cc\nindex 5f066154e..e7e38ec8e 100644\n--- a/test/dct16x16_test.cc\n+++ b/test/dct16x16_test.cc\n@@ -225,14 +225,10 @@ void reference_16x16_dct_2d(int16_t input[256], double output[256]) {\n }\n \n using FdctFunc \u003d void (*)(const int16_t *, tran_low_t *, int);\n-typed;\n using IdctFunc \u003d void (*)(const tran_low_t *, uint8_t *, int);\n-typed;\n using FhtFunc \u003d void (*)(const int16_t *, tran_low_t *, int, int);\n-type;\n using IhtFunc \u003d void (*)(const tran_low_t *, uint8_t *, int, int);\n \n-typ;\n using Dct16x16Param \u003d std::tuple\u003cFdctFunc, IdctFunc, int, vpx_bit_depth_t\u003e;\n using Ht16x16Param \u003d std::tuple\u003cFhtFunc, IhtFunc, int, vpx_bit_depth_t\u003e;\n using Idct16x16Param \u003d std::tuple\u003cIdctFunc, IdctFunc, int, vpx_bit_depth_t\u003e;\ndiff --git a/test/dct32x32_test.cc b/test/dct32x32_test.cc\nindex 70db90568..2997f6e3a 100644\n--- a/test/dct32x32_test.cc\n+++ b/test/dct32x32_test.cc\n@@ -68,10 +68,8 @@ void reference_32x32_dct_2d(const int16_t input[kNumCoeffs],\n }\n \n using FwdTxfmFunc \u003d void (*)(const int16_t *, tran_low_t *, int);\n-typedef ;\n using InvTxfmFunc \u003d void (*)(const tran_low_t *, uint8_t *, int);\n \n-typedef;\n using Trans32x32Param \u003d std::tuple\u003cFwdTxfmFunc, InvTxfmFunc, int, vpx_bit_depth_t\u003e;\n \n using InvTrans32x32Param \u003d std::tuple\u003cInvTxfmFunc, InvTxfmFunc, int, vpx_bit_depth_t, int, int\u003e;\ndiff --git a/test/dct_partial_test.cc b/test/dct_partial_test.cc\nindex ed8db4eb5..1a80086ec 100644\n--- a/test/dct_partial_test.cc\n+++ b/test/dct_partial_test.cc\n@@ -34,7 +34,6 @@ using std::tuple;\n namespace {\n using PartialFdctFunc \u003d void (*)(const int16_t *, tran_low_t *, int);\n \n-typedef tup;\n using PartialFdctParam \u003d tuple\u003cPartialFdctFunc, int, vpx_bit_depth_t\u003e;\n \n tran_low_t partial_fdct_ref(const Buffer\u003cint16_t\u003e \u0026in, int size) {\ndiff --git a/test/dct_test.cc b/test/dct_test.cc\nindex 21cf22e0e..e77d7b5ce 100644\n--- a/test/dct_test.cc\n+++ b/test/dct_test.cc\n@@ -34,15 +34,10 @@ using std::tuple;\n \n namespace {\n using FdctFunc \u003d void (*)(const int16_t *, tran_low_t *, int);\n-typed;\n using IdctFunc \u003d void (*)(const tran_low_t *, uint8_t *, int);\n-typed;\n using FhtFunc \u003d void (*)(const int16_t *, tran_low_t *, int, int);\n-type;\n using FhtFuncRef \u003d void (*)(const Buffer\u003cint16_t\u003e \u0026, Buffer\u003ctran_low_t\u003e *, int, int);\n-typedef;\n using IhtFunc \u003d void (*)(const tran_low_t *, uint8_t *, int, int);\n-type;\n using IhtWithBdFunc \u003d void (*)(const tran_low_t *, uint8_t *, int, int, int);\n \n template \u003cFdctFunc fn\u003e\n@@ -69,7 +64,6 @@ void iht_wrapper(const tran_low_t *in, uint8_t *out, int stride, int tx_type,\n #if CONFIG_VP9_HIGHBITDEPTH\n using HighbdIdctFunc \u003d void (*)(const tran_low_t *, uint16_t *, int, int);\n \n-typedef vo;\n using HighbdIhtFunc \u003d void (*)(const tran_low_t *, uint16_t *, int, int, int);\n \n template \u003cHighbdIdctFunc fn\u003e\ndiff --git a/test/fdct8x8_test.cc b/test/fdct8x8_test.cc\nindex 4564d93c8..7d46313ae 100644\n--- a/test/fdct8x8_test.cc\n+++ b/test/fdct8x8_test.cc\n@@ -38,14 +38,10 @@ const int kSignBiasMaxDiff255 \u003d 1500;\n const int kSignBiasMaxDiff15 \u003d 10000;\n \n using FdctFunc \u003d void (*)(const int16_t *, tran_low_t *, int);\n-typed;\n using IdctFunc \u003d void (*)(const tran_low_t *, uint8_t *, int);\n-typed;\n using FhtFunc \u003d void (*)(const int16_t *, tran_low_t *, int, int);\n-type;\n using IhtFunc \u003d void (*)(const tran_low_t *, uint8_t *, int, int);\n \n-typ;\n using Dct8x8Param \u003d std::tuple\u003cFdctFunc, IdctFunc, int, vpx_bit_depth_t\u003e;\n using Ht8x8Param \u003d std::tuple\u003cFhtFunc, IhtFunc, int, vpx_bit_depth_t\u003e;\n using Idct8x8Param \u003d std::tuple\u003cIdctFunc, IdctFunc, int, vpx_bit_depth_t\u003e;\ndiff --git a/test/lpf_test.cc b/test/lpf_test.cc\nindex cc3e4dc16..c50b38dea 100644\n--- a/test/lpf_test.cc\n+++ b/test/lpf_test.cc\n@@ -40,7 +40,6 @@ using Pixel \u003d uint16_t;\n #define PIXEL_WIDTH 16\n \n using loop_op_t \u003d void (*)(Pixel *, int, const uint8_t *, const uint8_t *, const uint8_t *, int);\n-typede;\n using dual_loop_op_t \u003d void (*)(Pixel *, int, const uint8_t *, const uint8_t *, const uint8_t *, const uint8_t *, const uint8_t *, const uint8_t *, int);\n #else\n typedef uint8_t Pixel;\ndiff --git a/test/partial_idct_test.cc b/test/partial_idct_test.cc\nindex d6e2261ec..63b9e8ac9 100644\n--- a/test/partial_idct_test.cc\n+++ b/test/partial_idct_test.cc\n@@ -32,9 +32,7 @@ using libvpx_test::ACMRandom;\n namespace {\n \n using FwdTxfmFunc \u003d void (*)(const int16_t *, tran_low_t *, int);\n-typedef ;\n using InvTxfmFunc \u003d void (*)(const tran_low_t *, uint8_t *, int);\n-typedef ;\n using InvTxfmWithBdFunc \u003d void (*)(const tran_low_t *, uint8_t *, int, int);\n \n template \u003cInvTxfmFunc fn\u003e\ndiff --git a/test/pp_filter_test.cc b/test/pp_filter_test.cc\nindex 0b04d3b23..22f6788ee 100644\n--- a/test/pp_filter_test.cc\n+++ b/test/pp_filter_test.cc\n@@ -28,10 +28,8 @@ using libvpx_test::Buffer;\n \n using VpxPostProcDownAndAcrossMbRowFunc \u003d void (*)(unsigned char *, unsigned char *, int, int, int, unsigned char *, int);\n \n-typedef void (*VpxMbPostProcA;\n using VpxMbPostProcAcrossIpFunc \u003d void (*)(unsigned char *, int, int, int, int);\n \n-typedef void (*VpxMbP;\n using VpxMbPostProcDownFunc \u003d void (*)(unsigned char *, int, int, int, int);\n \n namespace {\ndiff --git a/test/predict_test.cc b/test/predict_test.cc\nindex 0268a0c4a..8287be95e 100644\n--- a/test/predict_test.cc\n+++ b/test/predict_test.cc\n@@ -32,7 +32,6 @@ using std::make_tuple;\n \n using PredictFunc \u003d void (*)(uint8_t *, int, int, int, uint8_t *, int);\n \n-typedef;\n using PredictParam \u003d std::tuple\u003cint, int, PredictFunc\u003e;\n \n class PredictTestBase : public AbstractBench,\ndiff --git a/test/quantize_test.cc b/test/quantize_test.cc\nindex ad962bad3..49fde2581 100644\n--- a/test/quantize_test.cc\n+++ b/test/quantize_test.cc\n@@ -35,7 +35,6 @@ const int kNumBlockEntries \u003d 16;\n \n using VP8Quantize \u003d void (*)(BLOCK *, BLOCKD *);\n \n-typedef;\n using VP8QuantizeParam \u003d std::tuple\u003cVP8Quantize, VP8Quantize\u003e;\n \n using libvpx_test::ACMRandom;\ndiff --git a/test/sad_test.cc b/test/sad_test.cc\nindex 107888663..66de68689 100644\n--- a/test/sad_test.cc\n+++ b/test/sad_test.cc\n@@ -39,23 +39,18 @@ struct TestParams {\n };\n \n using SadMxNFunc \u003d unsigned int (*)(const uint8_t *, int, const uint8_t *, int);\n-typedef;\n using SadMxNParam \u003d TestParams\u003cSadMxNFunc\u003e;\n \n using SadSkipMxNFunc \u003d unsigned int (*)(const uint8_t *, int, const uint8_t *, int);\n-typedef Tes;\n using SadSkipMxNParam \u003d TestParams\u003cSadSkipMxNFunc\u003e;\n \n using SadMxNAvgFunc \u003d unsigned int (*)(const uint8_t *, int, const uint8_t *, int, const uint8_t *);\n-typedef Te;\n using SadMxNAvgParam \u003d TestParams\u003cSadMxNAvgFunc\u003e;\n \n using SadMxNx4Func \u003d void (*)(const uint8_t *, int, const uint8_t *const *, int, unsigned int *);\n-typedef T;\n using SadMxNx4Param \u003d TestParams\u003cSadMxNx4Func\u003e;\n \n using SadSkipMxNx4Func \u003d void (*)(const uint8_t *, int, const uint8_t *const *, int, unsigned int *);\n-typedef TestP;\n using SadSkipMxNx4Param \u003d TestParams\u003cSadSkipMxNx4Func\u003e;\n \n using SadMxNx8Func \u003d void (*)(const uint8_t *, int, const uint8_t *, int, unsigned int *);\ndiff --git a/test/sum_squares_test.cc b/test/sum_squares_test.cc\nindex c13613fba..2dab384c4 100644\n--- a/test/sum_squares_test.cc\n+++ b/test/sum_squares_test.cc\n@@ -29,7 +29,6 @@ namespace {\n const int kNumIterations \u003d 10000;\n \n using SSI16Func \u003d uint64_t (*)(const int16_t *, int, int);\n-typede;\n using SumSquaresParam \u003d std::tuple\u003cSSI16Func, SSI16Func\u003e;\n \n class SumSquaresTest : public ::testing::TestWithParam\u003cSumSquaresParam\u003e {\ndiff --git a/test/test_intra_pred_speed.cc b/test/test_intra_pred_speed.cc\nindex 290666d0e..83e511a41 100644\n--- a/test/test_intra_pred_speed.cc\n+++ b/test/test_intra_pred_speed.cc\n@@ -354,7 +354,6 @@ namespace {\n \n using VpxHighbdPredFunc \u003d void (*)(uint16_t *, ptrdiff_t, const uint16_t *, const uint16_t *, int);\n \n-typedef Intra;\n using Vp9HighbdIntraPredTestMem \u003d IntraPredTestMem\u003cuint16_t\u003e;\n \n void TestHighbdIntraPred(const char name[], VpxHighbdPredFunc const *pred_funcs,\ndiff --git a/test/variance_test.cc b/test/variance_test.cc\nindex 0c133e539..065d36e80 100644\n--- a/test/variance_test.cc\n+++ b/test/variance_test.cc\n@@ -28,7 +28,6 @@\n namespace {\n \n using Get4x4SseFunc \u003d unsigned int (*)(const uint8_t *, int, const uint8_t *, int);\n-typedef un;\n using SumOfSquaresFunction \u003d unsigned int (*)(const int16_t *);\n \n using libvpx_test::ACMRandom;\ndiff --git a/test/vp9_arf_freq_test.cc b/test/vp9_arf_freq_test.cc\nindex 0e3e09c18..7b704cbad 100644\n--- a/test/vp9_arf_freq_test.cc\n+++ b/test/vp9_arf_freq_test.cc\n@@ -27,7 +27,7 @@ const int kBitrate \u003d 500;\n #define ARF_NOT_SEEN 1000001\n #define ARF_SEEN_ONCE 1000000\n \n-using TestVideoParam \u003d struct {\n+struct TestVideoParam {\n   const char *filename;\n   unsigned int width;\n   unsigned int height;\n@@ -39,7 +39,7 @@ using TestVideoParam \u003d struct {\n   unsigned int profile;\n };\n \n-using TestEncodeParam \u003d struct {\n+struct TestEncodeParam {\n   libvpx_test::TestMode mode;\n   int cpu_used;\n };\ndiff --git a/test/vp9_block_error_test.cc b/test/vp9_block_error_test.cc\nindex 54f74312b..bb3753f6f 100644\n--- a/test/vp9_block_error_test.cc\n+++ b/test/vp9_block_error_test.cc\n@@ -33,7 +33,6 @@ const int kNumIterations \u003d 1000;\n \n using HBDBlockErrorFunc \u003d int64_t (*)(const tran_low_t *, const tran_low_t *, intptr_t, int64_t *, int);\n \n-typedef std::;\n using BlockErrorParam \u003d std::tuple\u003cHBDBlockErrorFunc, HBDBlockErrorFunc, vpx_bit_depth_t\u003e;\n \n using BlockErrorFunc \u003d int64_t (*)(const tran_low_t *, const tran_low_t *, intptr_t, int64_t *);\ndiff --git a/test/vp9_denoiser_test.cc b/test/vp9_denoiser_test.cc\nindex e8c5a9346..fb40a3303 100644\n--- a/test/vp9_denoiser_test.cc\n+++ b/test/vp9_denoiser_test.cc\n@@ -32,7 +32,6 @@ namespace {\n const int kNumPixels \u003d 64 * 64;\n \n using Vp9DenoiserFilterFunc \u003d int (*)(const uint8_t *, int, const uint8_t *, int, uint8_t *, int, int, BLOCK_SIZE, int);\n-typedef std::tuple;\n using VP9DenoiserTestParam \u003d std::tuple\u003cVp9DenoiserFilterFunc, BLOCK_SIZE\u003e;\n \n class VP9DenoiserTest\ndiff --git a/test/vp9_end_to_end_test.cc b/test/vp9_end_to_end_test.cc\nindex 38d3088fb..ae7a504b5 100644\n--- a/test/vp9_end_to_end_test.cc\n+++ b/test/vp9_end_to_end_test.cc\n@@ -34,7 +34,7 @@ const double kPsnrThreshold[][5] \u003d {\n   { 28.4, 31.0, 31.0, 31.0, 31.0 }, { 27.5, 30.0, 30.0, 30.0, 30.0 },\n };\n \n-using TestVideoParam \u003d struct {\n+struct TestVideoParam {\n   const char *filename;\n   unsigned int input_bit_depth;\n   vpx_img_fmt fmt;\ndiff --git a/test/vp9_quantize_test.cc b/test/vp9_quantize_test.cc\nindex 5d82d2a1f..c8dfda896 100644\n--- a/test/vp9_quantize_test.cc\n+++ b/test/vp9_quantize_test.cc\n@@ -39,7 +39,6 @@ namespace {\n const int number_of_iterations \u003d 100;\n \n using QuantizeFunc \u003d void (*)(const tran_low_t *, intptr_t, const macroblock_plane *, tran_low_t *, tran_low_t *, const int16_t *, uint16_t *, const struct ScanOrder *);\n-typedef s;\n using QuantizeParam \u003d std::tuple\u003cQuantizeFunc, QuantizeFunc, vpx_bit_depth_t, int, bool\u003e;\n \n // Wrapper which takes a macroblock_plane.\ndiff --git a/test/vpx_scale_test.cc b/test/vpx_scale_test.cc\nindex 4d29ac475..c7027f773 100644\n--- a/test/vpx_scale_test.cc\n+++ b/test/vpx_scale_test.cc\n@@ -31,7 +31,6 @@ const int kNumSizesToTest \u003d 8;\n const int kSizesToTest[] \u003d { 1, 15, 33, 145, 512, 1025, 3840, 16383 };\n \n using ExtendFrameBorderFunc \u003d void (*)(YV12_BUFFER_CONFIG *);\n-typedef void (*Cop;\n using CopyFrameFunc \u003d void (*)(const YV12_BUFFER_CONFIG *, YV12_BUFFER_CONFIG *);\n \n class ExtendBorderTest\n\ndiff --git a/test/lpf_test.cc b/test/lpf_test.cc\nindex d91023efb..49e41fda7 100644\n--- a/test/lpf_test.cc\n+++ b/test/lpf_test.cc\n@@ -50,7 +50,6 @@ using Pixel \u003d uint8_t;\n \n using loop_op_t \u003d void (*)(Pixel *, int, const uint8_t *, const uint8_t *,\n                            const uint8_t *);\n-typede;\n using dual_loop_op_t \u003d void (*)(Pixel *, int, const uint8_t *, const uint8_t *,\n                                 const uint8_t *, const uint8_t *,\n                                 const uint8_t *, const uint8_t *);\n\ndiff --git a/test/svc_datarate_test.cc b/test/svc_datarate_test.cc\nindex 6ac22775a..d1ef90eea 100644\n--- a/test/svc_datarate_test.cc\n+++ b/test/svc_datarate_test.cc\n@@ -22,7 +22,7 @@\n namespace svc_test {\n namespace {\n \n-using INTER_LAYER_PRED \u003d enum {\n+enum INTER_LAYER_PRED {\n   // Inter-layer prediction is on on all frames.\n   INTER_LAYER_PRED_ON,\n   // Inter-layer prediction is off on all frames.\ndiff --git a/test/svc_end_to_end_test.cc b/test/svc_end_to_end_test.cc\nindex ef6e62b09..b30343b37 100644\n--- a/test/svc_end_to_end_test.cc\n+++ b/test/svc_end_to_end_test.cc\n@@ -22,7 +22,7 @@\n namespace svc_test {\n namespace {\n \n-using INTER_LAYER_PRED \u003d enum {\n+enum INTER_LAYER_PRED {\n   // Inter-layer prediction is on on all frames.\n   INTER_LAYER_PRED_ON,\n   // Inter-layer prediction is off on all frames.\n\n```",
      "revId": "f9f644dff2391078a81b02db11981f59e90216e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7e06961_822e23cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-07-26T00:48:30Z",
      "side": 1,
      "message": "It would be good to preserve the parameter names in function types. Otherwise this is not a net win.",
      "parentUuid": "e836cd8c_75e8eb6b",
      "revId": "f9f644dff2391078a81b02db11981f59e90216e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}