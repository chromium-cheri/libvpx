{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a592a962_11af9e6d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-12-12T19:25:05Z",
      "side": 1,
      "message": "I converted the PoC program in the bug report to a unit test. I replaced the poc input with bytes generated by a pseudorandom number generator, which can also reproduce the bug.\n\nPlease incorporate this unit test into your CL. Thanks.\n\nThe bug can be avoided by lowering `cfg.rc_target_bitrate` or changing `VPX_DL_BEST_QUALITY` to `VPX_DL_REALTIME`. (`VPX_DL_GOOD_QUALITY` also has the bug.)\n\n```\ndiff --git a/test/encode_api_test.cc b/test/encode_api_test.cc\nindex eb8c456de..928f1ede1 100644\n--- a/test/encode_api_test.cc\n+++ b/test/encode_api_test.cc\n@@ -14,6 +14,7 @@\n #include \u003cnew\u003e\n \n #include \"third_party/googletest/src/include/gtest/gtest.h\"\n+#include \"test/acm_random.h\"\n #include \"test/codec_factory.h\"\n #include \"test/encode_test_driver.h\"\n #include \"test/i420_video_source.h\"\n@@ -181,6 +182,37 @@ TEST(EncodeAPI, HugeFramerateVp8) {\n   vpx_img_free(image);\n   ASSERT_EQ(vpx_codec_destroy(\u0026enc), VPX_CODEC_OK);\n }\n+\n+// A test that reproduces https://crbug.com/webm/1831.\n+TEST(EncodeAPI, RandomPixelsVp8) {\n+  // Initialize libvpx encoder\n+  vpx_codec_iface_t *const iface \u003d vpx_codec_vp8_cx();\n+  vpx_codec_enc_cfg_t cfg;\n+  ASSERT_EQ(vpx_codec_enc_config_default(iface, \u0026cfg, 0), VPX_CODEC_OK);\n+\n+  cfg.rc_target_bitrate \u003d 2000;\n+  cfg.g_w \u003d 1280;\n+  cfg.g_h \u003d 720;\n+\n+  vpx_codec_ctx_t enc;\n+  ASSERT_EQ(vpx_codec_enc_init(\u0026enc, iface, \u0026cfg, 0), VPX_CODEC_OK);\n+\n+  // Generate random frame data and encode\n+  uint8_t img[1280 * 720 * 3 / 2];\n+  libvpx_test::ACMRandom rng;\n+  for (size_t i \u003d 0; i \u003c sizeof(img); ++i) {\n+    img[i] \u003d rng.Rand8();\n+  }\n+  vpx_image_t img_wrapper;\n+  ASSERT_EQ(\n+      vpx_img_wrap(\u0026img_wrapper, VPX_IMG_FMT_I420, cfg.g_w, cfg.g_h, 1, img),\n+      \u0026img_wrapper);\n+  ASSERT_EQ(vpx_codec_encode(\u0026enc, \u0026img_wrapper, 0, 1, 0, VPX_DL_BEST_QUALITY),\n+            VPX_CODEC_OK);\n+\n+  // Destroy libvpx encoder\n+  vpx_codec_destroy(\u0026enc);\n+}\n #endif\n \n // Set up 2 spatial streams with 2 temporal layers per stream, and generate\n```",
      "revId": "221ec279fcd93c79dce068b85be2744373d5d6ab",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d2213b8_b02739e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-12-12T17:59:56Z",
      "side": 1,
      "message": "LGTM. Thanks for the fix.\n\nIt would be good to understand why this simple-looking test program causes this integer overflow. None of the encoder config settings seem out of the ordinary.",
      "revId": "221ec279fcd93c79dce068b85be2744373d5d6ab",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}