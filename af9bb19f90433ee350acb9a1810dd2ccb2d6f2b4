{
  "comments": [
    {
      "key": {
        "uuid": "0d54fde2_b7af585c",
        "filename": "vp9/common/arm/neon/vp9_reconintra_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1002802
      },
      "writtenOn": "2015-05-29T17:25:31Z",
      "side": 1,
      "message": "When above and left are both true, will it be faster if interleaved their instructions. There are stalls between these instructions.",
      "revId": "af9bb19f90433ee350acb9a1810dd2ccb2d6f2b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_d48e8efe",
        "filename": "vp9/common/arm/neon/vp9_reconintra_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2015-05-29T17:42:18Z",
      "side": 1,
      "message": "Strange. I had hoped the \u0027inline\u0027 and NULL usage would force the compiler. However, obviously, above and left could be null as well so it still keeps the checks when above/left are passed in and only omits them when NULL is used. Can the non-null-ness of above/left be hinted at? asserts?",
      "parentUuid": "0d54fde2_b7af585c",
      "revId": "af9bb19f90433ee350acb9a1810dd2ccb2d6f2b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_3f7df369",
        "filename": "vp9/common/arm/neon/vp9_reconintra_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2015-05-29T18:16:42Z",
      "side": 1,
      "message": "this is a bit different from the webp version as left storage is different there. I didn\u0027t really look at the assembly output from this with gcc-4.8; though the idea with this is that the compiler should be able to reorder things",
      "parentUuid": "0d54fde2_b7af585c",
      "revId": "af9bb19f90433ee350acb9a1810dd2ccb2d6f2b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91fb853_be0f38e4",
        "filename": "vp9/common/arm/neon/vp9_reconintra_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2015-05-29T21:26:13Z",
      "side": 1,
      "message": "there is a __builtin_expect for gcc, but it\u0027ll probably be easier (and more compatible) to add the ints back in addition to the extra pointers. thanks for mentioning it, I was just doing a blind port...",
      "parentUuid": "ed56c9ec_d48e8efe",
      "revId": "af9bb19f90433ee350acb9a1810dd2ccb2d6f2b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d54fde2_b7bd98a4",
        "filename": "vp9/common/arm/neon/vp9_reconintra_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1002802
      },
      "writtenOn": "2015-05-29T17:25:31Z",
      "side": 1,
      "message": "Why the variable name is y_stride instead of just stride? The previous function\u0027s name\u0027s argument is stride.",
      "range": {
        "startLine": 61,
        "startChar": 55,
        "endLine": 61,
        "endChar": 63
      },
      "revId": "af9bb19f90433ee350acb9a1810dd2ccb2d6f2b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91fb853_38eea5b2",
        "filename": "vp9/common/arm/neon/vp9_reconintra_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2015-05-29T18:16:42Z",
      "side": 1,
      "message": "that\u0027s an artifact of the rtcd prototype and consistent with the rest of the file for the public functions",
      "parentUuid": "0d54fde2_b7bd98a4",
      "range": {
        "startLine": 61,
        "startChar": 55,
        "endLine": 61,
        "endChar": 63
      },
      "revId": "af9bb19f90433ee350acb9a1810dd2ccb2d6f2b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b91fb853_953a24a1",
        "filename": "vp9/common/arm/neon/vp9_reconintra_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2015-05-29T17:47:29Z",
      "side": 1,
      "message": "adding \"if (above !\u003d NULL \u0026\u0026 left !\u003d NULL)\" coalesces the null checks to the start of the function and allows the compiler to interleave the above/left calculations (clang from NDK)",
      "range": {
        "startLine": 63,
        "startChar": 14,
        "endLine": 63,
        "endChar": 22
      },
      "revId": "af9bb19f90433ee350acb9a1810dd2ccb2d6f2b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed56c9ec_ff644bcc",
        "filename": "vp9/common/arm/neon/vp9_reconintra_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2015-05-29T18:19:35Z",
      "side": 1,
      "message": "that might be true, the code uses integers in webp; I didn\u0027t check the assembly output, so maybe the checks aren\u0027t being removed when inlined. still faster, but I\u0027ll have a look",
      "parentUuid": "b91fb853_953a24a1",
      "range": {
        "startLine": 63,
        "startChar": 14,
        "endLine": 63,
        "endChar": 22
      },
      "revId": "af9bb19f90433ee350acb9a1810dd2ccb2d6f2b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}