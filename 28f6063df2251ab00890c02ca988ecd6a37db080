{
  "comments": [
    {
      "key": {
        "uuid": "3dd68a0d_cfd949ff",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 181,
      "author": {
        "id": 1000898
      },
      "writtenOn": "2016-07-05T17:12:28Z",
      "side": 1,
      "message": "why not \u0027const uint16_t*\u0027 ?",
      "range": {
        "startLine": 181,
        "startChar": 16,
        "endLine": 181,
        "endChar": 35
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d0f22b2_ad754969",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 181,
      "author": {
        "id": 1137274
      },
      "writtenOn": "2016-07-05T17:27:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3dd68a0d_cfd949ff",
      "range": {
        "startLine": 181,
        "startChar": 16,
        "endLine": 181,
        "endChar": 35
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dd68a0d_af1fa5b2",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 1000898
      },
      "writtenOn": "2016-07-05T16:33:07Z",
      "side": 1,
      "message": "what\u0027s the guarantee you\u0027re not accessing the padded area (which might contain trash) or even reading past the width * height upper boundary?",
      "range": {
        "startLine": 190,
        "startChar": 27,
        "endLine": 190,
        "endChar": 38
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d0f22b2_8da3a515",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 1137274
      },
      "writtenOn": "2016-07-05T16:49:51Z",
      "side": 1,
      "message": "width and height are always powers of 2. width is always bigger than 8, and hence \"width * height\" is always a multiple of 8, n always inrements by 8. Each iteration loads 8 values from a.",
      "parentUuid": "3dd68a0d_af1fa5b2",
      "range": {
        "startLine": 190,
        "startChar": 27,
        "endLine": 190,
        "endChar": 38
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dd68a0d_afdc05f0",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 1000898
      },
      "writtenOn": "2016-07-05T17:12:28Z",
      "side": 1,
      "message": "some asserts and comments would do well, then.",
      "parentUuid": "7d0f22b2_8da3a515",
      "range": {
        "startLine": 190,
        "startChar": 27,
        "endLine": 190,
        "endChar": 38
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dd68a0d_4fad399b",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1000898
      },
      "writtenOn": "2016-07-05T14:27:24Z",
      "side": 1,
      "message": "why not use:\n\nconst __m128i zero  \u003d _mm_setzero_si128();\n...\n\nconst __m128i v_a0_w \u003d xx_load_128(a + n);\nconst __m128i v_a0_d \u003d _mm_unpacklo_epi16(v_a0_w);\nconst __m128i v_a1_d \u003d _mm_unpackhi_epi16(v_a0_w);\n\nto avoid the extra (partial) load of v_a1_w?",
      "range": {
        "startLine": 195,
        "startChar": 27,
        "endLine": 195,
        "endChar": 45
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9df776e1_83bdbee1",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1137274
      },
      "writtenOn": "2016-07-05T14:54:04Z",
      "side": 1,
      "message": "Unpack has low throughput on newer architectures, and this is already compute bound, not memory bound.",
      "parentUuid": "3dd68a0d_4fad399b",
      "range": {
        "startLine": 195,
        "startChar": 27,
        "endLine": 195,
        "endChar": 45
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dd68a0d_cf1ce9c0",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1000898
      },
      "writtenOn": "2016-07-05T16:33:07Z",
      "side": 1,
      "message": "ok.\n(i was thinking: if the timing is the same, then it\u0027s better to pick the variant that is friendly to most architecture and not just the \u0027newer\u0027).",
      "parentUuid": "9df776e1_83bdbee1",
      "range": {
        "startLine": 195,
        "startChar": 27,
        "endLine": 195,
        "endChar": 45
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dd68a0d_8f0bc179",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1000898
      },
      "writtenOn": "2016-07-05T16:33:07Z",
      "side": 1,
      "message": "that\u0027s a pretty expensive operation. Some downward counter might be better.",
      "range": {
        "startLine": 217,
        "startChar": 9,
        "endLine": 217,
        "endChar": 10
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d0f22b2_ad9e69cf",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1137274
      },
      "writtenOn": "2016-07-05T16:49:51Z",
      "side": 1,
      "message": "Width is always a power of 2 so this is a single TEST instruction. This \u0027if\u0027 statement compiles into 3 branchless scalar instructions (ADD, TEST, CMOVE), which will be basically free due to ILP. Even if it compiles into a branch, it is perfectly predictable.",
      "parentUuid": "3dd68a0d_8f0bc179",
      "range": {
        "startLine": 217,
        "startChar": 9,
        "endLine": 217,
        "endChar": 10
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dd68a0d_4ff53958",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1000898
      },
      "writtenOn": "2016-07-05T17:12:28Z",
      "side": 1,
      "message": "i see. A comment would be helpful.\nIn case, you could also replace by \u0027!(n \u0026 (width - 1))\u0027, just to be explicit.",
      "parentUuid": "7d0f22b2_ad9e69cf",
      "range": {
        "startLine": 217,
        "startChar": 9,
        "endLine": 217,
        "endChar": 10
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dd68a0d_af03253f",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1000898
      },
      "writtenOn": "2016-07-05T17:12:28Z",
      "side": 1,
      "message": "why not make \u0027height\u0027 a real parameter instead of hard-coded value, to save code size?\nThat\u0027s a lot of generated code, but \u0027height\u0027 is not a critical value here. It just appear in a test (line 219), that could be turned into a test-to-zero with a down counter.",
      "range": {
        "startLine": 252,
        "startChar": 0,
        "endLine": 252,
        "endChar": 14
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d0f22b2_8d7a8557",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1137274
      },
      "writtenOn": "2016-07-05T17:27:14Z",
      "side": 1,
      "message": "These are dispatched to via vp10_variance_vtable which is indexed by the block size, so you need a specific function symbol for each block size. If code size is a matter, disable inlining of the implementations above (at which point you can also visit the masked and regular variance functions, they all do the same).",
      "parentUuid": "3dd68a0d_af03253f",
      "range": {
        "startLine": 252,
        "startChar": 0,
        "endLine": 252,
        "endChar": 14
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dd68a0d_cfb229a5",
        "filename": "vpx_dsp/x86/obmc_sad_sse4.c",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1000898
      },
      "writtenOn": "2016-07-05T17:33:58Z",
      "side": 1,
      "message": "if you remove the inline, you\u0027ll lose the \u0027% width\u0027 optimization for power-of-two, and it\u0027s going to be expensive.\n\nI think binary size is something to keep a close eye on.\nThe idea was to have a only the width hard-coded and let the height be free-range:\n\n#define vpx_highbd_obmc_sad##w##_sse41(..., int height) \\\n  ...\n\ninstead of vpx_highbd_obmc_sad##w##x##h##_sse4_1( ...)\n\n(that, only a generated function for each possible width, not all possible widthxheight pairs)",
      "parentUuid": "7d0f22b2_8d7a8557",
      "range": {
        "startLine": 252,
        "startChar": 0,
        "endLine": 252,
        "endChar": 14
      },
      "revId": "28f6063df2251ab00890c02ca988ecd6a37db080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}