{
  "comments": [
    {
      "key": {
        "uuid": "f74a6a97_db33c106",
        "filename": "vp9/common/vp9_thread_common.h",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-10T01:24:35Z",
      "side": 1,
      "message": "The above 2 structs are only used in the encoder and should be placed under /vp9/encoder instead of /vp9/common.",
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_54391d8e",
        "filename": "vp9/encoder/vp9_block.h",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-10T01:24:35Z",
      "side": 1,
      "message": "Could you add a comment to state that this is used in first pass only, and also why we need it? Thanks.",
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_94165572",
        "filename": "vp9/encoder/vp9_encodeframe.c",
        "patchSetId": 4
      },
      "lineNbr": 4012,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-10T01:24:35Z",
      "side": 1,
      "message": "Could you move this to vp9_encode_fp_tiles_row_mt()?",
      "range": {
        "startLine": 4011,
        "startChar": 1,
        "endLine": 4012,
        "endChar": 36
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_5414bd64",
        "filename": "vp9/encoder/vp9_encodeframe.c",
        "patchSetId": 4
      },
      "lineNbr": 4049,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-10T01:24:35Z",
      "side": 1,
      "message": "same as above",
      "range": {
        "startLine": 4049,
        "startChar": 0,
        "endLine": 4049,
        "endChar": 30
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_8ace3044",
        "filename": "vp9/encoder/vp9_encoder.c",
        "patchSetId": 4
      },
      "lineNbr": 2181,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-10T01:24:35Z",
      "side": 1,
      "message": "Is it possible that threads\u003d1 when cpi-\u003enew_mt\u003d1? Do you need to add more condition \"cpi-\u003enum_workers \u003e 1\"?",
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7d8f2b0_cafd43f8",
        "filename": "vp9/encoder/vp9_encoder.c",
        "patchSetId": 4
      },
      "lineNbr": 2181,
      "author": {
        "id": 1177966
      },
      "writtenOn": "2017-01-11T13:43:20Z",
      "side": 1,
      "message": "For threads\u003d1 and cpi-\u003enew_mt\u003d1, the code flows through row based multi-threading path. This would ensure that stats files are bit-exact with each other for different thread configurations when cpi-\u003enew_mt \u003d 1 (but don\u0027t match with reference). Hence the code is as expected.",
      "parentUuid": "77acba9b_8ace3044",
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_cf983ac7",
        "filename": "vp9/encoder/vp9_encoder.h",
        "patchSetId": 4
      },
      "lineNbr": 272,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-10T01:24:35Z",
      "side": 1,
      "message": "Could you point out where these 2 variables are used?",
      "range": {
        "startLine": 271,
        "startChar": 2,
        "endLine": 272,
        "endChar": 28
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_bbb89da4",
        "filename": "vp9/encoder/vp9_encoder.h",
        "patchSetId": 4
      },
      "lineNbr": 280,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-11T01:18:13Z",
      "side": 1,
      "message": "\"enc\" and \"arnr\" may share 1 JobQueueHandle ? This should remove duplicate code in vp9_prepare_job_queue().",
      "range": {
        "startLine": 279,
        "startChar": 0,
        "endLine": 280,
        "endChar": 34
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7d8f2b0_0d07753d",
        "filename": "vp9/encoder/vp9_encoder.h",
        "patchSetId": 4
      },
      "lineNbr": 280,
      "author": {
        "id": 1177966
      },
      "writtenOn": "2017-01-11T13:43:20Z",
      "side": 1,
      "message": "Having separate job handles will help in collapsing enc and arnr filtering stages together in future, if required (to save thread wastage/to aid accelerated implementation).",
      "parentUuid": "77acba9b_bbb89da4",
      "range": {
        "startLine": 279,
        "startChar": 0,
        "endLine": 280,
        "endChar": 34
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83de51f5_a2060304",
        "filename": "vp9/encoder/vp9_encoder.h",
        "patchSetId": 4
      },
      "lineNbr": 280,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-12T05:14:24Z",
      "side": 1,
      "message": "Are you talking about collapsing 2nd pass enc and arnr? In second pass, the alt_ref is first filtered using arnr filter, then encode the frame - they two should always happens in serial order. Right?",
      "parentUuid": "b7d8f2b0_0d07753d",
      "range": {
        "startLine": 279,
        "startChar": 0,
        "endLine": 280,
        "endChar": 34
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_9b1d99db",
        "filename": "vp9/encoder/vp9_encoder.h",
        "patchSetId": 4
      },
      "lineNbr": 286,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-11T01:18:13Z",
      "side": 1,
      "message": "may not be necessary",
      "range": {
        "startLine": 285,
        "startChar": 0,
        "endLine": 286,
        "endChar": 18
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_5bf5c15e",
        "filename": "vp9/encoder/vp9_encoder.h",
        "patchSetId": 4
      },
      "lineNbr": 297,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-11T01:18:13Z",
      "side": 1,
      "message": "same as above",
      "range": {
        "startLine": 296,
        "startChar": 0,
        "endLine": 297,
        "endChar": 18
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_fb5e9591",
        "filename": "vp9/encoder/vp9_encoder.h",
        "patchSetId": 4
      },
      "lineNbr": 302,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-11T01:18:13Z",
      "side": 1,
      "message": "same as above",
      "range": {
        "startLine": 301,
        "startChar": 0,
        "endLine": 302,
        "endChar": 18
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_5b2a30ef",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 4
      },
      "lineNbr": 212,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-10T01:24:35Z",
      "side": 1,
      "message": "Pass in \u0026cpi-\u003etile_thr_data[0] is kind of confusing. Maybe remove data1 or just pass in NULL?",
      "range": {
        "startLine": 212,
        "startChar": 21,
        "endLine": 212,
        "endChar": 43
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_4a633834",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 4
      },
      "lineNbr": 429,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-10T01:24:35Z",
      "side": 1,
      "message": "As I understand, the sync_read \u0026 sync_write are used to protect row stat accumulating. Is it possible to move accumulate_fp_mb_row_stat() to vp9_first_pass_encode_tile_mb_row()? Do it at last mb of the row. Then write cur_col after that. This may eliminate the need for top_row_sync. What do you think?",
      "range": {
        "startLine": 427,
        "startChar": 6,
        "endLine": 429,
        "endChar": 66
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_6db9ec10",
        "filename": "vp9/encoder/vp9_firstpass.c",
        "patchSetId": 4
      },
      "lineNbr": 723,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-11T01:18:13Z",
      "side": 1,
      "message": "Where this comes from? Should this be 0 by default in 1st pass?",
      "range": {
        "startLine": 723,
        "startChar": 2,
        "endLine": 723,
        "endChar": 21
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_3073c756",
        "filename": "vp9/encoder/vp9_firstpass.c",
        "patchSetId": 4
      },
      "lineNbr": 790,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-11T01:18:13Z",
      "side": 1,
      "message": "Could you explain this part?",
      "range": {
        "startLine": 787,
        "startChar": 0,
        "endLine": 790,
        "endChar": 5
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7d8f2b0_6d143165",
        "filename": "vp9/encoder/vp9_firstpass.c",
        "patchSetId": 4
      },
      "lineNbr": 790,
      "author": {
        "id": 1177966
      },
      "writtenOn": "2017-01-11T13:43:20Z",
      "side": 1,
      "message": "These changes are to facilitate getting the intra pred data based on source pixels at tile boundaries. This is required as reconstructed left data may not be available at tile boundaries.",
      "parentUuid": "77acba9b_3073c756",
      "range": {
        "startLine": 787,
        "startChar": 0,
        "endLine": 790,
        "endChar": 5
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83de51f5_c2a787f7",
        "filename": "vp9/encoder/vp9_firstpass.c",
        "patchSetId": 4
      },
      "lineNbr": 790,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-12T05:14:24Z",
      "side": 1,
      "message": "x-\u003eskip_encode \u003d 1 is a speed feature for real time encoding. I don\u0027t think it is a good choice to use it here. Here, for the first mb column in a tile, xd-\u003eleft_mi \u003d NULL, then, in build_intra_predictors(), left_available should be 0, so the dst be filled with 129. I didn\u0027t test it myself. Could you test to see if it is true?",
      "parentUuid": "b7d8f2b0_6d143165",
      "range": {
        "startLine": 787,
        "startChar": 0,
        "endLine": 790,
        "endChar": 5
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77acba9b_1ba6e960",
        "filename": "vp9/encoder/vp9_job_queue.h",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-11T01:18:13Z",
      "side": 1,
      "message": "Is there a reason to define 2 structs instead of using 1?\n\n\"enc\" and \"arnr\" tasks don\u0027t happen at the same time. It will be better if they can share some data.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 31,
        "endChar": 17
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7d8f2b0_adfe29f4",
        "filename": "vp9/encoder/vp9_job_queue.h",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1177966
      },
      "writtenOn": "2017-01-11T14:14:27Z",
      "side": 1,
      "message": "Multi-threading any other stages may have different elements in job_node_t. Having this kind of implementation will make the code scalable for any future changes. However we have used one structure for now as per your comments. Please let us know your thoughts.",
      "parentUuid": "77acba9b_1ba6e960",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 31,
        "endChar": 17
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f74a6a97_5bccd1c8",
        "filename": "vp9/encoder/vp9_multi_thread.c",
        "patchSetId": 4
      },
      "lineNbr": 162,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-10T01:24:35Z",
      "side": 1,
      "message": "Could you use cm-\u003emi_cols, cm-\u003emi_rows, cm-\u003emb_cols, and cm-\u003emb_rows instead?",
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83de51f5_782d3066",
        "filename": "vp9/encoder/vp9_multi_thread.c",
        "patchSetId": 4
      },
      "lineNbr": 238,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-12T05:14:24Z",
      "side": 1,
      "message": "This is a reasonable way. Just thought - in some cases, if this function gets called often, what is the overhead caused by this calculation? Could we instead use (job_que_hndl-\u003etotal_jobs - job_que_hndl-\u003enum_jobs_acquired) if we know there is same job_que_hndl-\u003etotal_jobs in every tile.",
      "range": {
        "startLine": 237,
        "startChar": 2,
        "endLine": 238,
        "endChar": 75
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83de51f5_d8d21c3d",
        "filename": "vp9/encoder/vp9_multi_thread.c",
        "patchSetId": 4
      },
      "lineNbr": 329,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-12T05:14:24Z",
      "side": 1,
      "message": "When a thread calls this function, it knows the cur_tile_id is done. The for loop always checks all tiles, which seems not efficient. Can we reduce the checks to lower the sync overhead?",
      "range": {
        "startLine": 323,
        "startChar": 0,
        "endLine": 329,
        "endChar": 3
      },
      "revId": "7a6130eb47c7f52cbdd9f6d844173b48f22c11d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}