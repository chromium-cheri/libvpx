{
  "comments": [
    {
      "key": {
        "uuid": "c323e938_19b34bd8",
        "filename": "vp9/encoder/vp9_encodeframe.c",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-18T00:39:31Z",
      "side": 1,
      "message": "Can be removed?\n\nNo change in this file.",
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3a049a8_e8e98567",
        "filename": "vp9/encoder/vp9_encodemb.c",
        "patchSetId": 6
      },
      "lineNbr": 829,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-18T00:39:31Z",
      "side": 1,
      "message": "Change to (x-\u003eskip_encode || x-\u003efp_src_pred)  ?",
      "range": {
        "startLine": 829,
        "startChar": 6,
        "endLine": 829,
        "endChar": 20
      },
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3e70d23_1b99275a",
        "filename": "vp9/encoder/vp9_encoder.c",
        "patchSetId": 6
      },
      "lineNbr": 2181,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-18T00:39:31Z",
      "side": 1,
      "message": "Deallocating row_mt_mem before deallocating threads can cause problem. Please look at the code below and modify it.",
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "036b4132_fdece7d5",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 287,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-18T00:39:31Z",
      "side": 1,
      "message": "This can be done later. - We found that setting a sync_range(instead of using 1) helped improve the speed. Did you try it?",
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "289f421f_ffcd9b3d",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 287,
      "author": {
        "id": 1177966
      },
      "writtenOn": "2017-01-19T14:14:38Z",
      "side": 1,
      "message": "Setting sync_range to 1 will help reducing the ramp-up/ramp down times of each thread while processing a tile. The speed improvements should be substantial when thread count is higher or blocks (MBs in case of first pass/SBs in case of second pass) per tile width is lower.  \nFor 1080p first pass encoding with 4 tile columns, MBs per tile width can be as low as 28. Hence the number of threads that can work in parallel is 28/sync_range. \nSimilarly for 1080p second pass encoding with 4 tile columns, SBs per tile width can be as low as 7. Hence the number of threads that can work in parallel is 7/sync_range. \nWe have seen that for higher thread count (\u003e16 threads in above example of second pass) using sync_range\u003d1 is optimal. For lower thread count, the performance was similar.\nWe are interested to know how tweaking the sync_range (\u003e1) can give better performance.",
      "parentUuid": "036b4132_fdece7d5",
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8852ac9_794f5d29",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 287,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-20T02:47:31Z",
      "side": 1,
      "message": "Right. If the maximum number of tiles allowed is used, which means tile width \u003c 512, then sync_range \u003d1 should be the good choice. In VP9 code, it is decided by frame width. Either way is fine I think.",
      "parentUuid": "289f421f_ffcd9b3d",
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3e70d23_7b5f1352",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 441,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-18T00:39:31Z",
      "side": 1,
      "message": "dealloc and alloc should be called under same condition? Maybe better to move this down and put them together.",
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "289f421f_bfc7131c",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 441,
      "author": {
        "id": 1177966
      },
      "writtenOn": "2017-01-19T14:14:38Z",
      "side": 1,
      "message": "We ensured that dealloc and alloc have the same condition, but not together due to the dependency on tile_data which is reallocated in vp9_init_tile_data. However in loop filtering code, there is no such dependency.",
      "parentUuid": "e3e70d23_7b5f1352",
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8852ac9_84d674a5",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 441,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-20T02:47:31Z",
      "side": 1,
      "message": "Thanks. I just worry that, later, if someone modifies one but forget to modify the other one, this could cause some issue.\n\nI may miss the dependency - could we move dealloc down after vp9_init_tile_data() to resolve this?",
      "parentUuid": "289f421f_bfc7131c",
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23b3e516_0b3e69dd",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 447,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-18T00:39:31Z",
      "side": 1,
      "message": "The frame size(resolution) may change from one frame to the next frame. Should consider that here. Please refer to loopfilter mt code.\n\nAlso, these 2 names: max_num_tile_cols and max_num_tile_rows seem a little confusing. Should they be allocated_tile_cols/rows?",
      "range": {
        "startLine": 445,
        "startChar": 6,
        "endLine": 447,
        "endChar": 27
      },
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "289f421f_5f028f84",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 447,
      "author": {
        "id": 1177966
      },
      "writtenOn": "2017-01-19T14:14:38Z",
      "side": 1,
      "message": "We see the check based on sb_rows in case of loop filtering which helps handle dynamic resolution change. We will add similar conditions based on width/height to support the same. Can you point us to a test-bench using which we can test if dynamic change in resolution has any issues (with new_mt \u003d 1).",
      "parentUuid": "23b3e516_0b3e69dd",
      "range": {
        "startLine": 445,
        "startChar": 6,
        "endLine": 447,
        "endChar": 27
      },
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8852ac9_245e8855",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 447,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-20T02:47:31Z",
      "side": 1,
      "message": "We have a unit test: resize_test.cc that you can try. You may have to modify it to add number of tiles \u0026 threads used as well as new_mt \u003d 1.",
      "parentUuid": "289f421f_5f028f84",
      "range": {
        "startLine": 445,
        "startChar": 6,
        "endLine": 447,
        "endChar": 27
      },
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e399cd94_5cd1d550",
        "filename": "vp9/encoder/vp9_ethread.c",
        "patchSetId": 6
      },
      "lineNbr": 450,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-18T00:39:31Z",
      "side": 1,
      "message": "It seems no good reason to have multi_thread_ctxt-\u003enum_row_mt_workers that can be replaced by cpi-\u003enum_workers, right? If you need it before create_enc_workers(), may use a local variable.",
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "236e8540_783d69dd",
        "filename": "vp9/encoder/vp9_ethread.h",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-18T00:39:31Z",
      "side": 1,
      "message": "MAX_NUM_TILE_COLS",
      "range": {
        "startLine": 26,
        "startChar": 29,
        "endLine": 26,
        "endChar": 35
      },
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c39e897c_7b56df0c",
        "filename": "vp9/vp9_cx_iface.c",
        "patchSetId": 6
      },
      "lineNbr": 1565,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-18T00:39:31Z",
      "side": 1,
      "message": "Providing a set control API would allow the customers to set new_mt at the frame level. Do you know if it works if one frame uses different new_mt setting than previous frame?",
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "289f421f_1f0c07b3",
        "filename": "vp9/vp9_cx_iface.c",
        "patchSetId": 6
      },
      "lineNbr": 1565,
      "author": {
        "id": 1177966
      },
      "writtenOn": "2017-01-19T14:14:38Z",
      "side": 1,
      "message": "We expect that dynamic change of new_mt works fine (as per the code review). We shall plan to test it.",
      "parentUuid": "c39e897c_7b56df0c",
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c323e938_591783c0",
        "filename": "vpxenc.c",
        "patchSetId": 6
      },
      "lineNbr": 454,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2017-01-18T00:39:31Z",
      "side": 1,
      "message": "\"new-mt\"",
      "range": {
        "startLine": 454,
        "startChar": 19,
        "endLine": 454,
        "endChar": 25
      },
      "revId": "868f66a41e0bd496c9f02f83d4fdcd5a07c90f97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}