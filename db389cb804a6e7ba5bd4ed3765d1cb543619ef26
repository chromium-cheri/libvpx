{
  "comments": [
    {
      "key": {
        "uuid": "AAAAGX//sB8\u003d",
        "filename": "vp8/common/invtrans.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2011-12-21T20:54:26Z",
      "side": 1,
      "message": "also need vpx_ports/mem.h for DECLARE_ALIGNED",
      "revId": "db389cb804a6e7ba5bd4ed3765d1cb543619ef26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAGX//rj8\u003d",
        "filename": "vp8/common/invtrans.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000882
      },
      "writtenOn": "2011-12-22T15:13:22Z",
      "side": 1,
      "message": "I would rather not have to copy, but for now, it is ok.  We could either move the dequantization out of the idct, or we could keep a copy of cpi-\u003eY1quant[] in the thread.",
      "revId": "db389cb804a6e7ba5bd4ed3765d1cb543619ef26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAGX//rdw\u003d",
        "filename": "vp8/common/invtrans.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000856
      },
      "writtenOn": "2011-12-22T19:00:15Z",
      "side": 1,
      "message": "What\u0027s the other thread doing that\u0027s accessing these coefficients? Is this only related to DQC[0] being modified, or are the other coefficients being accessed too? I\u0027m not sure we\u0027re not trading one race condition for another here.",
      "parentUuid": "AAAAGX//rj8\u003d",
      "revId": "db389cb804a6e7ba5bd4ed3765d1cb543619ef26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAGX//rc0\u003d",
        "filename": "vp8/common/invtrans.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2011-12-22T19:47:33Z",
      "side": 1,
      "message": "It seems all threads share/use same set of xd-\u003eblock[0].dequant. This change keeps DQC[0] local, so it won\u0027t cause problems for other threads. It sounds right.",
      "parentUuid": "AAAAGX//rdw\u003d",
      "revId": "db389cb804a6e7ba5bd4ed3765d1cb543619ef26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAGX//rTY\u003d",
        "filename": "vp8/common/invtrans.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 1000856
      },
      "writtenOn": "2011-12-23T00:48:52Z",
      "side": 1,
      "message": "ok, I understand what\u0027s happening now and where we do this copy already in the decoder.\n\nIt\u0027d be better to avoid the copy, even just the one element, because this is the common case. As a hack, we could expand cpi-\u003ecommon.Y1Dequant to [128][32] and populate the elements [16,31] as would work for this case, then we just need to adjust the pointer in this function. Ultimately, I\u0027d like to see a solution that reduced the size of Y1Dequant and friends to [128][2] as there are only two unique values in the array, and them build the vector of 16 (probably in MACROBLOCKD) whenever the active Q changes (setup_mb_quantizer). This could even be done once per frame, where we build the vectors for the Qs in use on that frame, saving a good chunk of memory in that struct.",
      "parentUuid": "AAAAGX//rc0\u003d",
      "revId": "db389cb804a6e7ba5bd4ed3765d1cb543619ef26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}