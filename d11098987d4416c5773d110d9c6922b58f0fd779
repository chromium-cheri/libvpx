{
  "comments": [
    {
      "key": {
        "uuid": "3d695660_52557b72",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2018-05-15T03:11:12Z",
      "side": 1,
      "message": "vsx",
      "range": {
        "startLine": 7,
        "startChar": 20,
        "endLine": 7,
        "endChar": 23
      },
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5947a24f_f1846bde",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2018-05-15T03:11:12Z",
      "side": 1,
      "message": "Looks like this wasn\u0027t noticed before, but we do have an INLINE define in vpx_config.h in the off chance someone wants to build this with Visual Studio.",
      "range": {
        "startLine": 105,
        "startChar": 7,
        "endLine": 105,
        "endChar": 13
      },
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd87850c_100f4cf8",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1002404
      },
      "writtenOn": "2018-05-15T15:19:40Z",
      "side": 1,
      "message": "I can use it, I\u0027m doubtful Visual Studio will support PowerPC anytime soon, but better safe than sorry :)",
      "parentUuid": "5947a24f_f1846bde",
      "range": {
        "startLine": 105,
        "startChar": 7,
        "endLine": 105,
        "endChar": 13
      },
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c759c43_5d4bdfb0",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2018-05-15T03:11:12Z",
      "side": 1,
      "message": "prefer sum and sum_squared to make reading the prototype a little easier. inside the function s/ss are fine.\n\nalso put sum_squared first to match the other prototypes",
      "range": {
        "startLine": 106,
        "startChar": 48,
        "endLine": 106,
        "endChar": 50
      },
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6d1dd67_14f1e29c",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1002404
      },
      "writtenOn": "2018-05-15T15:19:40Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1c759c43_5d4bdfb0",
      "range": {
        "startLine": 106,
        "startChar": 48,
        "endLine": 106,
        "endChar": 50
      },
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0b2598f_1a34abfd",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1283694
      },
      "writtenOn": "2018-05-15T14:16:46Z",
      "side": 1,
      "message": "I think this might bottleneck your pipeline. Everything converges here on every loop iteration. We might get away with converging only after the height loop.",
      "range": {
        "startLine": 128,
        "startChar": 1,
        "endLine": 135,
        "endChar": 28
      },
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d3629ea_9e5c85ef",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1002404
      },
      "writtenOn": "2018-05-15T15:19:40Z",
      "side": 1,
      "message": "Ideally we could use 2/4 more registers and issue 2 operations in parallel and see if it gets faster.",
      "parentUuid": "f0b2598f_1a34abfd",
      "range": {
        "startLine": 128,
        "startChar": 1,
        "endLine": 135,
        "endChar": 28
      },
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08405ae6_e7505ab7",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1283694
      },
      "writtenOn": "2018-05-15T14:16:46Z",
      "side": 1,
      "message": "For blocks of width 4, you don\u0027t need to use a 32-bit accumulators for the sum.\nThe input is 8-bit and the biggest height is 8 (2^3).\nWorst case, each pipeline will require 2^11 bits.",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f72c99a8_3053bb10",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1002404
      },
      "writtenOn": "2018-05-15T15:19:40Z",
      "side": 1,
      "message": "sums4s does not have a 16bit variant, ideally it could be changed to use the normal add and a single sum4s at the end.\n\nmsums has the same constraint and an alternative would require few more instructions.\n\nNot sure if it worth it given 4xN is already on the diminished returns side.",
      "parentUuid": "08405ae6_e7505ab7",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4b7d503_527dbc2f",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 154,
      "author": {
        "id": 1283694
      },
      "writtenOn": "2018-05-15T15:31:42Z",
      "side": 1,
      "message": "The idea would be to use vec_add(d, s) inside the loop and an extra vec_sum4s after the loop (like you said).\n\nWe can\u0027t change msums, because the sse requires 20-bits",
      "parentUuid": "f72c99a8_3053bb10",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04755805_3e3b2783",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1283694
      },
      "writtenOn": "2018-05-15T14:16:46Z",
      "side": 1,
      "message": "For blocks of width 8, you don\u0027t need to use a 32-bit accumulators for the sum.\nThe input is 8-bit and the biggest block height is 16 (2^4).\nWorst case, each pipeline will require 2^12 bits.",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c524aec6_7b2b657c",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1002404
      },
      "writtenOn": "2018-05-15T15:19:40Z",
      "side": 1,
      "message": "Same considerations as 4xN case, it might worth investigating this and unrolling as well.",
      "parentUuid": "04755805_3e3b2783",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6079fa48_3d6b4839",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1283694
      },
      "writtenOn": "2018-05-15T14:16:46Z",
      "side": 1,
      "message": "For blocks of width 16, it might be faster to use two 16-bit accumulators and combine them only outside of the height loop. The CPU *should* be able to process both accumulator in parallel.",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1dfd9ac_38c8f283",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1002404
      },
      "writtenOn": "2018-05-15T15:19:40Z",
      "side": 1,
      "message": "It would be interesting to unroll a bit and use the accumulators, not 100% sold on replacing msums though.",
      "parentUuid": "6079fa48_3d6b4839",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2225c36f_9e0e5175",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 185,
      "author": {
        "id": 1283694
      },
      "writtenOn": "2018-05-15T15:31:42Z",
      "side": 1,
      "message": "You can\u0027t replace msums. What I\u0027m proposing here is s0 \u003d vec_add(d0, s0) and s1 \u003d vec_add(d1, s1), and something like s \u003d vec_sum4s(s0, s) after the loop.",
      "parentUuid": "d1dfd9ac_38c8f283",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "987ce822_b15d2bbf",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1283694
      },
      "writtenOn": "2018-05-15T14:16:46Z",
      "side": 1,
      "message": "It might be faster to use two 32-bit accumulators (ss0, ss1) and add them outside of the height loop.",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe101724_992530b5",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1002404
      },
      "writtenOn": "2018-05-15T15:19:40Z",
      "side": 1,
      "message": "Probably it will.",
      "parentUuid": "987ce822_b15d2bbf",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "894e90a3_8c7c7f8a",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1283694
      },
      "writtenOn": "2018-05-15T14:16:46Z",
      "side": 1,
      "message": "For blocks of width 32, I would be curious of using four 16-bit accumulators.",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8feaadaf_65890cf2",
        "filename": "vpx_dsp/ppc/variance_vsx.c",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1002404
      },
      "writtenOn": "2018-05-15T15:19:40Z",
      "side": 1,
      "message": "In general anything that uses more registers should give some good results.",
      "parentUuid": "894e90a3_8c7c7f8a",
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78d8d74e_5f1ebea7",
        "filename": "vpx_dsp/vpx_dsp_rtcd_defs.pl",
        "patchSetId": 2
      },
      "lineNbr": 1193,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2018-05-15T03:11:12Z",
      "side": 1,
      "message": "Did you mean to add vsx here?",
      "range": {
        "startLine": 1193,
        "startChar": 66,
        "endLine": 1193,
        "endChar": 67
      },
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4264855b_a9943e8e",
        "filename": "vpx_dsp/vpx_dsp_rtcd_defs.pl",
        "patchSetId": 2
      },
      "lineNbr": 1193,
      "author": {
        "id": 1002404
      },
      "writtenOn": "2018-05-15T15:19:40Z",
      "side": 1,
      "message": "Yes, but it will probably happen in the far future.",
      "parentUuid": "78d8d74e_5f1ebea7",
      "range": {
        "startLine": 1193,
        "startChar": 66,
        "endLine": 1193,
        "endChar": 67
      },
      "revId": "d11098987d4416c5773d110d9c6922b58f0fd779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}