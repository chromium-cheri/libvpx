// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vp9bat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vp9bat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* VP9Syntax_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VP9Syntax_reflection_ = NULL;
const ::google::protobuf::Descriptor* VP9Syntax_SyntaxElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VP9Syntax_SyntaxElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoopFilterEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoopFilterEdge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoopFilterEdge_FilterType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SampleBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Thumbnail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Thumbnail_reflection_ = NULL;
const ::google::protobuf::Descriptor* PictureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PictureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PictureInfo_SegmentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PictureInfo_SegmentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PictureInfo_Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PictureInfo_Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PictureInfo_Stat_StatEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PictureInfo_Stat_StatEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* PictureInfo_NumericTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PictureInfo_NumericTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* PictureImgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PictureImgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockInfo_MV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockInfo_MV_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockInfo_MV_MVPredictor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockInfo_MV_MVPredictor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockInfo_TxSize_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockInfo_SwitchableFilterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BlockInfo_IntraMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Coeffs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coeffs_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperblockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperblockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperblockRegion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperblockRegion_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawBytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawBytes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vp9bat_2eproto() {
  protobuf_AddDesc_vp9bat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vp9bat.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  VP9Syntax_descriptor_ = file->message_type(1);
  static const int VP9Syntax_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VP9Syntax, elements_),
  };
  VP9Syntax_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VP9Syntax_descriptor_,
      VP9Syntax::default_instance_,
      VP9Syntax_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VP9Syntax, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VP9Syntax, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VP9Syntax));
  VP9Syntax_SyntaxElement_descriptor_ = VP9Syntax_descriptor_->nested_type(0);
  static const int VP9Syntax_SyntaxElement_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VP9Syntax_SyntaxElement, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VP9Syntax_SyntaxElement, intvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VP9Syntax_SyntaxElement, stringvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VP9Syntax_SyntaxElement, bcrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VP9Syntax_SyntaxElement, bcvalue_),
  };
  VP9Syntax_SyntaxElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VP9Syntax_SyntaxElement_descriptor_,
      VP9Syntax_SyntaxElement::default_instance_,
      VP9Syntax_SyntaxElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VP9Syntax_SyntaxElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VP9Syntax_SyntaxElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VP9Syntax_SyntaxElement));
  LoopFilterEdge_descriptor_ = file->message_type(2);
  static const int LoopFilterEdge_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopFilterEdge, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopFilterEdge, component_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopFilterEdge, isvertical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopFilterEdge, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopFilterEdge, level_),
  };
  LoopFilterEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoopFilterEdge_descriptor_,
      LoopFilterEdge::default_instance_,
      LoopFilterEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopFilterEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoopFilterEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoopFilterEdge));
  LoopFilterEdge_FilterType_descriptor_ = LoopFilterEdge_descriptor_->enum_type(0);
  SampleBlock_descriptor_ = file->message_type(3);
  static const int SampleBlock_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleBlock, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleBlock, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleBlock, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleBlock, samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleBlock, flags_),
  };
  SampleBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleBlock_descriptor_,
      SampleBlock::default_instance_,
      SampleBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleBlock));
  StreamInfo_descriptor_ = file->message_type(4);
  static const int StreamInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, numpics_),
  };
  StreamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamInfo_descriptor_,
      StreamInfo::default_instance_,
      StreamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamInfo));
  Thumbnail_descriptor_ = file->message_type(5);
  static const int Thumbnail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumbnail, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumbnail, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumbnail, thumbnail_),
  };
  Thumbnail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Thumbnail_descriptor_,
      Thumbnail::default_instance_,
      Thumbnail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumbnail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thumbnail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Thumbnail));
  PictureInfo_descriptor_ = file->message_type(6);
  static const int PictureInfo_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, decodeindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, displayindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, isinter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, digest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, references_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, lastrefidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, goldrefidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, altrefidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, segmentdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, segementabsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, framectxorigin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, framectxidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, numbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, numbools_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, probs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, tilecolpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, tilerowpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, lfrefdelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, lfmodedelta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, signbias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, tilesizes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, thumbnail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, bytepos_),
  };
  PictureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PictureInfo_descriptor_,
      PictureInfo::default_instance_,
      PictureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PictureInfo));
  PictureInfo_SegmentData_descriptor_ = PictureInfo_descriptor_->nested_type(0);
  static const int PictureInfo_SegmentData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_SegmentData, skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_SegmentData, altq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_SegmentData, altlf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_SegmentData, ref_),
  };
  PictureInfo_SegmentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PictureInfo_SegmentData_descriptor_,
      PictureInfo_SegmentData::default_instance_,
      PictureInfo_SegmentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_SegmentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_SegmentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PictureInfo_SegmentData));
  PictureInfo_Stat_descriptor_ = PictureInfo_descriptor_->nested_type(1);
  static const int PictureInfo_Stat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_Stat, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_Stat, rawentries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_Stat, areanormalizedentries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_Stat, bitsnormalizedentries_),
  };
  PictureInfo_Stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PictureInfo_Stat_descriptor_,
      PictureInfo_Stat::default_instance_,
      PictureInfo_Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_Stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_Stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PictureInfo_Stat));
  PictureInfo_Stat_StatEntry_descriptor_ = PictureInfo_Stat_descriptor_->nested_type(0);
  static const int PictureInfo_Stat_StatEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_Stat_StatEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_Stat_StatEntry, value_),
  };
  PictureInfo_Stat_StatEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PictureInfo_Stat_StatEntry_descriptor_,
      PictureInfo_Stat_StatEntry::default_instance_,
      PictureInfo_Stat_StatEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_Stat_StatEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_Stat_StatEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PictureInfo_Stat_StatEntry));
  PictureInfo_NumericTree_descriptor_ = PictureInfo_descriptor_->nested_type(2);
  static const int PictureInfo_NumericTree_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_NumericTree, nodevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_NumericTree, nodename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_NumericTree, children_),
  };
  PictureInfo_NumericTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PictureInfo_NumericTree_descriptor_,
      PictureInfo_NumericTree::default_instance_,
      PictureInfo_NumericTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_NumericTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureInfo_NumericTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PictureInfo_NumericTree));
  PictureImgs_descriptor_ = file->message_type(7);
  static const int PictureImgs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureImgs, predimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureImgs, resimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureImgs, reconimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureImgs, finalimg_),
  };
  PictureImgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PictureImgs_descriptor_,
      PictureImgs::default_instance_,
      PictureImgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureImgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PictureImgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PictureImgs));
  BlockInfo_descriptor_ = file->message_type(8);
  static const int BlockInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, bools_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, intra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, segment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, txsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, mv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, mctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, intralumamode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, intrachromamode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, coeffbools_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, coeffbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, lumadcscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, lumaacscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, chromadcscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, chromaacscale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, bitpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, syntaxstart_),
  };
  BlockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockInfo_descriptor_,
      BlockInfo::default_instance_,
      BlockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockInfo));
  BlockInfo_MV_descriptor_ = BlockInfo_descriptor_->nested_type(0);
  static const int BlockInfo_MV_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV, mvx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV, mvy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV, deltax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV, deltay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV, preds_),
  };
  BlockInfo_MV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockInfo_MV_descriptor_,
      BlockInfo_MV::default_instance_,
      BlockInfo_MV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockInfo_MV));
  BlockInfo_MV_MVPredictor_descriptor_ = BlockInfo_MV_descriptor_->nested_type(0);
  static const int BlockInfo_MV_MVPredictor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV_MVPredictor, predictor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV_MVPredictor, loc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV_MVPredictor, label_),
  };
  BlockInfo_MV_MVPredictor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockInfo_MV_MVPredictor_descriptor_,
      BlockInfo_MV_MVPredictor::default_instance_,
      BlockInfo_MV_MVPredictor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV_MVPredictor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfo_MV_MVPredictor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockInfo_MV_MVPredictor));
  BlockInfo_TxSize_descriptor_ = BlockInfo_descriptor_->enum_type(0);
  BlockInfo_SwitchableFilterType_descriptor_ = BlockInfo_descriptor_->enum_type(1);
  BlockInfo_IntraMode_descriptor_ = BlockInfo_descriptor_->enum_type(2);
  Coeffs_descriptor_ = file->message_type(9);
  static const int Coeffs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coeffs, coeffs_),
  };
  Coeffs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Coeffs_descriptor_,
      Coeffs::default_instance_,
      Coeffs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coeffs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coeffs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Coeffs));
  SuperblockInfo_descriptor_ = file->message_type(10);
  static const int SuperblockInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockInfo, sbcol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockInfo, sbrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockInfo, blocks_),
  };
  SuperblockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperblockInfo_descriptor_,
      SuperblockInfo::default_instance_,
      SuperblockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperblockInfo));
  SuperblockRegion_descriptor_ = file->message_type(11);
  static const int SuperblockRegion_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockRegion, sbcol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockRegion, sbrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockRegion, sbcols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockRegion, sbrows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockRegion, superblocks_),
  };
  SuperblockRegion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperblockRegion_descriptor_,
      SuperblockRegion::default_instance_,
      SuperblockRegion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockRegion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperblockRegion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperblockRegion));
  RawBytes_descriptor_ = file->message_type(12);
  static const int RawBytes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBytes, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBytes, data_),
  };
  RawBytes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RawBytes_descriptor_,
      RawBytes::default_instance_,
      RawBytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBytes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawBytes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RawBytes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vp9bat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VP9Syntax_descriptor_, &VP9Syntax::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VP9Syntax_SyntaxElement_descriptor_, &VP9Syntax_SyntaxElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoopFilterEdge_descriptor_, &LoopFilterEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleBlock_descriptor_, &SampleBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamInfo_descriptor_, &StreamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Thumbnail_descriptor_, &Thumbnail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PictureInfo_descriptor_, &PictureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PictureInfo_SegmentData_descriptor_, &PictureInfo_SegmentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PictureInfo_Stat_descriptor_, &PictureInfo_Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PictureInfo_Stat_StatEntry_descriptor_, &PictureInfo_Stat_StatEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PictureInfo_NumericTree_descriptor_, &PictureInfo_NumericTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PictureImgs_descriptor_, &PictureImgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockInfo_descriptor_, &BlockInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockInfo_MV_descriptor_, &BlockInfo_MV::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockInfo_MV_MVPredictor_descriptor_, &BlockInfo_MV_MVPredictor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Coeffs_descriptor_, &Coeffs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperblockInfo_descriptor_, &SuperblockInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperblockRegion_descriptor_, &SuperblockRegion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RawBytes_descriptor_, &RawBytes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vp9bat_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete VP9Syntax::default_instance_;
  delete VP9Syntax_reflection_;
  delete VP9Syntax_SyntaxElement::default_instance_;
  delete VP9Syntax_SyntaxElement_reflection_;
  delete LoopFilterEdge::default_instance_;
  delete LoopFilterEdge_reflection_;
  delete SampleBlock::default_instance_;
  delete SampleBlock_reflection_;
  delete StreamInfo::default_instance_;
  delete StreamInfo_reflection_;
  delete Thumbnail::default_instance_;
  delete Thumbnail_reflection_;
  delete PictureInfo::default_instance_;
  delete PictureInfo_reflection_;
  delete PictureInfo_SegmentData::default_instance_;
  delete PictureInfo_SegmentData_reflection_;
  delete PictureInfo_Stat::default_instance_;
  delete PictureInfo_Stat_reflection_;
  delete PictureInfo_Stat_StatEntry::default_instance_;
  delete PictureInfo_Stat_StatEntry_reflection_;
  delete PictureInfo_NumericTree::default_instance_;
  delete PictureInfo_NumericTree_reflection_;
  delete PictureImgs::default_instance_;
  delete PictureImgs_reflection_;
  delete BlockInfo::default_instance_;
  delete BlockInfo_reflection_;
  delete BlockInfo_MV::default_instance_;
  delete BlockInfo_MV_reflection_;
  delete BlockInfo_MV_MVPredictor::default_instance_;
  delete BlockInfo_MV_MVPredictor_reflection_;
  delete Coeffs::default_instance_;
  delete Coeffs_reflection_;
  delete SuperblockInfo::default_instance_;
  delete SuperblockInfo_reflection_;
  delete SuperblockRegion::default_instance_;
  delete SuperblockRegion_reflection_;
  delete RawBytes::default_instance_;
  delete RawBytes_reflection_;
}

void protobuf_AddDesc_vp9bat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014vp9bat.proto\"\035\n\005Point\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030"
    "\002 \002(\005\"\237\001\n\tVP9Syntax\022*\n\010elements\030\001 \003(\0132\030."
    "VP9Syntax.SyntaxElement\032f\n\rSyntaxElement"
    "\022\014\n\004name\030\001 \002(\t\022\020\n\010intValue\030\002 \001(\005\022\023\n\013stri"
    "ngValue\030\003 \001(\t\022\017\n\007bcRange\030\004 \001(\005\022\017\n\007bcValu"
    "e\030\005 \001(\005\"\312\001\n\016LoopFilterEdge\022\021\n\001p\030\001 \002(\0132\006."
    "Point\022\021\n\tcomponent\030\002 \002(\005\022\022\n\nisVertical\030\003"
    " \002(\010\022(\n\004type\030\004 \002(\0162\032.LoopFilterEdge.Filt"
    "erType\022\r\n\005level\030\005 \002(\005\"E\n\nFilterType\022\r\n\tL"
    "F_16WIDE\020\000\022\014\n\010LF_8WIDE\020\001\022\014\n\010LF_4WIDE\020\002\022\014"
    "\n\010LF_2WIDE\020\003\"V\n\013SampleBlock\022\021\n\001p\030\001 \002(\0132\006"
    ".Point\022\t\n\001w\030\003 \002(\005\022\t\n\001h\030\004 \002(\005\022\017\n\007samples\030"
    "\005 \002(\014\022\r\n\005flags\030\006 \001(\014\"\035\n\nStreamInfo\022\017\n\007nu"
    "mPics\030\001 \002(\005\"4\n\tThumbnail\022\t\n\001w\030\001 \002(\005\022\t\n\001h"
    "\030\002 \002(\005\022\021\n\tthumbnail\030\003 \002(\014\"\203\010\n\013PictureInf"
    "o\022\023\n\013decodeIndex\030\001 \002(\005\022\024\n\014displayIndex\030\002"
    " \002(\005\022\t\n\001w\030\003 \002(\005\022\t\n\001h\030\004 \002(\005\022\017\n\007isInter\030\005 "
    "\002(\010\022\016\n\006digest\030\006 \001(\t\022\022\n\nreferences\030\007 \003(\005\022"
    "\022\n\nlastRefIdx\030\010 \001(\005\022\022\n\ngoldRefIdx\030\t \001(\005\022"
    "\021\n\taltRefIdx\030\n \001(\005\022-\n\013segmentData\030\013 \003(\0132"
    "\030.PictureInfo.SegmentData\022\027\n\017segementAbs"
    "Data\030\014 \001(\010\022\026\n\016frameCtxOrigin\030\r \003(\005\022\023\n\013fr"
    "ameCtxIdx\030\016 \002(\005\022\020\n\010numBytes\030\017 \002(\005\022\020\n\010num"
    "Bools\030\020 \002(\005\022 \n\005stats\030\021 \003(\0132\021.PictureInfo"
    ".Stat\022\'\n\005probs\030\022 \002(\0132\030.PictureInfo.Numer"
    "icTree\022(\n\006counts\030\023 \002(\0132\030.PictureInfo.Num"
    "ericTree\022\022\n\ntileColPos\030\024 \003(\005\022\022\n\ntileRowP"
    "os\030\025 \003(\005\022\022\n\nlfRefDelta\030\026 \003(\005\022\023\n\013lfModeDe"
    "lta\030\027 \003(\005\022\020\n\010signBias\030\030 \003(\005\022\021\n\ttileSizes"
    "\030\031 \003(\005\022\035\n\tthumbnail\030\032 \001(\0132\n.Thumbnail\022\017\n"
    "\007bytePos\030\033 \002(\005\032E\n\013SegmentData\022\014\n\004skip\030\001 "
    "\002(\010\022\014\n\004altQ\030\002 \001(\021\022\r\n\005altLF\030\003 \001(\021\022\013\n\003ref\030"
    "\004 \001(\005\032\347\001\n\004Stat\022\014\n\004name\030\001 \002(\t\022/\n\nrawEntri"
    "es\030\002 \003(\0132\033.PictureInfo.Stat.StatEntry\022:\n"
    "\025areaNormalizedEntries\030\003 \003(\0132\033.PictureIn"
    "fo.Stat.StatEntry\022:\n\025bitsNormalizedEntri"
    "es\030\004 \003(\0132\033.PictureInfo.Stat.StatEntry\032(\n"
    "\tStatEntry\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\005\032"
    "^\n\013NumericTree\022\021\n\tnodeValue\030\001 \001(\005\022\020\n\010nod"
    "eName\030\002 \001(\t\022*\n\010children\030\003 \003(\0132\030.PictureI"
    "nfo.NumericTree\"R\n\013PictureImgs\022\017\n\007predIm"
    "g\030\001 \002(\014\022\016\n\006resImg\030\002 \002(\014\022\020\n\010reconImg\030\003 \002("
    "\014\022\020\n\010finalImg\030\004 \002(\014\"\340\007\n\tBlockInfo\022\021\n\001p\030\001"
    " \002(\0132\006.Point\022\t\n\001w\030\002 \002(\005\022\t\n\001h\030\003 \002(\005\022\r\n\005bo"
    "ols\030\004 \002(\005\022\014\n\004bits\030\005 \002(\005\022\r\n\005intra\030\006 \002(\010\022\022"
    "\n\nsegment_id\030\007 \001(\005\022!\n\006txSize\030\010 \001(\0162\021.Blo"
    "ckInfo.TxSize\022\014\n\004skip\030\t \002(\010\022\031\n\002mv\030\n \003(\0132"
    "\r.BlockInfo.MV\022/\n\006mcType\030\013 \001(\0162\037.BlockIn"
    "fo.SwitchableFilterType\022+\n\rintraLumaMode"
    "\030\014 \001(\0162\024.BlockInfo.IntraMode\022-\n\017intraChr"
    "omaMode\030\r \001(\0162\024.BlockInfo.IntraMode\022\022\n\nc"
    "oeffBools\030\016 \002(\005\022\021\n\tcoeffBits\030\017 \002(\005\022\023\n\013lu"
    "maDcScale\030\020 \002(\005\022\023\n\013lumaAcScale\030\021 \002(\005\022\025\n\r"
    "chromaDcScale\030\022 \002(\005\022\025\n\rchromaAcScale\030\023 \002"
    "(\005\022\016\n\006bitPos\030\024 \002(\005\022\023\n\013syntaxStart\030\025 \002(\005\032"
    "\312\001\n\002MV\022\013\n\003mvx\030\001 \002(\021\022\013\n\003mvy\030\002 \002(\021\022\016\n\006delt"
    "ax\030\003 \001(\021\022\016\n\006deltay\030\004 \001(\021\022\013\n\003ref\030\005 \002(\005\022(\n"
    "\005preds\030\006 \003(\0132\031.BlockInfo.MV.MVPredictor\032"
    "S\n\013MVPredictor\022 \n\tpredictor\030\001 \002(\0132\r.Bloc"
    "kInfo.MV\022\023\n\003loc\030\002 \001(\0132\006.Point\022\r\n\005label\030\003"
    " \001(\t\"<\n\006TxSize\022\n\n\006TX_4X4\020\000\022\n\n\006TX_8X8\020\001\022\014"
    "\n\010TX_16X16\020\002\022\014\n\010TX_32X32\020\003\"J\n\024Switchable"
    "FilterType\022\013\n\007MC_8TAP\020\000\022\021\n\rMC_8TAP_SHARP"
    "\020\001\022\022\n\016MC_8TAP_SMOOTH\020\002\"\225\001\n\tIntraMode\022\013\n\007"
    "DC_PRED\020\000\022\n\n\006V_PRED\020\001\022\n\n\006H_PRED\020\002\022\014\n\010D45"
    "_PRED\020\003\022\r\n\tD135_PRED\020\004\022\r\n\tD117_PRED\020\005\022\r\n"
    "\tD153_PRED\020\006\022\r\n\tD207_PRED\020\007\022\014\n\010D63_PRED\020"
    "\010\022\013\n\007TM_PRED\020\t\"\030\n\006Coeffs\022\016\n\006coeffs\030\001 \003(\021"
    "\"J\n\016SuperblockInfo\022\r\n\005sbCol\030\001 \002(\005\022\r\n\005sbR"
    "ow\030\002 \002(\005\022\032\n\006blocks\030\003 \003(\0132\n.BlockInfo\"v\n\020"
    "SuperblockRegion\022\r\n\005sbCol\030\001 \002(\005\022\r\n\005sbRow"
    "\030\002 \002(\005\022\016\n\006sbCols\030\003 \002(\005\022\016\n\006sbRows\030\004 \002(\005\022$"
    "\n\013superblocks\030\005 \003(\0132\017.SuperblockInfo\"%\n\010"
    "RawBytes\022\013\n\003pos\030\001 \002(\005\022\014\n\004data\030\002 \002(\014", 2955);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vp9bat.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  VP9Syntax::default_instance_ = new VP9Syntax();
  VP9Syntax_SyntaxElement::default_instance_ = new VP9Syntax_SyntaxElement();
  LoopFilterEdge::default_instance_ = new LoopFilterEdge();
  SampleBlock::default_instance_ = new SampleBlock();
  StreamInfo::default_instance_ = new StreamInfo();
  Thumbnail::default_instance_ = new Thumbnail();
  PictureInfo::default_instance_ = new PictureInfo();
  PictureInfo_SegmentData::default_instance_ = new PictureInfo_SegmentData();
  PictureInfo_Stat::default_instance_ = new PictureInfo_Stat();
  PictureInfo_Stat_StatEntry::default_instance_ = new PictureInfo_Stat_StatEntry();
  PictureInfo_NumericTree::default_instance_ = new PictureInfo_NumericTree();
  PictureImgs::default_instance_ = new PictureImgs();
  BlockInfo::default_instance_ = new BlockInfo();
  BlockInfo_MV::default_instance_ = new BlockInfo_MV();
  BlockInfo_MV_MVPredictor::default_instance_ = new BlockInfo_MV_MVPredictor();
  Coeffs::default_instance_ = new Coeffs();
  SuperblockInfo::default_instance_ = new SuperblockInfo();
  SuperblockRegion::default_instance_ = new SuperblockRegion();
  RawBytes::default_instance_ = new RawBytes();
  Point::default_instance_->InitAsDefaultInstance();
  VP9Syntax::default_instance_->InitAsDefaultInstance();
  VP9Syntax_SyntaxElement::default_instance_->InitAsDefaultInstance();
  LoopFilterEdge::default_instance_->InitAsDefaultInstance();
  SampleBlock::default_instance_->InitAsDefaultInstance();
  StreamInfo::default_instance_->InitAsDefaultInstance();
  Thumbnail::default_instance_->InitAsDefaultInstance();
  PictureInfo::default_instance_->InitAsDefaultInstance();
  PictureInfo_SegmentData::default_instance_->InitAsDefaultInstance();
  PictureInfo_Stat::default_instance_->InitAsDefaultInstance();
  PictureInfo_Stat_StatEntry::default_instance_->InitAsDefaultInstance();
  PictureInfo_NumericTree::default_instance_->InitAsDefaultInstance();
  PictureImgs::default_instance_->InitAsDefaultInstance();
  BlockInfo::default_instance_->InitAsDefaultInstance();
  BlockInfo_MV::default_instance_->InitAsDefaultInstance();
  BlockInfo_MV_MVPredictor::default_instance_->InitAsDefaultInstance();
  Coeffs::default_instance_->InitAsDefaultInstance();
  SuperblockInfo::default_instance_->InitAsDefaultInstance();
  SuperblockRegion::default_instance_->InitAsDefaultInstance();
  RawBytes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vp9bat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vp9bat_2eproto {
  StaticDescriptorInitializer_vp9bat_2eproto() {
    protobuf_AddDesc_vp9bat_2eproto();
  }
} static_descriptor_initializer_vp9bat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // required int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VP9Syntax_SyntaxElement::kNameFieldNumber;
const int VP9Syntax_SyntaxElement::kIntValueFieldNumber;
const int VP9Syntax_SyntaxElement::kStringValueFieldNumber;
const int VP9Syntax_SyntaxElement::kBcRangeFieldNumber;
const int VP9Syntax_SyntaxElement::kBcValueFieldNumber;
#endif  // !_MSC_VER

VP9Syntax_SyntaxElement::VP9Syntax_SyntaxElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VP9Syntax_SyntaxElement::InitAsDefaultInstance() {
}

VP9Syntax_SyntaxElement::VP9Syntax_SyntaxElement(const VP9Syntax_SyntaxElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VP9Syntax_SyntaxElement::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  intvalue_ = 0;
  stringvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  bcrange_ = 0;
  bcvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VP9Syntax_SyntaxElement::~VP9Syntax_SyntaxElement() {
  SharedDtor();
}

void VP9Syntax_SyntaxElement::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (stringvalue_ != &::google::protobuf::internal::GetEmptyString()) {
    delete stringvalue_;
  }
  if (this != default_instance_) {
  }
}

void VP9Syntax_SyntaxElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VP9Syntax_SyntaxElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VP9Syntax_SyntaxElement_descriptor_;
}

const VP9Syntax_SyntaxElement& VP9Syntax_SyntaxElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

VP9Syntax_SyntaxElement* VP9Syntax_SyntaxElement::default_instance_ = NULL;

VP9Syntax_SyntaxElement* VP9Syntax_SyntaxElement::New() const {
  return new VP9Syntax_SyntaxElement;
}

void VP9Syntax_SyntaxElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    intvalue_ = 0;
    if (has_stringvalue()) {
      if (stringvalue_ != &::google::protobuf::internal::GetEmptyString()) {
        stringvalue_->clear();
      }
    }
    bcrange_ = 0;
    bcvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VP9Syntax_SyntaxElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intValue;
        break;
      }

      // optional int32 intValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intvalue_)));
          set_has_intvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringValue;
        break;
      }

      // optional string stringValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringvalue().data(), this->stringvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bcRange;
        break;
      }

      // optional int32 bcRange = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bcRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcrange_)));
          set_has_bcrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bcValue;
        break;
      }

      // optional int32 bcValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bcValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcvalue_)));
          set_has_bcvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VP9Syntax_SyntaxElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional int32 intValue = 2;
  if (has_intvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->intvalue(), output);
  }

  // optional string stringValue = 3;
  if (has_stringvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringvalue().data(), this->stringvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringvalue(), output);
  }

  // optional int32 bcRange = 4;
  if (has_bcrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bcrange(), output);
  }

  // optional int32 bcValue = 5;
  if (has_bcvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bcvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VP9Syntax_SyntaxElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 intValue = 2;
  if (has_intvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->intvalue(), target);
  }

  // optional string stringValue = 3;
  if (has_stringvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringvalue().data(), this->stringvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stringvalue(), target);
  }

  // optional int32 bcRange = 4;
  if (has_bcrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bcrange(), target);
  }

  // optional int32 bcValue = 5;
  if (has_bcvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bcvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VP9Syntax_SyntaxElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 intValue = 2;
    if (has_intvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intvalue());
    }

    // optional string stringValue = 3;
    if (has_stringvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringvalue());
    }

    // optional int32 bcRange = 4;
    if (has_bcrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bcrange());
    }

    // optional int32 bcValue = 5;
    if (has_bcvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bcvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VP9Syntax_SyntaxElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VP9Syntax_SyntaxElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VP9Syntax_SyntaxElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VP9Syntax_SyntaxElement::MergeFrom(const VP9Syntax_SyntaxElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_intvalue()) {
      set_intvalue(from.intvalue());
    }
    if (from.has_stringvalue()) {
      set_stringvalue(from.stringvalue());
    }
    if (from.has_bcrange()) {
      set_bcrange(from.bcrange());
    }
    if (from.has_bcvalue()) {
      set_bcvalue(from.bcvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VP9Syntax_SyntaxElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VP9Syntax_SyntaxElement::CopyFrom(const VP9Syntax_SyntaxElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VP9Syntax_SyntaxElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VP9Syntax_SyntaxElement::Swap(VP9Syntax_SyntaxElement* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(intvalue_, other->intvalue_);
    std::swap(stringvalue_, other->stringvalue_);
    std::swap(bcrange_, other->bcrange_);
    std::swap(bcvalue_, other->bcvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VP9Syntax_SyntaxElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VP9Syntax_SyntaxElement_descriptor_;
  metadata.reflection = VP9Syntax_SyntaxElement_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int VP9Syntax::kElementsFieldNumber;
#endif  // !_MSC_VER

VP9Syntax::VP9Syntax()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VP9Syntax::InitAsDefaultInstance() {
}

VP9Syntax::VP9Syntax(const VP9Syntax& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VP9Syntax::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VP9Syntax::~VP9Syntax() {
  SharedDtor();
}

void VP9Syntax::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VP9Syntax::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VP9Syntax::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VP9Syntax_descriptor_;
}

const VP9Syntax& VP9Syntax::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

VP9Syntax* VP9Syntax::default_instance_ = NULL;

VP9Syntax* VP9Syntax::New() const {
  return new VP9Syntax;
}

void VP9Syntax::Clear() {
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VP9Syntax::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VP9Syntax.SyntaxElement elements = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VP9Syntax::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .VP9Syntax.SyntaxElement elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VP9Syntax::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .VP9Syntax.SyntaxElement elements = 1;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elements(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VP9Syntax::ByteSize() const {
  int total_size = 0;

  // repeated .VP9Syntax.SyntaxElement elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VP9Syntax::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VP9Syntax* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VP9Syntax*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VP9Syntax::MergeFrom(const VP9Syntax& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VP9Syntax::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VP9Syntax::CopyFrom(const VP9Syntax& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VP9Syntax::IsInitialized() const {

  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void VP9Syntax::Swap(VP9Syntax* other) {
  if (other != this) {
    elements_.Swap(&other->elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VP9Syntax::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VP9Syntax_descriptor_;
  metadata.reflection = VP9Syntax_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoopFilterEdge_FilterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoopFilterEdge_FilterType_descriptor_;
}
bool LoopFilterEdge_FilterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoopFilterEdge_FilterType LoopFilterEdge::LF_16WIDE;
const LoopFilterEdge_FilterType LoopFilterEdge::LF_8WIDE;
const LoopFilterEdge_FilterType LoopFilterEdge::LF_4WIDE;
const LoopFilterEdge_FilterType LoopFilterEdge::LF_2WIDE;
const LoopFilterEdge_FilterType LoopFilterEdge::FilterType_MIN;
const LoopFilterEdge_FilterType LoopFilterEdge::FilterType_MAX;
const int LoopFilterEdge::FilterType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoopFilterEdge::kPFieldNumber;
const int LoopFilterEdge::kComponentFieldNumber;
const int LoopFilterEdge::kIsVerticalFieldNumber;
const int LoopFilterEdge::kTypeFieldNumber;
const int LoopFilterEdge::kLevelFieldNumber;
#endif  // !_MSC_VER

LoopFilterEdge::LoopFilterEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoopFilterEdge::InitAsDefaultInstance() {
  p_ = const_cast< ::Point*>(&::Point::default_instance());
}

LoopFilterEdge::LoopFilterEdge(const LoopFilterEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoopFilterEdge::SharedCtor() {
  _cached_size_ = 0;
  p_ = NULL;
  component_ = 0;
  isvertical_ = false;
  type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoopFilterEdge::~LoopFilterEdge() {
  SharedDtor();
}

void LoopFilterEdge::SharedDtor() {
  if (this != default_instance_) {
    delete p_;
  }
}

void LoopFilterEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoopFilterEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoopFilterEdge_descriptor_;
}

const LoopFilterEdge& LoopFilterEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

LoopFilterEdge* LoopFilterEdge::default_instance_ = NULL;

LoopFilterEdge* LoopFilterEdge::New() const {
  return new LoopFilterEdge;
}

void LoopFilterEdge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_p()) {
      if (p_ != NULL) p_->::Point::Clear();
    }
    component_ = 0;
    isvertical_ = false;
    type_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoopFilterEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Point p = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_component;
        break;
      }

      // required int32 component = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_component:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &component_)));
          set_has_component();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isVertical;
        break;
      }

      // required bool isVertical = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvertical_)));
          set_has_isvertical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .LoopFilterEdge.FilterType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LoopFilterEdge_FilterType_IsValid(value)) {
            set_type(static_cast< ::LoopFilterEdge_FilterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoopFilterEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Point p = 1;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->p(), output);
  }

  // required int32 component = 2;
  if (has_component()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->component(), output);
  }

  // required bool isVertical = 3;
  if (has_isvertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isvertical(), output);
  }

  // required .LoopFilterEdge.FilterType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoopFilterEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Point p = 1;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->p(), target);
  }

  // required int32 component = 2;
  if (has_component()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->component(), target);
  }

  // required bool isVertical = 3;
  if (has_isvertical()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isvertical(), target);
  }

  // required .LoopFilterEdge.FilterType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoopFilterEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Point p = 1;
    if (has_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p());
    }

    // required int32 component = 2;
    if (has_component()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->component());
    }

    // required bool isVertical = 3;
    if (has_isvertical()) {
      total_size += 1 + 1;
    }

    // required .LoopFilterEdge.FilterType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoopFilterEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoopFilterEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoopFilterEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoopFilterEdge::MergeFrom(const LoopFilterEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p()) {
      mutable_p()->::Point::MergeFrom(from.p());
    }
    if (from.has_component()) {
      set_component(from.component());
    }
    if (from.has_isvertical()) {
      set_isvertical(from.isvertical());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoopFilterEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoopFilterEdge::CopyFrom(const LoopFilterEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopFilterEdge::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_p()) {
    if (!this->p().IsInitialized()) return false;
  }
  return true;
}

void LoopFilterEdge::Swap(LoopFilterEdge* other) {
  if (other != this) {
    std::swap(p_, other->p_);
    std::swap(component_, other->component_);
    std::swap(isvertical_, other->isvertical_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoopFilterEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoopFilterEdge_descriptor_;
  metadata.reflection = LoopFilterEdge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SampleBlock::kPFieldNumber;
const int SampleBlock::kWFieldNumber;
const int SampleBlock::kHFieldNumber;
const int SampleBlock::kSamplesFieldNumber;
const int SampleBlock::kFlagsFieldNumber;
#endif  // !_MSC_VER

SampleBlock::SampleBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SampleBlock::InitAsDefaultInstance() {
  p_ = const_cast< ::Point*>(&::Point::default_instance());
}

SampleBlock::SampleBlock(const SampleBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SampleBlock::SharedCtor() {
  _cached_size_ = 0;
  p_ = NULL;
  w_ = 0;
  h_ = 0;
  samples_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  flags_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleBlock::~SampleBlock() {
  SharedDtor();
}

void SampleBlock::SharedDtor() {
  if (samples_ != &::google::protobuf::internal::GetEmptyString()) {
    delete samples_;
  }
  if (flags_ != &::google::protobuf::internal::GetEmptyString()) {
    delete flags_;
  }
  if (this != default_instance_) {
    delete p_;
  }
}

void SampleBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleBlock_descriptor_;
}

const SampleBlock& SampleBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

SampleBlock* SampleBlock::default_instance_ = NULL;

SampleBlock* SampleBlock::New() const {
  return new SampleBlock;
}

void SampleBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_p()) {
      if (p_ != NULL) p_->::Point::Clear();
    }
    w_ = 0;
    h_ = 0;
    if (has_samples()) {
      if (samples_ != &::google::protobuf::internal::GetEmptyString()) {
        samples_->clear();
      }
    }
    if (has_flags()) {
      if (flags_ != &::google::protobuf::internal::GetEmptyString()) {
        flags_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Point p = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_w;
        break;
      }

      // required int32 w = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_h;
        break;
      }

      // required int32 h = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_samples;
        break;
      }

      // required bytes samples = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_samples()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_flags;
        break;
      }

      // optional bytes flags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_flags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SampleBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Point p = 1;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->p(), output);
  }

  // required int32 w = 3;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->w(), output);
  }

  // required int32 h = 4;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->h(), output);
  }

  // required bytes samples = 5;
  if (has_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->samples(), output);
  }

  // optional bytes flags = 6;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SampleBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Point p = 1;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->p(), target);
  }

  // required int32 w = 3;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->w(), target);
  }

  // required int32 h = 4;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->h(), target);
  }

  // required bytes samples = 5;
  if (has_samples()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->samples(), target);
  }

  // optional bytes flags = 6;
  if (has_flags()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SampleBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Point p = 1;
    if (has_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p());
    }

    // required int32 w = 3;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // required int32 h = 4;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // required bytes samples = 5;
    if (has_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->samples());
    }

    // optional bytes flags = 6;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->flags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleBlock::MergeFrom(const SampleBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p()) {
      mutable_p()->::Point::MergeFrom(from.p());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_samples()) {
      set_samples(from.samples());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleBlock::CopyFrom(const SampleBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_p()) {
    if (!this->p().IsInitialized()) return false;
  }
  return true;
}

void SampleBlock::Swap(SampleBlock* other) {
  if (other != this) {
    std::swap(p_, other->p_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(samples_, other->samples_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleBlock_descriptor_;
  metadata.reflection = SampleBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamInfo::kNumPicsFieldNumber;
#endif  // !_MSC_VER

StreamInfo::StreamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StreamInfo::InitAsDefaultInstance() {
}

StreamInfo::StreamInfo(const StreamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StreamInfo::SharedCtor() {
  _cached_size_ = 0;
  numpics_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamInfo::~StreamInfo() {
  SharedDtor();
}

void StreamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StreamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamInfo_descriptor_;
}

const StreamInfo& StreamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

StreamInfo* StreamInfo::default_instance_ = NULL;

StreamInfo* StreamInfo::New() const {
  return new StreamInfo;
}

void StreamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numpics_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 numPics = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numpics_)));
          set_has_numpics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StreamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 numPics = 1;
  if (has_numpics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numpics(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StreamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 numPics = 1;
  if (has_numpics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numpics(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StreamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 numPics = 1;
    if (has_numpics()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numpics());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamInfo::MergeFrom(const StreamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numpics()) {
      set_numpics(from.numpics());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamInfo::CopyFrom(const StreamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StreamInfo::Swap(StreamInfo* other) {
  if (other != this) {
    std::swap(numpics_, other->numpics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamInfo_descriptor_;
  metadata.reflection = StreamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Thumbnail::kWFieldNumber;
const int Thumbnail::kHFieldNumber;
const int Thumbnail::kThumbnailFieldNumber;
#endif  // !_MSC_VER

Thumbnail::Thumbnail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Thumbnail::InitAsDefaultInstance() {
}

Thumbnail::Thumbnail(const Thumbnail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Thumbnail::SharedCtor() {
  _cached_size_ = 0;
  w_ = 0;
  h_ = 0;
  thumbnail_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Thumbnail::~Thumbnail() {
  SharedDtor();
}

void Thumbnail::SharedDtor() {
  if (thumbnail_ != &::google::protobuf::internal::GetEmptyString()) {
    delete thumbnail_;
  }
  if (this != default_instance_) {
  }
}

void Thumbnail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Thumbnail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Thumbnail_descriptor_;
}

const Thumbnail& Thumbnail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

Thumbnail* Thumbnail::default_instance_ = NULL;

Thumbnail* Thumbnail::New() const {
  return new Thumbnail;
}

void Thumbnail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    w_ = 0;
    h_ = 0;
    if (has_thumbnail()) {
      if (thumbnail_ != &::google::protobuf::internal::GetEmptyString()) {
        thumbnail_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Thumbnail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 w = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_h;
        break;
      }

      // required int32 h = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_thumbnail;
        break;
      }

      // required bytes thumbnail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_thumbnail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Thumbnail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 w = 1;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->w(), output);
  }

  // required int32 h = 2;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->h(), output);
  }

  // required bytes thumbnail = 3;
  if (has_thumbnail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->thumbnail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Thumbnail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 w = 1;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->w(), target);
  }

  // required int32 h = 2;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->h(), target);
  }

  // required bytes thumbnail = 3;
  if (has_thumbnail()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->thumbnail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Thumbnail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 w = 1;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // required int32 h = 2;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // required bytes thumbnail = 3;
    if (has_thumbnail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->thumbnail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Thumbnail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Thumbnail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Thumbnail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Thumbnail::MergeFrom(const Thumbnail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_thumbnail()) {
      set_thumbnail(from.thumbnail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Thumbnail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Thumbnail::CopyFrom(const Thumbnail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Thumbnail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Thumbnail::Swap(Thumbnail* other) {
  if (other != this) {
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(thumbnail_, other->thumbnail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Thumbnail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Thumbnail_descriptor_;
  metadata.reflection = Thumbnail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PictureInfo_SegmentData::kSkipFieldNumber;
const int PictureInfo_SegmentData::kAltQFieldNumber;
const int PictureInfo_SegmentData::kAltLFFieldNumber;
const int PictureInfo_SegmentData::kRefFieldNumber;
#endif  // !_MSC_VER

PictureInfo_SegmentData::PictureInfo_SegmentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PictureInfo_SegmentData::InitAsDefaultInstance() {
}

PictureInfo_SegmentData::PictureInfo_SegmentData(const PictureInfo_SegmentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PictureInfo_SegmentData::SharedCtor() {
  _cached_size_ = 0;
  skip_ = false;
  altq_ = 0;
  altlf_ = 0;
  ref_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureInfo_SegmentData::~PictureInfo_SegmentData() {
  SharedDtor();
}

void PictureInfo_SegmentData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PictureInfo_SegmentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureInfo_SegmentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PictureInfo_SegmentData_descriptor_;
}

const PictureInfo_SegmentData& PictureInfo_SegmentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

PictureInfo_SegmentData* PictureInfo_SegmentData::default_instance_ = NULL;

PictureInfo_SegmentData* PictureInfo_SegmentData::New() const {
  return new PictureInfo_SegmentData;
}

void PictureInfo_SegmentData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skip_ = false;
    altq_ = 0;
    altlf_ = 0;
    ref_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PictureInfo_SegmentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool skip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_)));
          set_has_skip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_altQ;
        break;
      }

      // optional sint32 altQ = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_altQ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &altq_)));
          set_has_altq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_altLF;
        break;
      }

      // optional sint32 altLF = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_altLF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &altlf_)));
          set_has_altlf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ref;
        break;
      }

      // optional int32 ref = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_)));
          set_has_ref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PictureInfo_SegmentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool skip = 1;
  if (has_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->skip(), output);
  }

  // optional sint32 altQ = 2;
  if (has_altq()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->altq(), output);
  }

  // optional sint32 altLF = 3;
  if (has_altlf()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->altlf(), output);
  }

  // optional int32 ref = 4;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ref(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PictureInfo_SegmentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool skip = 1;
  if (has_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->skip(), target);
  }

  // optional sint32 altQ = 2;
  if (has_altq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->altq(), target);
  }

  // optional sint32 altLF = 3;
  if (has_altlf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->altlf(), target);
  }

  // optional int32 ref = 4;
  if (has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ref(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PictureInfo_SegmentData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool skip = 1;
    if (has_skip()) {
      total_size += 1 + 1;
    }

    // optional sint32 altQ = 2;
    if (has_altq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->altq());
    }

    // optional sint32 altLF = 3;
    if (has_altlf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->altlf());
    }

    // optional int32 ref = 4;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ref());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureInfo_SegmentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PictureInfo_SegmentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PictureInfo_SegmentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PictureInfo_SegmentData::MergeFrom(const PictureInfo_SegmentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skip()) {
      set_skip(from.skip());
    }
    if (from.has_altq()) {
      set_altq(from.altq());
    }
    if (from.has_altlf()) {
      set_altlf(from.altlf());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PictureInfo_SegmentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureInfo_SegmentData::CopyFrom(const PictureInfo_SegmentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureInfo_SegmentData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PictureInfo_SegmentData::Swap(PictureInfo_SegmentData* other) {
  if (other != this) {
    std::swap(skip_, other->skip_);
    std::swap(altq_, other->altq_);
    std::swap(altlf_, other->altlf_);
    std::swap(ref_, other->ref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PictureInfo_SegmentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PictureInfo_SegmentData_descriptor_;
  metadata.reflection = PictureInfo_SegmentData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PictureInfo_Stat_StatEntry::kNameFieldNumber;
const int PictureInfo_Stat_StatEntry::kValueFieldNumber;
#endif  // !_MSC_VER

PictureInfo_Stat_StatEntry::PictureInfo_Stat_StatEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PictureInfo_Stat_StatEntry::InitAsDefaultInstance() {
}

PictureInfo_Stat_StatEntry::PictureInfo_Stat_StatEntry(const PictureInfo_Stat_StatEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PictureInfo_Stat_StatEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureInfo_Stat_StatEntry::~PictureInfo_Stat_StatEntry() {
  SharedDtor();
}

void PictureInfo_Stat_StatEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PictureInfo_Stat_StatEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureInfo_Stat_StatEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PictureInfo_Stat_StatEntry_descriptor_;
}

const PictureInfo_Stat_StatEntry& PictureInfo_Stat_StatEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

PictureInfo_Stat_StatEntry* PictureInfo_Stat_StatEntry::default_instance_ = NULL;

PictureInfo_Stat_StatEntry* PictureInfo_Stat_StatEntry::New() const {
  return new PictureInfo_Stat_StatEntry;
}

void PictureInfo_Stat_StatEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PictureInfo_Stat_StatEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PictureInfo_Stat_StatEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PictureInfo_Stat_StatEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PictureInfo_Stat_StatEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureInfo_Stat_StatEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PictureInfo_Stat_StatEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PictureInfo_Stat_StatEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PictureInfo_Stat_StatEntry::MergeFrom(const PictureInfo_Stat_StatEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PictureInfo_Stat_StatEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureInfo_Stat_StatEntry::CopyFrom(const PictureInfo_Stat_StatEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureInfo_Stat_StatEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PictureInfo_Stat_StatEntry::Swap(PictureInfo_Stat_StatEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PictureInfo_Stat_StatEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PictureInfo_Stat_StatEntry_descriptor_;
  metadata.reflection = PictureInfo_Stat_StatEntry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PictureInfo_Stat::kNameFieldNumber;
const int PictureInfo_Stat::kRawEntriesFieldNumber;
const int PictureInfo_Stat::kAreaNormalizedEntriesFieldNumber;
const int PictureInfo_Stat::kBitsNormalizedEntriesFieldNumber;
#endif  // !_MSC_VER

PictureInfo_Stat::PictureInfo_Stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PictureInfo_Stat::InitAsDefaultInstance() {
}

PictureInfo_Stat::PictureInfo_Stat(const PictureInfo_Stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PictureInfo_Stat::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureInfo_Stat::~PictureInfo_Stat() {
  SharedDtor();
}

void PictureInfo_Stat::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyString()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PictureInfo_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureInfo_Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PictureInfo_Stat_descriptor_;
}

const PictureInfo_Stat& PictureInfo_Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

PictureInfo_Stat* PictureInfo_Stat::default_instance_ = NULL;

PictureInfo_Stat* PictureInfo_Stat::New() const {
  return new PictureInfo_Stat;
}

void PictureInfo_Stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyString()) {
        name_->clear();
      }
    }
  }
  rawentries_.Clear();
  areanormalizedentries_.Clear();
  bitsnormalizedentries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PictureInfo_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rawEntries;
        break;
      }

      // repeated .PictureInfo.Stat.StatEntry rawEntries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rawEntries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rawentries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rawEntries;
        if (input->ExpectTag(26)) goto parse_areaNormalizedEntries;
        break;
      }

      // repeated .PictureInfo.Stat.StatEntry areaNormalizedEntries = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_areaNormalizedEntries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areanormalizedentries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_areaNormalizedEntries;
        if (input->ExpectTag(34)) goto parse_bitsNormalizedEntries;
        break;
      }

      // repeated .PictureInfo.Stat.StatEntry bitsNormalizedEntries = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitsNormalizedEntries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bitsnormalizedentries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bitsNormalizedEntries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PictureInfo_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .PictureInfo.Stat.StatEntry rawEntries = 2;
  for (int i = 0; i < this->rawentries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rawentries(i), output);
  }

  // repeated .PictureInfo.Stat.StatEntry areaNormalizedEntries = 3;
  for (int i = 0; i < this->areanormalizedentries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->areanormalizedentries(i), output);
  }

  // repeated .PictureInfo.Stat.StatEntry bitsNormalizedEntries = 4;
  for (int i = 0; i < this->bitsnormalizedentries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bitsnormalizedentries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PictureInfo_Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .PictureInfo.Stat.StatEntry rawEntries = 2;
  for (int i = 0; i < this->rawentries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rawentries(i), target);
  }

  // repeated .PictureInfo.Stat.StatEntry areaNormalizedEntries = 3;
  for (int i = 0; i < this->areanormalizedentries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->areanormalizedentries(i), target);
  }

  // repeated .PictureInfo.Stat.StatEntry bitsNormalizedEntries = 4;
  for (int i = 0; i < this->bitsnormalizedentries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bitsnormalizedentries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PictureInfo_Stat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .PictureInfo.Stat.StatEntry rawEntries = 2;
  total_size += 1 * this->rawentries_size();
  for (int i = 0; i < this->rawentries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rawentries(i));
  }

  // repeated .PictureInfo.Stat.StatEntry areaNormalizedEntries = 3;
  total_size += 1 * this->areanormalizedentries_size();
  for (int i = 0; i < this->areanormalizedentries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areanormalizedentries(i));
  }

  // repeated .PictureInfo.Stat.StatEntry bitsNormalizedEntries = 4;
  total_size += 1 * this->bitsnormalizedentries_size();
  for (int i = 0; i < this->bitsnormalizedentries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bitsnormalizedentries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureInfo_Stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PictureInfo_Stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PictureInfo_Stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PictureInfo_Stat::MergeFrom(const PictureInfo_Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  rawentries_.MergeFrom(from.rawentries_);
  areanormalizedentries_.MergeFrom(from.areanormalizedentries_);
  bitsnormalizedentries_.MergeFrom(from.bitsnormalizedentries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PictureInfo_Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureInfo_Stat::CopyFrom(const PictureInfo_Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureInfo_Stat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rawentries_size(); i++) {
    if (!this->rawentries(i).IsInitialized()) return false;
  }
  for (int i = 0; i < areanormalizedentries_size(); i++) {
    if (!this->areanormalizedentries(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bitsnormalizedentries_size(); i++) {
    if (!this->bitsnormalizedentries(i).IsInitialized()) return false;
  }
  return true;
}

void PictureInfo_Stat::Swap(PictureInfo_Stat* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    rawentries_.Swap(&other->rawentries_);
    areanormalizedentries_.Swap(&other->areanormalizedentries_);
    bitsnormalizedentries_.Swap(&other->bitsnormalizedentries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PictureInfo_Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PictureInfo_Stat_descriptor_;
  metadata.reflection = PictureInfo_Stat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PictureInfo_NumericTree::kNodeValueFieldNumber;
const int PictureInfo_NumericTree::kNodeNameFieldNumber;
const int PictureInfo_NumericTree::kChildrenFieldNumber;
#endif  // !_MSC_VER

PictureInfo_NumericTree::PictureInfo_NumericTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PictureInfo_NumericTree::InitAsDefaultInstance() {
}

PictureInfo_NumericTree::PictureInfo_NumericTree(const PictureInfo_NumericTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PictureInfo_NumericTree::SharedCtor() {
  _cached_size_ = 0;
  nodevalue_ = 0;
  nodename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureInfo_NumericTree::~PictureInfo_NumericTree() {
  SharedDtor();
}

void PictureInfo_NumericTree::SharedDtor() {
  if (nodename_ != &::google::protobuf::internal::GetEmptyString()) {
    delete nodename_;
  }
  if (this != default_instance_) {
  }
}

void PictureInfo_NumericTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureInfo_NumericTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PictureInfo_NumericTree_descriptor_;
}

const PictureInfo_NumericTree& PictureInfo_NumericTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

PictureInfo_NumericTree* PictureInfo_NumericTree::default_instance_ = NULL;

PictureInfo_NumericTree* PictureInfo_NumericTree::New() const {
  return new PictureInfo_NumericTree;
}

void PictureInfo_NumericTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nodevalue_ = 0;
    if (has_nodename()) {
      if (nodename_ != &::google::protobuf::internal::GetEmptyString()) {
        nodename_->clear();
      }
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PictureInfo_NumericTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nodeValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodevalue_)));
          set_has_nodevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nodeName;
        break;
      }

      // optional string nodeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nodename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nodename().data(), this->nodename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        break;
      }

      // repeated .PictureInfo.NumericTree children = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PictureInfo_NumericTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nodeValue = 1;
  if (has_nodevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nodevalue(), output);
  }

  // optional string nodeName = 2;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nodename(), output);
  }

  // repeated .PictureInfo.NumericTree children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->children(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PictureInfo_NumericTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nodeValue = 1;
  if (has_nodevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nodevalue(), target);
  }

  // optional string nodeName = 2;
  if (has_nodename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nodename().data(), this->nodename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nodename(), target);
  }

  // repeated .PictureInfo.NumericTree children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->children(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PictureInfo_NumericTree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nodeValue = 1;
    if (has_nodevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodevalue());
    }

    // optional string nodeName = 2;
    if (has_nodename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nodename());
    }

  }
  // repeated .PictureInfo.NumericTree children = 3;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureInfo_NumericTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PictureInfo_NumericTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PictureInfo_NumericTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PictureInfo_NumericTree::MergeFrom(const PictureInfo_NumericTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodevalue()) {
      set_nodevalue(from.nodevalue());
    }
    if (from.has_nodename()) {
      set_nodename(from.nodename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PictureInfo_NumericTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureInfo_NumericTree::CopyFrom(const PictureInfo_NumericTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureInfo_NumericTree::IsInitialized() const {

  return true;
}

void PictureInfo_NumericTree::Swap(PictureInfo_NumericTree* other) {
  if (other != this) {
    std::swap(nodevalue_, other->nodevalue_);
    std::swap(nodename_, other->nodename_);
    children_.Swap(&other->children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PictureInfo_NumericTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PictureInfo_NumericTree_descriptor_;
  metadata.reflection = PictureInfo_NumericTree_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PictureInfo::kDecodeIndexFieldNumber;
const int PictureInfo::kDisplayIndexFieldNumber;
const int PictureInfo::kWFieldNumber;
const int PictureInfo::kHFieldNumber;
const int PictureInfo::kIsInterFieldNumber;
const int PictureInfo::kDigestFieldNumber;
const int PictureInfo::kReferencesFieldNumber;
const int PictureInfo::kLastRefIdxFieldNumber;
const int PictureInfo::kGoldRefIdxFieldNumber;
const int PictureInfo::kAltRefIdxFieldNumber;
const int PictureInfo::kSegmentDataFieldNumber;
const int PictureInfo::kSegementAbsDataFieldNumber;
const int PictureInfo::kFrameCtxOriginFieldNumber;
const int PictureInfo::kFrameCtxIdxFieldNumber;
const int PictureInfo::kNumBytesFieldNumber;
const int PictureInfo::kNumBoolsFieldNumber;
const int PictureInfo::kStatsFieldNumber;
const int PictureInfo::kProbsFieldNumber;
const int PictureInfo::kCountsFieldNumber;
const int PictureInfo::kTileColPosFieldNumber;
const int PictureInfo::kTileRowPosFieldNumber;
const int PictureInfo::kLfRefDeltaFieldNumber;
const int PictureInfo::kLfModeDeltaFieldNumber;
const int PictureInfo::kSignBiasFieldNumber;
const int PictureInfo::kTileSizesFieldNumber;
const int PictureInfo::kThumbnailFieldNumber;
const int PictureInfo::kBytePosFieldNumber;
#endif  // !_MSC_VER

PictureInfo::PictureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PictureInfo::InitAsDefaultInstance() {
  probs_ = const_cast< ::PictureInfo_NumericTree*>(&::PictureInfo_NumericTree::default_instance());
  counts_ = const_cast< ::PictureInfo_NumericTree*>(&::PictureInfo_NumericTree::default_instance());
  thumbnail_ = const_cast< ::Thumbnail*>(&::Thumbnail::default_instance());
}

PictureInfo::PictureInfo(const PictureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PictureInfo::SharedCtor() {
  _cached_size_ = 0;
  decodeindex_ = 0;
  displayindex_ = 0;
  w_ = 0;
  h_ = 0;
  isinter_ = false;
  digest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  lastrefidx_ = 0;
  goldrefidx_ = 0;
  altrefidx_ = 0;
  segementabsdata_ = false;
  framectxidx_ = 0;
  numbytes_ = 0;
  numbools_ = 0;
  probs_ = NULL;
  counts_ = NULL;
  thumbnail_ = NULL;
  bytepos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureInfo::~PictureInfo() {
  SharedDtor();
}

void PictureInfo::SharedDtor() {
  if (digest_ != &::google::protobuf::internal::GetEmptyString()) {
    delete digest_;
  }
  if (this != default_instance_) {
    delete probs_;
    delete counts_;
    delete thumbnail_;
  }
}

void PictureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PictureInfo_descriptor_;
}

const PictureInfo& PictureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

PictureInfo* PictureInfo::default_instance_ = NULL;

PictureInfo* PictureInfo::New() const {
  return new PictureInfo;
}

void PictureInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    decodeindex_ = 0;
    displayindex_ = 0;
    w_ = 0;
    h_ = 0;
    isinter_ = false;
    if (has_digest()) {
      if (digest_ != &::google::protobuf::internal::GetEmptyString()) {
        digest_->clear();
      }
    }
    lastrefidx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    goldrefidx_ = 0;
    altrefidx_ = 0;
    segementabsdata_ = false;
    framectxidx_ = 0;
    numbytes_ = 0;
    numbools_ = 0;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (has_probs()) {
      if (probs_ != NULL) probs_->::PictureInfo_NumericTree::Clear();
    }
    if (has_counts()) {
      if (counts_ != NULL) counts_->::PictureInfo_NumericTree::Clear();
    }
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (has_thumbnail()) {
      if (thumbnail_ != NULL) thumbnail_->::Thumbnail::Clear();
    }
    bytepos_ = 0;
  }
  references_.Clear();
  segmentdata_.Clear();
  framectxorigin_.Clear();
  stats_.Clear();
  tilecolpos_.Clear();
  tilerowpos_.Clear();
  lfrefdelta_.Clear();
  lfmodedelta_.Clear();
  signbias_.Clear();
  tilesizes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PictureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 decodeIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decodeindex_)));
          set_has_decodeindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_displayIndex;
        break;
      }

      // required int32 displayIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displayIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &displayindex_)));
          set_has_displayindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_w;
        break;
      }

      // required int32 w = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_h;
        break;
      }

      // required int32 h = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isInter;
        break;
      }

      // required bool isInter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isInter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinter_)));
          set_has_isinter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_digest;
        break;
      }

      // optional string digest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_digest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_digest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->digest().data(), this->digest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_references;
        break;
      }

      // repeated int32 references = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_references:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_references())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_references())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_references;
        if (input->ExpectTag(64)) goto parse_lastRefIdx;
        break;
      }

      // optional int32 lastRefIdx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastRefIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastrefidx_)));
          set_has_lastrefidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_goldRefIdx;
        break;
      }

      // optional int32 goldRefIdx = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldRefIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldrefidx_)));
          set_has_goldrefidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_altRefIdx;
        break;
      }

      // optional int32 altRefIdx = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_altRefIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &altrefidx_)));
          set_has_altrefidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_segmentData;
        break;
      }

      // repeated .PictureInfo.SegmentData segmentData = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segmentData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segmentdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_segmentData;
        if (input->ExpectTag(96)) goto parse_segementAbsData;
        break;
      }

      // optional bool segementAbsData = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_segementAbsData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &segementabsdata_)));
          set_has_segementabsdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_frameCtxOrigin;
        break;
      }

      // repeated int32 frameCtxOrigin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameCtxOrigin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_framectxorigin())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_framectxorigin())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_frameCtxOrigin;
        if (input->ExpectTag(112)) goto parse_frameCtxIdx;
        break;
      }

      // required int32 frameCtxIdx = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameCtxIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &framectxidx_)));
          set_has_framectxidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_numBytes;
        break;
      }

      // required int32 numBytes = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numBytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numbytes_)));
          set_has_numbytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_numBools;
        break;
      }

      // required int32 numBools = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numBools:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numbools_)));
          set_has_numbools();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_stats;
        break;
      }

      // repeated .PictureInfo.Stat stats = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_stats;
        if (input->ExpectTag(146)) goto parse_probs;
        break;
      }

      // required .PictureInfo.NumericTree probs = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_probs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_probs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_counts;
        break;
      }

      // required .PictureInfo.NumericTree counts = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tileColPos;
        break;
      }

      // repeated int32 tileColPos = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tileColPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_tilecolpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tilecolpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tileColPos;
        if (input->ExpectTag(168)) goto parse_tileRowPos;
        break;
      }

      // repeated int32 tileRowPos = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tileRowPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_tilerowpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tilerowpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_tileRowPos;
        if (input->ExpectTag(176)) goto parse_lfRefDelta;
        break;
      }

      // repeated int32 lfRefDelta = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lfRefDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_lfrefdelta())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lfrefdelta())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_lfRefDelta;
        if (input->ExpectTag(184)) goto parse_lfModeDelta;
        break;
      }

      // repeated int32 lfModeDelta = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lfModeDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 184, input, this->mutable_lfmodedelta())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lfmodedelta())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_lfModeDelta;
        if (input->ExpectTag(192)) goto parse_signBias;
        break;
      }

      // repeated int32 signBias = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signBias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192, input, this->mutable_signbias())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_signbias())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_signBias;
        if (input->ExpectTag(200)) goto parse_tileSizes;
        break;
      }

      // repeated int32 tileSizes = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tileSizes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 200, input, this->mutable_tilesizes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tilesizes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tileSizes;
        if (input->ExpectTag(210)) goto parse_thumbnail;
        break;
      }

      // optional .Thumbnail thumbnail = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thumbnail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thumbnail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_bytePos;
        break;
      }

      // required int32 bytePos = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bytePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bytepos_)));
          set_has_bytepos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PictureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 decodeIndex = 1;
  if (has_decodeindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->decodeindex(), output);
  }

  // required int32 displayIndex = 2;
  if (has_displayindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->displayindex(), output);
  }

  // required int32 w = 3;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->w(), output);
  }

  // required int32 h = 4;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->h(), output);
  }

  // required bool isInter = 5;
  if (has_isinter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isinter(), output);
  }

  // optional string digest = 6;
  if (has_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->digest().data(), this->digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->digest(), output);
  }

  // repeated int32 references = 7;
  for (int i = 0; i < this->references_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->references(i), output);
  }

  // optional int32 lastRefIdx = 8;
  if (has_lastrefidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lastrefidx(), output);
  }

  // optional int32 goldRefIdx = 9;
  if (has_goldrefidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->goldrefidx(), output);
  }

  // optional int32 altRefIdx = 10;
  if (has_altrefidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->altrefidx(), output);
  }

  // repeated .PictureInfo.SegmentData segmentData = 11;
  for (int i = 0; i < this->segmentdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->segmentdata(i), output);
  }

  // optional bool segementAbsData = 12;
  if (has_segementabsdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->segementabsdata(), output);
  }

  // repeated int32 frameCtxOrigin = 13;
  for (int i = 0; i < this->framectxorigin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->framectxorigin(i), output);
  }

  // required int32 frameCtxIdx = 14;
  if (has_framectxidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->framectxidx(), output);
  }

  // required int32 numBytes = 15;
  if (has_numbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->numbytes(), output);
  }

  // required int32 numBools = 16;
  if (has_numbools()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->numbools(), output);
  }

  // repeated .PictureInfo.Stat stats = 17;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->stats(i), output);
  }

  // required .PictureInfo.NumericTree probs = 18;
  if (has_probs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->probs(), output);
  }

  // required .PictureInfo.NumericTree counts = 19;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->counts(), output);
  }

  // repeated int32 tileColPos = 20;
  for (int i = 0; i < this->tilecolpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->tilecolpos(i), output);
  }

  // repeated int32 tileRowPos = 21;
  for (int i = 0; i < this->tilerowpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->tilerowpos(i), output);
  }

  // repeated int32 lfRefDelta = 22;
  for (int i = 0; i < this->lfrefdelta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->lfrefdelta(i), output);
  }

  // repeated int32 lfModeDelta = 23;
  for (int i = 0; i < this->lfmodedelta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->lfmodedelta(i), output);
  }

  // repeated int32 signBias = 24;
  for (int i = 0; i < this->signbias_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->signbias(i), output);
  }

  // repeated int32 tileSizes = 25;
  for (int i = 0; i < this->tilesizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      25, this->tilesizes(i), output);
  }

  // optional .Thumbnail thumbnail = 26;
  if (has_thumbnail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->thumbnail(), output);
  }

  // required int32 bytePos = 27;
  if (has_bytepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->bytepos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PictureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 decodeIndex = 1;
  if (has_decodeindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->decodeindex(), target);
  }

  // required int32 displayIndex = 2;
  if (has_displayindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->displayindex(), target);
  }

  // required int32 w = 3;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->w(), target);
  }

  // required int32 h = 4;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->h(), target);
  }

  // required bool isInter = 5;
  if (has_isinter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isinter(), target);
  }

  // optional string digest = 6;
  if (has_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->digest().data(), this->digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->digest(), target);
  }

  // repeated int32 references = 7;
  for (int i = 0; i < this->references_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->references(i), target);
  }

  // optional int32 lastRefIdx = 8;
  if (has_lastrefidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lastrefidx(), target);
  }

  // optional int32 goldRefIdx = 9;
  if (has_goldrefidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->goldrefidx(), target);
  }

  // optional int32 altRefIdx = 10;
  if (has_altrefidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->altrefidx(), target);
  }

  // repeated .PictureInfo.SegmentData segmentData = 11;
  for (int i = 0; i < this->segmentdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->segmentdata(i), target);
  }

  // optional bool segementAbsData = 12;
  if (has_segementabsdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->segementabsdata(), target);
  }

  // repeated int32 frameCtxOrigin = 13;
  for (int i = 0; i < this->framectxorigin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->framectxorigin(i), target);
  }

  // required int32 frameCtxIdx = 14;
  if (has_framectxidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->framectxidx(), target);
  }

  // required int32 numBytes = 15;
  if (has_numbytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->numbytes(), target);
  }

  // required int32 numBools = 16;
  if (has_numbools()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->numbools(), target);
  }

  // repeated .PictureInfo.Stat stats = 17;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->stats(i), target);
  }

  // required .PictureInfo.NumericTree probs = 18;
  if (has_probs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->probs(), target);
  }

  // required .PictureInfo.NumericTree counts = 19;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->counts(), target);
  }

  // repeated int32 tileColPos = 20;
  for (int i = 0; i < this->tilecolpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->tilecolpos(i), target);
  }

  // repeated int32 tileRowPos = 21;
  for (int i = 0; i < this->tilerowpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->tilerowpos(i), target);
  }

  // repeated int32 lfRefDelta = 22;
  for (int i = 0; i < this->lfrefdelta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->lfrefdelta(i), target);
  }

  // repeated int32 lfModeDelta = 23;
  for (int i = 0; i < this->lfmodedelta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->lfmodedelta(i), target);
  }

  // repeated int32 signBias = 24;
  for (int i = 0; i < this->signbias_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->signbias(i), target);
  }

  // repeated int32 tileSizes = 25;
  for (int i = 0; i < this->tilesizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(25, this->tilesizes(i), target);
  }

  // optional .Thumbnail thumbnail = 26;
  if (has_thumbnail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->thumbnail(), target);
  }

  // required int32 bytePos = 27;
  if (has_bytepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->bytepos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PictureInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 decodeIndex = 1;
    if (has_decodeindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decodeindex());
    }

    // required int32 displayIndex = 2;
    if (has_displayindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->displayindex());
    }

    // required int32 w = 3;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // required int32 h = 4;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // required bool isInter = 5;
    if (has_isinter()) {
      total_size += 1 + 1;
    }

    // optional string digest = 6;
    if (has_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->digest());
    }

    // optional int32 lastRefIdx = 8;
    if (has_lastrefidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastrefidx());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 goldRefIdx = 9;
    if (has_goldrefidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldrefidx());
    }

    // optional int32 altRefIdx = 10;
    if (has_altrefidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->altrefidx());
    }

    // optional bool segementAbsData = 12;
    if (has_segementabsdata()) {
      total_size += 1 + 1;
    }

    // required int32 frameCtxIdx = 14;
    if (has_framectxidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->framectxidx());
    }

    // required int32 numBytes = 15;
    if (has_numbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numbytes());
    }

    // required int32 numBools = 16;
    if (has_numbools()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numbools());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // required .PictureInfo.NumericTree probs = 18;
    if (has_probs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->probs());
    }

    // required .PictureInfo.NumericTree counts = 19;
    if (has_counts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counts());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional .Thumbnail thumbnail = 26;
    if (has_thumbnail()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thumbnail());
    }

    // required int32 bytePos = 27;
    if (has_bytepos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bytepos());
    }

  }
  // repeated int32 references = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->references_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->references(i));
    }
    total_size += 1 * this->references_size() + data_size;
  }

  // repeated .PictureInfo.SegmentData segmentData = 11;
  total_size += 1 * this->segmentdata_size();
  for (int i = 0; i < this->segmentdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segmentdata(i));
  }

  // repeated int32 frameCtxOrigin = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->framectxorigin_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->framectxorigin(i));
    }
    total_size += 1 * this->framectxorigin_size() + data_size;
  }

  // repeated .PictureInfo.Stat stats = 17;
  total_size += 2 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  // repeated int32 tileColPos = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->tilecolpos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tilecolpos(i));
    }
    total_size += 2 * this->tilecolpos_size() + data_size;
  }

  // repeated int32 tileRowPos = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->tilerowpos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tilerowpos(i));
    }
    total_size += 2 * this->tilerowpos_size() + data_size;
  }

  // repeated int32 lfRefDelta = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->lfrefdelta_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lfrefdelta(i));
    }
    total_size += 2 * this->lfrefdelta_size() + data_size;
  }

  // repeated int32 lfModeDelta = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->lfmodedelta_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lfmodedelta(i));
    }
    total_size += 2 * this->lfmodedelta_size() + data_size;
  }

  // repeated int32 signBias = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->signbias_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->signbias(i));
    }
    total_size += 2 * this->signbias_size() + data_size;
  }

  // repeated int32 tileSizes = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->tilesizes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tilesizes(i));
    }
    total_size += 2 * this->tilesizes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PictureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PictureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PictureInfo::MergeFrom(const PictureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  references_.MergeFrom(from.references_);
  segmentdata_.MergeFrom(from.segmentdata_);
  framectxorigin_.MergeFrom(from.framectxorigin_);
  stats_.MergeFrom(from.stats_);
  tilecolpos_.MergeFrom(from.tilecolpos_);
  tilerowpos_.MergeFrom(from.tilerowpos_);
  lfrefdelta_.MergeFrom(from.lfrefdelta_);
  lfmodedelta_.MergeFrom(from.lfmodedelta_);
  signbias_.MergeFrom(from.signbias_);
  tilesizes_.MergeFrom(from.tilesizes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_decodeindex()) {
      set_decodeindex(from.decodeindex());
    }
    if (from.has_displayindex()) {
      set_displayindex(from.displayindex());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_isinter()) {
      set_isinter(from.isinter());
    }
    if (from.has_digest()) {
      set_digest(from.digest());
    }
    if (from.has_lastrefidx()) {
      set_lastrefidx(from.lastrefidx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_goldrefidx()) {
      set_goldrefidx(from.goldrefidx());
    }
    if (from.has_altrefidx()) {
      set_altrefidx(from.altrefidx());
    }
    if (from.has_segementabsdata()) {
      set_segementabsdata(from.segementabsdata());
    }
    if (from.has_framectxidx()) {
      set_framectxidx(from.framectxidx());
    }
    if (from.has_numbytes()) {
      set_numbytes(from.numbytes());
    }
    if (from.has_numbools()) {
      set_numbools(from.numbools());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_probs()) {
      mutable_probs()->::PictureInfo_NumericTree::MergeFrom(from.probs());
    }
    if (from.has_counts()) {
      mutable_counts()->::PictureInfo_NumericTree::MergeFrom(from.counts());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_thumbnail()) {
      mutable_thumbnail()->::Thumbnail::MergeFrom(from.thumbnail());
    }
    if (from.has_bytepos()) {
      set_bytepos(from.bytepos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PictureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureInfo::CopyFrom(const PictureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0406e01f) != 0x0406e01f) return false;

  for (int i = 0; i < segmentdata_size(); i++) {
    if (!this->segmentdata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < stats_size(); i++) {
    if (!this->stats(i).IsInitialized()) return false;
  }
  if (has_thumbnail()) {
    if (!this->thumbnail().IsInitialized()) return false;
  }
  return true;
}

void PictureInfo::Swap(PictureInfo* other) {
  if (other != this) {
    std::swap(decodeindex_, other->decodeindex_);
    std::swap(displayindex_, other->displayindex_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(isinter_, other->isinter_);
    std::swap(digest_, other->digest_);
    references_.Swap(&other->references_);
    std::swap(lastrefidx_, other->lastrefidx_);
    std::swap(goldrefidx_, other->goldrefidx_);
    std::swap(altrefidx_, other->altrefidx_);
    segmentdata_.Swap(&other->segmentdata_);
    std::swap(segementabsdata_, other->segementabsdata_);
    framectxorigin_.Swap(&other->framectxorigin_);
    std::swap(framectxidx_, other->framectxidx_);
    std::swap(numbytes_, other->numbytes_);
    std::swap(numbools_, other->numbools_);
    stats_.Swap(&other->stats_);
    std::swap(probs_, other->probs_);
    std::swap(counts_, other->counts_);
    tilecolpos_.Swap(&other->tilecolpos_);
    tilerowpos_.Swap(&other->tilerowpos_);
    lfrefdelta_.Swap(&other->lfrefdelta_);
    lfmodedelta_.Swap(&other->lfmodedelta_);
    signbias_.Swap(&other->signbias_);
    tilesizes_.Swap(&other->tilesizes_);
    std::swap(thumbnail_, other->thumbnail_);
    std::swap(bytepos_, other->bytepos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PictureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PictureInfo_descriptor_;
  metadata.reflection = PictureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PictureImgs::kPredImgFieldNumber;
const int PictureImgs::kResImgFieldNumber;
const int PictureImgs::kReconImgFieldNumber;
const int PictureImgs::kFinalImgFieldNumber;
#endif  // !_MSC_VER

PictureImgs::PictureImgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PictureImgs::InitAsDefaultInstance() {
}

PictureImgs::PictureImgs(const PictureImgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PictureImgs::SharedCtor() {
  _cached_size_ = 0;
  predimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  resimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  reconimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  finalimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PictureImgs::~PictureImgs() {
  SharedDtor();
}

void PictureImgs::SharedDtor() {
  if (predimg_ != &::google::protobuf::internal::GetEmptyString()) {
    delete predimg_;
  }
  if (resimg_ != &::google::protobuf::internal::GetEmptyString()) {
    delete resimg_;
  }
  if (reconimg_ != &::google::protobuf::internal::GetEmptyString()) {
    delete reconimg_;
  }
  if (finalimg_ != &::google::protobuf::internal::GetEmptyString()) {
    delete finalimg_;
  }
  if (this != default_instance_) {
  }
}

void PictureImgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PictureImgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PictureImgs_descriptor_;
}

const PictureImgs& PictureImgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

PictureImgs* PictureImgs::default_instance_ = NULL;

PictureImgs* PictureImgs::New() const {
  return new PictureImgs;
}

void PictureImgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_predimg()) {
      if (predimg_ != &::google::protobuf::internal::GetEmptyString()) {
        predimg_->clear();
      }
    }
    if (has_resimg()) {
      if (resimg_ != &::google::protobuf::internal::GetEmptyString()) {
        resimg_->clear();
      }
    }
    if (has_reconimg()) {
      if (reconimg_ != &::google::protobuf::internal::GetEmptyString()) {
        reconimg_->clear();
      }
    }
    if (has_finalimg()) {
      if (finalimg_ != &::google::protobuf::internal::GetEmptyString()) {
        finalimg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PictureImgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes predImg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_predimg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resImg;
        break;
      }

      // required bytes resImg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resimg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reconImg;
        break;
      }

      // required bytes reconImg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reconImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reconimg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_finalImg;
        break;
      }

      // required bytes finalImg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_finalImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_finalimg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PictureImgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes predImg = 1;
  if (has_predimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->predimg(), output);
  }

  // required bytes resImg = 2;
  if (has_resimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->resimg(), output);
  }

  // required bytes reconImg = 3;
  if (has_reconimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->reconimg(), output);
  }

  // required bytes finalImg = 4;
  if (has_finalimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->finalimg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PictureImgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes predImg = 1;
  if (has_predimg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->predimg(), target);
  }

  // required bytes resImg = 2;
  if (has_resimg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->resimg(), target);
  }

  // required bytes reconImg = 3;
  if (has_reconimg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->reconimg(), target);
  }

  // required bytes finalImg = 4;
  if (has_finalimg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->finalimg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PictureImgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes predImg = 1;
    if (has_predimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->predimg());
    }

    // required bytes resImg = 2;
    if (has_resimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->resimg());
    }

    // required bytes reconImg = 3;
    if (has_reconimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reconimg());
    }

    // required bytes finalImg = 4;
    if (has_finalimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->finalimg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PictureImgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PictureImgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PictureImgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PictureImgs::MergeFrom(const PictureImgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_predimg()) {
      set_predimg(from.predimg());
    }
    if (from.has_resimg()) {
      set_resimg(from.resimg());
    }
    if (from.has_reconimg()) {
      set_reconimg(from.reconimg());
    }
    if (from.has_finalimg()) {
      set_finalimg(from.finalimg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PictureImgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PictureImgs::CopyFrom(const PictureImgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PictureImgs::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PictureImgs::Swap(PictureImgs* other) {
  if (other != this) {
    std::swap(predimg_, other->predimg_);
    std::swap(resimg_, other->resimg_);
    std::swap(reconimg_, other->reconimg_);
    std::swap(finalimg_, other->finalimg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PictureImgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PictureImgs_descriptor_;
  metadata.reflection = PictureImgs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BlockInfo_TxSize_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockInfo_TxSize_descriptor_;
}
bool BlockInfo_TxSize_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BlockInfo_TxSize BlockInfo::TX_4X4;
const BlockInfo_TxSize BlockInfo::TX_8X8;
const BlockInfo_TxSize BlockInfo::TX_16X16;
const BlockInfo_TxSize BlockInfo::TX_32X32;
const BlockInfo_TxSize BlockInfo::TxSize_MIN;
const BlockInfo_TxSize BlockInfo::TxSize_MAX;
const int BlockInfo::TxSize_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BlockInfo_SwitchableFilterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockInfo_SwitchableFilterType_descriptor_;
}
bool BlockInfo_SwitchableFilterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BlockInfo_SwitchableFilterType BlockInfo::MC_8TAP;
const BlockInfo_SwitchableFilterType BlockInfo::MC_8TAP_SHARP;
const BlockInfo_SwitchableFilterType BlockInfo::MC_8TAP_SMOOTH;
const BlockInfo_SwitchableFilterType BlockInfo::SwitchableFilterType_MIN;
const BlockInfo_SwitchableFilterType BlockInfo::SwitchableFilterType_MAX;
const int BlockInfo::SwitchableFilterType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BlockInfo_IntraMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockInfo_IntraMode_descriptor_;
}
bool BlockInfo_IntraMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BlockInfo_IntraMode BlockInfo::DC_PRED;
const BlockInfo_IntraMode BlockInfo::V_PRED;
const BlockInfo_IntraMode BlockInfo::H_PRED;
const BlockInfo_IntraMode BlockInfo::D45_PRED;
const BlockInfo_IntraMode BlockInfo::D135_PRED;
const BlockInfo_IntraMode BlockInfo::D117_PRED;
const BlockInfo_IntraMode BlockInfo::D153_PRED;
const BlockInfo_IntraMode BlockInfo::D207_PRED;
const BlockInfo_IntraMode BlockInfo::D63_PRED;
const BlockInfo_IntraMode BlockInfo::TM_PRED;
const BlockInfo_IntraMode BlockInfo::IntraMode_MIN;
const BlockInfo_IntraMode BlockInfo::IntraMode_MAX;
const int BlockInfo::IntraMode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BlockInfo_MV_MVPredictor::kPredictorFieldNumber;
const int BlockInfo_MV_MVPredictor::kLocFieldNumber;
const int BlockInfo_MV_MVPredictor::kLabelFieldNumber;
#endif  // !_MSC_VER

BlockInfo_MV_MVPredictor::BlockInfo_MV_MVPredictor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockInfo_MV_MVPredictor::InitAsDefaultInstance() {
  predictor_ = const_cast< ::BlockInfo_MV*>(&::BlockInfo_MV::default_instance());
  loc_ = const_cast< ::Point*>(&::Point::default_instance());
}

BlockInfo_MV_MVPredictor::BlockInfo_MV_MVPredictor(const BlockInfo_MV_MVPredictor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockInfo_MV_MVPredictor::SharedCtor() {
  _cached_size_ = 0;
  predictor_ = NULL;
  loc_ = NULL;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockInfo_MV_MVPredictor::~BlockInfo_MV_MVPredictor() {
  SharedDtor();
}

void BlockInfo_MV_MVPredictor::SharedDtor() {
  if (label_ != &::google::protobuf::internal::GetEmptyString()) {
    delete label_;
  }
  if (this != default_instance_) {
    delete predictor_;
    delete loc_;
  }
}

void BlockInfo_MV_MVPredictor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockInfo_MV_MVPredictor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockInfo_MV_MVPredictor_descriptor_;
}

const BlockInfo_MV_MVPredictor& BlockInfo_MV_MVPredictor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

BlockInfo_MV_MVPredictor* BlockInfo_MV_MVPredictor::default_instance_ = NULL;

BlockInfo_MV_MVPredictor* BlockInfo_MV_MVPredictor::New() const {
  return new BlockInfo_MV_MVPredictor;
}

void BlockInfo_MV_MVPredictor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_predictor()) {
      if (predictor_ != NULL) predictor_->::BlockInfo_MV::Clear();
    }
    if (has_loc()) {
      if (loc_ != NULL) loc_->::Point::Clear();
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyString()) {
        label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockInfo_MV_MVPredictor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BlockInfo.MV predictor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predictor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loc;
        break;
      }

      // optional .Point loc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_label;
        break;
      }

      // optional string label = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockInfo_MV_MVPredictor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .BlockInfo.MV predictor = 1;
  if (has_predictor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->predictor(), output);
  }

  // optional .Point loc = 2;
  if (has_loc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loc(), output);
  }

  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockInfo_MV_MVPredictor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .BlockInfo.MV predictor = 1;
  if (has_predictor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->predictor(), target);
  }

  // optional .Point loc = 2;
  if (has_loc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loc(), target);
  }

  // optional string label = 3;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockInfo_MV_MVPredictor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BlockInfo.MV predictor = 1;
    if (has_predictor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->predictor());
    }

    // optional .Point loc = 2;
    if (has_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loc());
    }

    // optional string label = 3;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockInfo_MV_MVPredictor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockInfo_MV_MVPredictor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockInfo_MV_MVPredictor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockInfo_MV_MVPredictor::MergeFrom(const BlockInfo_MV_MVPredictor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_predictor()) {
      mutable_predictor()->::BlockInfo_MV::MergeFrom(from.predictor());
    }
    if (from.has_loc()) {
      mutable_loc()->::Point::MergeFrom(from.loc());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockInfo_MV_MVPredictor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockInfo_MV_MVPredictor::CopyFrom(const BlockInfo_MV_MVPredictor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInfo_MV_MVPredictor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_predictor()) {
    if (!this->predictor().IsInitialized()) return false;
  }
  if (has_loc()) {
    if (!this->loc().IsInitialized()) return false;
  }
  return true;
}

void BlockInfo_MV_MVPredictor::Swap(BlockInfo_MV_MVPredictor* other) {
  if (other != this) {
    std::swap(predictor_, other->predictor_);
    std::swap(loc_, other->loc_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockInfo_MV_MVPredictor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockInfo_MV_MVPredictor_descriptor_;
  metadata.reflection = BlockInfo_MV_MVPredictor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BlockInfo_MV::kMvxFieldNumber;
const int BlockInfo_MV::kMvyFieldNumber;
const int BlockInfo_MV::kDeltaxFieldNumber;
const int BlockInfo_MV::kDeltayFieldNumber;
const int BlockInfo_MV::kRefFieldNumber;
const int BlockInfo_MV::kPredsFieldNumber;
#endif  // !_MSC_VER

BlockInfo_MV::BlockInfo_MV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockInfo_MV::InitAsDefaultInstance() {
}

BlockInfo_MV::BlockInfo_MV(const BlockInfo_MV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockInfo_MV::SharedCtor() {
  _cached_size_ = 0;
  mvx_ = 0;
  mvy_ = 0;
  deltax_ = 0;
  deltay_ = 0;
  ref_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockInfo_MV::~BlockInfo_MV() {
  SharedDtor();
}

void BlockInfo_MV::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockInfo_MV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockInfo_MV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockInfo_MV_descriptor_;
}

const BlockInfo_MV& BlockInfo_MV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

BlockInfo_MV* BlockInfo_MV::default_instance_ = NULL;

BlockInfo_MV* BlockInfo_MV::New() const {
  return new BlockInfo_MV;
}

void BlockInfo_MV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mvx_ = 0;
    mvy_ = 0;
    deltax_ = 0;
    deltay_ = 0;
    ref_ = 0;
  }
  preds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockInfo_MV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 mvx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mvx_)));
          set_has_mvx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mvy;
        break;
      }

      // required sint32 mvy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &mvy_)));
          set_has_mvy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deltax;
        break;
      }

      // optional sint32 deltax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deltax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &deltax_)));
          set_has_deltax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deltay;
        break;
      }

      // optional sint32 deltay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deltay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &deltay_)));
          set_has_deltay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ref;
        break;
      }

      // required int32 ref = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_)));
          set_has_ref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_preds;
        break;
      }

      // repeated .BlockInfo.MV.MVPredictor preds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_preds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_preds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_preds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockInfo_MV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 mvx = 1;
  if (has_mvx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->mvx(), output);
  }

  // required sint32 mvy = 2;
  if (has_mvy()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->mvy(), output);
  }

  // optional sint32 deltax = 3;
  if (has_deltax()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->deltax(), output);
  }

  // optional sint32 deltay = 4;
  if (has_deltay()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->deltay(), output);
  }

  // required int32 ref = 5;
  if (has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ref(), output);
  }

  // repeated .BlockInfo.MV.MVPredictor preds = 6;
  for (int i = 0; i < this->preds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->preds(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockInfo_MV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 mvx = 1;
  if (has_mvx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->mvx(), target);
  }

  // required sint32 mvy = 2;
  if (has_mvy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->mvy(), target);
  }

  // optional sint32 deltax = 3;
  if (has_deltax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->deltax(), target);
  }

  // optional sint32 deltay = 4;
  if (has_deltay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->deltay(), target);
  }

  // required int32 ref = 5;
  if (has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ref(), target);
  }

  // repeated .BlockInfo.MV.MVPredictor preds = 6;
  for (int i = 0; i < this->preds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->preds(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockInfo_MV::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 mvx = 1;
    if (has_mvx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mvx());
    }

    // required sint32 mvy = 2;
    if (has_mvy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->mvy());
    }

    // optional sint32 deltax = 3;
    if (has_deltax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->deltax());
    }

    // optional sint32 deltay = 4;
    if (has_deltay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->deltay());
    }

    // required int32 ref = 5;
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ref());
    }

  }
  // repeated .BlockInfo.MV.MVPredictor preds = 6;
  total_size += 1 * this->preds_size();
  for (int i = 0; i < this->preds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->preds(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockInfo_MV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockInfo_MV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockInfo_MV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockInfo_MV::MergeFrom(const BlockInfo_MV& from) {
  GOOGLE_CHECK_NE(&from, this);
  preds_.MergeFrom(from.preds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mvx()) {
      set_mvx(from.mvx());
    }
    if (from.has_mvy()) {
      set_mvy(from.mvy());
    }
    if (from.has_deltax()) {
      set_deltax(from.deltax());
    }
    if (from.has_deltay()) {
      set_deltay(from.deltay());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockInfo_MV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockInfo_MV::CopyFrom(const BlockInfo_MV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInfo_MV::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  for (int i = 0; i < preds_size(); i++) {
    if (!this->preds(i).IsInitialized()) return false;
  }
  return true;
}

void BlockInfo_MV::Swap(BlockInfo_MV* other) {
  if (other != this) {
    std::swap(mvx_, other->mvx_);
    std::swap(mvy_, other->mvy_);
    std::swap(deltax_, other->deltax_);
    std::swap(deltay_, other->deltay_);
    std::swap(ref_, other->ref_);
    preds_.Swap(&other->preds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockInfo_MV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockInfo_MV_descriptor_;
  metadata.reflection = BlockInfo_MV_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BlockInfo::kPFieldNumber;
const int BlockInfo::kWFieldNumber;
const int BlockInfo::kHFieldNumber;
const int BlockInfo::kBoolsFieldNumber;
const int BlockInfo::kBitsFieldNumber;
const int BlockInfo::kIntraFieldNumber;
const int BlockInfo::kSegmentIdFieldNumber;
const int BlockInfo::kTxSizeFieldNumber;
const int BlockInfo::kSkipFieldNumber;
const int BlockInfo::kMvFieldNumber;
const int BlockInfo::kMcTypeFieldNumber;
const int BlockInfo::kIntraLumaModeFieldNumber;
const int BlockInfo::kIntraChromaModeFieldNumber;
const int BlockInfo::kCoeffBoolsFieldNumber;
const int BlockInfo::kCoeffBitsFieldNumber;
const int BlockInfo::kLumaDcScaleFieldNumber;
const int BlockInfo::kLumaAcScaleFieldNumber;
const int BlockInfo::kChromaDcScaleFieldNumber;
const int BlockInfo::kChromaAcScaleFieldNumber;
const int BlockInfo::kBitPosFieldNumber;
const int BlockInfo::kSyntaxStartFieldNumber;
#endif  // !_MSC_VER

BlockInfo::BlockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockInfo::InitAsDefaultInstance() {
  p_ = const_cast< ::Point*>(&::Point::default_instance());
}

BlockInfo::BlockInfo(const BlockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockInfo::SharedCtor() {
  _cached_size_ = 0;
  p_ = NULL;
  w_ = 0;
  h_ = 0;
  bools_ = 0;
  bits_ = 0;
  intra_ = false;
  segment_id_ = 0;
  txsize_ = 0;
  skip_ = false;
  mctype_ = 0;
  intralumamode_ = 0;
  intrachromamode_ = 0;
  coeffbools_ = 0;
  coeffbits_ = 0;
  lumadcscale_ = 0;
  lumaacscale_ = 0;
  chromadcscale_ = 0;
  chromaacscale_ = 0;
  bitpos_ = 0;
  syntaxstart_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockInfo::~BlockInfo() {
  SharedDtor();
}

void BlockInfo::SharedDtor() {
  if (this != default_instance_) {
    delete p_;
  }
}

void BlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockInfo_descriptor_;
}

const BlockInfo& BlockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

BlockInfo* BlockInfo::default_instance_ = NULL;

BlockInfo* BlockInfo::New() const {
  return new BlockInfo;
}

void BlockInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_p()) {
      if (p_ != NULL) p_->::Point::Clear();
    }
    w_ = 0;
    h_ = 0;
    bools_ = 0;
    bits_ = 0;
    intra_ = false;
    segment_id_ = 0;
    txsize_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skip_ = false;
    mctype_ = 0;
    intralumamode_ = 0;
    intrachromamode_ = 0;
    coeffbools_ = 0;
    coeffbits_ = 0;
    lumadcscale_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lumaacscale_ = 0;
    chromadcscale_ = 0;
    chromaacscale_ = 0;
    bitpos_ = 0;
    syntaxstart_ = 0;
  }
  mv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Point p = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_w;
        break;
      }

      // required int32 w = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_h;
        break;
      }

      // required int32 h = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bools;
        break;
      }

      // required int32 bools = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bools:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bools_)));
          set_has_bools();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bits;
        break;
      }

      // required int32 bits = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_)));
          set_has_bits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_intra;
        break;
      }

      // required bool intra = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intra:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intra_)));
          set_has_intra();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_segment_id;
        break;
      }

      // optional int32 segment_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_segment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &segment_id_)));
          set_has_segment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_txSize;
        break;
      }

      // optional .BlockInfo.TxSize txSize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_txSize:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BlockInfo_TxSize_IsValid(value)) {
            set_txsize(static_cast< ::BlockInfo_TxSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_skip;
        break;
      }

      // required bool skip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_)));
          set_has_skip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mv;
        break;
      }

      // repeated .BlockInfo.MV mv = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mv()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mv;
        if (input->ExpectTag(88)) goto parse_mcType;
        break;
      }

      // optional .BlockInfo.SwitchableFilterType mcType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mcType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BlockInfo_SwitchableFilterType_IsValid(value)) {
            set_mctype(static_cast< ::BlockInfo_SwitchableFilterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_intraLumaMode;
        break;
      }

      // optional .BlockInfo.IntraMode intraLumaMode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intraLumaMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BlockInfo_IntraMode_IsValid(value)) {
            set_intralumamode(static_cast< ::BlockInfo_IntraMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_intraChromaMode;
        break;
      }

      // optional .BlockInfo.IntraMode intraChromaMode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intraChromaMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::BlockInfo_IntraMode_IsValid(value)) {
            set_intrachromamode(static_cast< ::BlockInfo_IntraMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_coeffBools;
        break;
      }

      // required int32 coeffBools = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coeffBools:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coeffbools_)));
          set_has_coeffbools();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_coeffBits;
        break;
      }

      // required int32 coeffBits = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coeffBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coeffbits_)));
          set_has_coeffbits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_lumaDcScale;
        break;
      }

      // required int32 lumaDcScale = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lumaDcScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lumadcscale_)));
          set_has_lumadcscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lumaAcScale;
        break;
      }

      // required int32 lumaAcScale = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lumaAcScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lumaacscale_)));
          set_has_lumaacscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_chromaDcScale;
        break;
      }

      // required int32 chromaDcScale = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chromaDcScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chromadcscale_)));
          set_has_chromadcscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_chromaAcScale;
        break;
      }

      // required int32 chromaAcScale = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chromaAcScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chromaacscale_)));
          set_has_chromaacscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bitPos;
        break;
      }

      // required int32 bitPos = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitpos_)));
          set_has_bitpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_syntaxStart;
        break;
      }

      // required int32 syntaxStart = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_syntaxStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &syntaxstart_)));
          set_has_syntaxstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Point p = 1;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->p(), output);
  }

  // required int32 w = 2;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->w(), output);
  }

  // required int32 h = 3;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->h(), output);
  }

  // required int32 bools = 4;
  if (has_bools()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bools(), output);
  }

  // required int32 bits = 5;
  if (has_bits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bits(), output);
  }

  // required bool intra = 6;
  if (has_intra()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->intra(), output);
  }

  // optional int32 segment_id = 7;
  if (has_segment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->segment_id(), output);
  }

  // optional .BlockInfo.TxSize txSize = 8;
  if (has_txsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->txsize(), output);
  }

  // required bool skip = 9;
  if (has_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->skip(), output);
  }

  // repeated .BlockInfo.MV mv = 10;
  for (int i = 0; i < this->mv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mv(i), output);
  }

  // optional .BlockInfo.SwitchableFilterType mcType = 11;
  if (has_mctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->mctype(), output);
  }

  // optional .BlockInfo.IntraMode intraLumaMode = 12;
  if (has_intralumamode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->intralumamode(), output);
  }

  // optional .BlockInfo.IntraMode intraChromaMode = 13;
  if (has_intrachromamode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->intrachromamode(), output);
  }

  // required int32 coeffBools = 14;
  if (has_coeffbools()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->coeffbools(), output);
  }

  // required int32 coeffBits = 15;
  if (has_coeffbits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->coeffbits(), output);
  }

  // required int32 lumaDcScale = 16;
  if (has_lumadcscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->lumadcscale(), output);
  }

  // required int32 lumaAcScale = 17;
  if (has_lumaacscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->lumaacscale(), output);
  }

  // required int32 chromaDcScale = 18;
  if (has_chromadcscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->chromadcscale(), output);
  }

  // required int32 chromaAcScale = 19;
  if (has_chromaacscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->chromaacscale(), output);
  }

  // required int32 bitPos = 20;
  if (has_bitpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->bitpos(), output);
  }

  // required int32 syntaxStart = 21;
  if (has_syntaxstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->syntaxstart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Point p = 1;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->p(), target);
  }

  // required int32 w = 2;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->w(), target);
  }

  // required int32 h = 3;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->h(), target);
  }

  // required int32 bools = 4;
  if (has_bools()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bools(), target);
  }

  // required int32 bits = 5;
  if (has_bits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bits(), target);
  }

  // required bool intra = 6;
  if (has_intra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->intra(), target);
  }

  // optional int32 segment_id = 7;
  if (has_segment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->segment_id(), target);
  }

  // optional .BlockInfo.TxSize txSize = 8;
  if (has_txsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->txsize(), target);
  }

  // required bool skip = 9;
  if (has_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->skip(), target);
  }

  // repeated .BlockInfo.MV mv = 10;
  for (int i = 0; i < this->mv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mv(i), target);
  }

  // optional .BlockInfo.SwitchableFilterType mcType = 11;
  if (has_mctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->mctype(), target);
  }

  // optional .BlockInfo.IntraMode intraLumaMode = 12;
  if (has_intralumamode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->intralumamode(), target);
  }

  // optional .BlockInfo.IntraMode intraChromaMode = 13;
  if (has_intrachromamode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->intrachromamode(), target);
  }

  // required int32 coeffBools = 14;
  if (has_coeffbools()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->coeffbools(), target);
  }

  // required int32 coeffBits = 15;
  if (has_coeffbits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->coeffbits(), target);
  }

  // required int32 lumaDcScale = 16;
  if (has_lumadcscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->lumadcscale(), target);
  }

  // required int32 lumaAcScale = 17;
  if (has_lumaacscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->lumaacscale(), target);
  }

  // required int32 chromaDcScale = 18;
  if (has_chromadcscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->chromadcscale(), target);
  }

  // required int32 chromaAcScale = 19;
  if (has_chromaacscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->chromaacscale(), target);
  }

  // required int32 bitPos = 20;
  if (has_bitpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->bitpos(), target);
  }

  // required int32 syntaxStart = 21;
  if (has_syntaxstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->syntaxstart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Point p = 1;
    if (has_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->p());
    }

    // required int32 w = 2;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->w());
    }

    // required int32 h = 3;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->h());
    }

    // required int32 bools = 4;
    if (has_bools()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bools());
    }

    // required int32 bits = 5;
    if (has_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bits());
    }

    // required bool intra = 6;
    if (has_intra()) {
      total_size += 1 + 1;
    }

    // optional int32 segment_id = 7;
    if (has_segment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->segment_id());
    }

    // optional .BlockInfo.TxSize txSize = 8;
    if (has_txsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->txsize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool skip = 9;
    if (has_skip()) {
      total_size += 1 + 1;
    }

    // optional .BlockInfo.SwitchableFilterType mcType = 11;
    if (has_mctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mctype());
    }

    // optional .BlockInfo.IntraMode intraLumaMode = 12;
    if (has_intralumamode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->intralumamode());
    }

    // optional .BlockInfo.IntraMode intraChromaMode = 13;
    if (has_intrachromamode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->intrachromamode());
    }

    // required int32 coeffBools = 14;
    if (has_coeffbools()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coeffbools());
    }

    // required int32 coeffBits = 15;
    if (has_coeffbits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coeffbits());
    }

    // required int32 lumaDcScale = 16;
    if (has_lumadcscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lumadcscale());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 lumaAcScale = 17;
    if (has_lumaacscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lumaacscale());
    }

    // required int32 chromaDcScale = 18;
    if (has_chromadcscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chromadcscale());
    }

    // required int32 chromaAcScale = 19;
    if (has_chromaacscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chromaacscale());
    }

    // required int32 bitPos = 20;
    if (has_bitpos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitpos());
    }

    // required int32 syntaxStart = 21;
    if (has_syntaxstart()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->syntaxstart());
    }

  }
  // repeated .BlockInfo.MV mv = 10;
  total_size += 1 * this->mv_size();
  for (int i = 0; i < this->mv_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockInfo::MergeFrom(const BlockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mv_.MergeFrom(from.mv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p()) {
      mutable_p()->::Point::MergeFrom(from.p());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_bools()) {
      set_bools(from.bools());
    }
    if (from.has_bits()) {
      set_bits(from.bits());
    }
    if (from.has_intra()) {
      set_intra(from.intra());
    }
    if (from.has_segment_id()) {
      set_segment_id(from.segment_id());
    }
    if (from.has_txsize()) {
      set_txsize(from.txsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skip()) {
      set_skip(from.skip());
    }
    if (from.has_mctype()) {
      set_mctype(from.mctype());
    }
    if (from.has_intralumamode()) {
      set_intralumamode(from.intralumamode());
    }
    if (from.has_intrachromamode()) {
      set_intrachromamode(from.intrachromamode());
    }
    if (from.has_coeffbools()) {
      set_coeffbools(from.coeffbools());
    }
    if (from.has_coeffbits()) {
      set_coeffbits(from.coeffbits());
    }
    if (from.has_lumadcscale()) {
      set_lumadcscale(from.lumadcscale());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lumaacscale()) {
      set_lumaacscale(from.lumaacscale());
    }
    if (from.has_chromadcscale()) {
      set_chromadcscale(from.chromadcscale());
    }
    if (from.has_chromaacscale()) {
      set_chromaacscale(from.chromaacscale());
    }
    if (from.has_bitpos()) {
      set_bitpos(from.bitpos());
    }
    if (from.has_syntaxstart()) {
      set_syntaxstart(from.syntaxstart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockInfo::CopyFrom(const BlockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fe13f) != 0x001fe13f) return false;

  if (has_p()) {
    if (!this->p().IsInitialized()) return false;
  }
  for (int i = 0; i < mv_size(); i++) {
    if (!this->mv(i).IsInitialized()) return false;
  }
  return true;
}

void BlockInfo::Swap(BlockInfo* other) {
  if (other != this) {
    std::swap(p_, other->p_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(bools_, other->bools_);
    std::swap(bits_, other->bits_);
    std::swap(intra_, other->intra_);
    std::swap(segment_id_, other->segment_id_);
    std::swap(txsize_, other->txsize_);
    std::swap(skip_, other->skip_);
    mv_.Swap(&other->mv_);
    std::swap(mctype_, other->mctype_);
    std::swap(intralumamode_, other->intralumamode_);
    std::swap(intrachromamode_, other->intrachromamode_);
    std::swap(coeffbools_, other->coeffbools_);
    std::swap(coeffbits_, other->coeffbits_);
    std::swap(lumadcscale_, other->lumadcscale_);
    std::swap(lumaacscale_, other->lumaacscale_);
    std::swap(chromadcscale_, other->chromadcscale_);
    std::swap(chromaacscale_, other->chromaacscale_);
    std::swap(bitpos_, other->bitpos_);
    std::swap(syntaxstart_, other->syntaxstart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockInfo_descriptor_;
  metadata.reflection = BlockInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Coeffs::kCoeffsFieldNumber;
#endif  // !_MSC_VER

Coeffs::Coeffs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Coeffs::InitAsDefaultInstance() {
}

Coeffs::Coeffs(const Coeffs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Coeffs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Coeffs::~Coeffs() {
  SharedDtor();
}

void Coeffs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Coeffs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coeffs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coeffs_descriptor_;
}

const Coeffs& Coeffs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

Coeffs* Coeffs::default_instance_ = NULL;

Coeffs* Coeffs::New() const {
  return new Coeffs;
}

void Coeffs::Clear() {
  coeffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Coeffs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 coeffs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coeffs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 8, input, this->mutable_coeffs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_coeffs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_coeffs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Coeffs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated sint32 coeffs = 1;
  for (int i = 0; i < this->coeffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      1, this->coeffs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Coeffs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated sint32 coeffs = 1;
  for (int i = 0; i < this->coeffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(1, this->coeffs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Coeffs::ByteSize() const {
  int total_size = 0;

  // repeated sint32 coeffs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->coeffs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->coeffs(i));
    }
    total_size += 1 * this->coeffs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coeffs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Coeffs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Coeffs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Coeffs::MergeFrom(const Coeffs& from) {
  GOOGLE_CHECK_NE(&from, this);
  coeffs_.MergeFrom(from.coeffs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Coeffs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coeffs::CopyFrom(const Coeffs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coeffs::IsInitialized() const {

  return true;
}

void Coeffs::Swap(Coeffs* other) {
  if (other != this) {
    coeffs_.Swap(&other->coeffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Coeffs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coeffs_descriptor_;
  metadata.reflection = Coeffs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperblockInfo::kSbColFieldNumber;
const int SuperblockInfo::kSbRowFieldNumber;
const int SuperblockInfo::kBlocksFieldNumber;
#endif  // !_MSC_VER

SuperblockInfo::SuperblockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SuperblockInfo::InitAsDefaultInstance() {
}

SuperblockInfo::SuperblockInfo(const SuperblockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SuperblockInfo::SharedCtor() {
  _cached_size_ = 0;
  sbcol_ = 0;
  sbrow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperblockInfo::~SuperblockInfo() {
  SharedDtor();
}

void SuperblockInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperblockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperblockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperblockInfo_descriptor_;
}

const SuperblockInfo& SuperblockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

SuperblockInfo* SuperblockInfo::default_instance_ = NULL;

SuperblockInfo* SuperblockInfo::New() const {
  return new SuperblockInfo;
}

void SuperblockInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sbcol_ = 0;
    sbrow_ = 0;
  }
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperblockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sbCol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sbcol_)));
          set_has_sbcol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sbRow;
        break;
      }

      // required int32 sbRow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sbRow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sbrow_)));
          set_has_sbrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_blocks;
        break;
      }

      // repeated .BlockInfo blocks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SuperblockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sbCol = 1;
  if (has_sbcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sbcol(), output);
  }

  // required int32 sbRow = 2;
  if (has_sbrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sbrow(), output);
  }

  // repeated .BlockInfo blocks = 3;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->blocks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SuperblockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sbCol = 1;
  if (has_sbcol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sbcol(), target);
  }

  // required int32 sbRow = 2;
  if (has_sbrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sbrow(), target);
  }

  // repeated .BlockInfo blocks = 3;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->blocks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SuperblockInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sbCol = 1;
    if (has_sbcol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sbcol());
    }

    // required int32 sbRow = 2;
    if (has_sbrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sbrow());
    }

  }
  // repeated .BlockInfo blocks = 3;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperblockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperblockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperblockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperblockInfo::MergeFrom(const SuperblockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sbcol()) {
      set_sbcol(from.sbcol());
    }
    if (from.has_sbrow()) {
      set_sbrow(from.sbrow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperblockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperblockInfo::CopyFrom(const SuperblockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperblockInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void SuperblockInfo::Swap(SuperblockInfo* other) {
  if (other != this) {
    std::swap(sbcol_, other->sbcol_);
    std::swap(sbrow_, other->sbrow_);
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperblockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperblockInfo_descriptor_;
  metadata.reflection = SuperblockInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperblockRegion::kSbColFieldNumber;
const int SuperblockRegion::kSbRowFieldNumber;
const int SuperblockRegion::kSbColsFieldNumber;
const int SuperblockRegion::kSbRowsFieldNumber;
const int SuperblockRegion::kSuperblocksFieldNumber;
#endif  // !_MSC_VER

SuperblockRegion::SuperblockRegion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SuperblockRegion::InitAsDefaultInstance() {
}

SuperblockRegion::SuperblockRegion(const SuperblockRegion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SuperblockRegion::SharedCtor() {
  _cached_size_ = 0;
  sbcol_ = 0;
  sbrow_ = 0;
  sbcols_ = 0;
  sbrows_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperblockRegion::~SuperblockRegion() {
  SharedDtor();
}

void SuperblockRegion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperblockRegion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperblockRegion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperblockRegion_descriptor_;
}

const SuperblockRegion& SuperblockRegion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

SuperblockRegion* SuperblockRegion::default_instance_ = NULL;

SuperblockRegion* SuperblockRegion::New() const {
  return new SuperblockRegion;
}

void SuperblockRegion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sbcol_ = 0;
    sbrow_ = 0;
    sbcols_ = 0;
    sbrows_ = 0;
  }
  superblocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperblockRegion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sbCol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sbcol_)));
          set_has_sbcol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sbRow;
        break;
      }

      // required int32 sbRow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sbRow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sbrow_)));
          set_has_sbrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sbCols;
        break;
      }

      // required int32 sbCols = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sbCols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sbcols_)));
          set_has_sbcols();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sbRows;
        break;
      }

      // required int32 sbRows = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sbRows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sbrows_)));
          set_has_sbrows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_superblocks;
        break;
      }

      // repeated .SuperblockInfo superblocks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_superblocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_superblocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_superblocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SuperblockRegion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sbCol = 1;
  if (has_sbcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sbcol(), output);
  }

  // required int32 sbRow = 2;
  if (has_sbrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sbrow(), output);
  }

  // required int32 sbCols = 3;
  if (has_sbcols()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sbcols(), output);
  }

  // required int32 sbRows = 4;
  if (has_sbrows()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sbrows(), output);
  }

  // repeated .SuperblockInfo superblocks = 5;
  for (int i = 0; i < this->superblocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->superblocks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SuperblockRegion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sbCol = 1;
  if (has_sbcol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sbcol(), target);
  }

  // required int32 sbRow = 2;
  if (has_sbrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sbrow(), target);
  }

  // required int32 sbCols = 3;
  if (has_sbcols()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sbcols(), target);
  }

  // required int32 sbRows = 4;
  if (has_sbrows()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sbrows(), target);
  }

  // repeated .SuperblockInfo superblocks = 5;
  for (int i = 0; i < this->superblocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->superblocks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SuperblockRegion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sbCol = 1;
    if (has_sbcol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sbcol());
    }

    // required int32 sbRow = 2;
    if (has_sbrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sbrow());
    }

    // required int32 sbCols = 3;
    if (has_sbcols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sbcols());
    }

    // required int32 sbRows = 4;
    if (has_sbrows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sbrows());
    }

  }
  // repeated .SuperblockInfo superblocks = 5;
  total_size += 1 * this->superblocks_size();
  for (int i = 0; i < this->superblocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->superblocks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperblockRegion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperblockRegion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperblockRegion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperblockRegion::MergeFrom(const SuperblockRegion& from) {
  GOOGLE_CHECK_NE(&from, this);
  superblocks_.MergeFrom(from.superblocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sbcol()) {
      set_sbcol(from.sbcol());
    }
    if (from.has_sbrow()) {
      set_sbrow(from.sbrow());
    }
    if (from.has_sbcols()) {
      set_sbcols(from.sbcols());
    }
    if (from.has_sbrows()) {
      set_sbrows(from.sbrows());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperblockRegion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperblockRegion::CopyFrom(const SuperblockRegion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperblockRegion::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < superblocks_size(); i++) {
    if (!this->superblocks(i).IsInitialized()) return false;
  }
  return true;
}

void SuperblockRegion::Swap(SuperblockRegion* other) {
  if (other != this) {
    std::swap(sbcol_, other->sbcol_);
    std::swap(sbrow_, other->sbrow_);
    std::swap(sbcols_, other->sbcols_);
    std::swap(sbrows_, other->sbrows_);
    superblocks_.Swap(&other->superblocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperblockRegion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperblockRegion_descriptor_;
  metadata.reflection = SuperblockRegion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RawBytes::kPosFieldNumber;
const int RawBytes::kDataFieldNumber;
#endif  // !_MSC_VER

RawBytes::RawBytes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RawBytes::InitAsDefaultInstance() {
}

RawBytes::RawBytes(const RawBytes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RawBytes::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyString());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawBytes::~RawBytes() {
  SharedDtor();
}

void RawBytes::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyString()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void RawBytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawBytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawBytes_descriptor_;
}

const RawBytes& RawBytes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vp9bat_2eproto();
  return *default_instance_;
}

RawBytes* RawBytes::default_instance_ = NULL;

RawBytes* RawBytes::New() const {
  return new RawBytes;
}

void RawBytes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyString()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RawBytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RawBytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RawBytes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RawBytes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawBytes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RawBytes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RawBytes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RawBytes::MergeFrom(const RawBytes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RawBytes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawBytes::CopyFrom(const RawBytes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawBytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RawBytes::Swap(RawBytes* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RawBytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawBytes_descriptor_;
  metadata.reflection = RawBytes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
