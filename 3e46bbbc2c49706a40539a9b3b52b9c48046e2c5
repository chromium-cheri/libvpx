{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1ec5f6ca_0f48f360",
        "filename": "vpx_dsp/bitwriter_buffer.c",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-28T01:13:23Z",
      "side": 1,
      "message": "Note that we cast `wb-\u003ebit_offset` to `int` here. This is why I check `off \u003d\u003d INT_MAX` at line 28.",
      "revId": "3e46bbbc2c49706a40539a9b3b52b9c48046e2c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25f6e213_a624ee75",
        "filename": "vpx_dsp/bitwriter_buffer.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-28T01:13:23Z",
      "side": 1,
      "message": "The following statement in the original code sets bit `q` to 0:\n\n```\n    wb-\u003ebit_buffer[p] \u0026\u003d ~(1 \u003c\u003c q);\n```\n\nI claim that bit `q` must be 0, so I deleted that statement.",
      "revId": "3e46bbbc2c49706a40539a9b3b52b9c48046e2c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "195aa8ab_e45e9474",
        "filename": "vpx_dsp/bitwriter_buffer.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-28T01:13:23Z",
      "side": 1,
      "message": "Please check if the members are in the right order for memory performance.",
      "revId": "3e46bbbc2c49706a40539a9b3b52b9c48046e2c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfab5220_aa4629ad",
        "filename": "vpx_dsp/bitwriter_buffer.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-03-28T17:11:31Z",
      "side": 1,
      "message": "\u003e Please check if the members are in the right order for memory performance.\n\n`vpx_wb_write_bit` reads `error`, then `bit_offset`, `size` and `bit_buffer`. This isn\u0027t inlined, but we could check the assembly or see if we can get a cachegrind report.",
      "parentUuid": "195aa8ab_e45e9474",
      "revId": "3e46bbbc2c49706a40539a9b3b52b9c48046e2c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af26367b_3ba194fc",
        "filename": "vpx_dsp/bitwriter_buffer.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-28T17:54:34Z",
      "side": 1,
      "message": "Thank you. I placed the struct members in that order. I also removed the `off \u003d\u003d INT_MAX` check. Given how `vpx_write_bit_buffer` is used in libvpx, `wb-\u003ebit_offset` will never reach `INT_MAX`.\n\nSince `vpx_write_bit_buffer` is only used to write the uncompressed header in VP9, I can try to calculate an upper bound on the uncompressed header size, and just check that size before using `vpx_write_bit_buffer` in `vp9_pack_bitstream()`. Then no changes to `vpx_write_bit_buffer` are needed.\n\nAnother idea is to optimize `vpx_wb_write_literal()` so that it writes multiple bits or a whole byte at a time.",
      "parentUuid": "dfab5220_aa4629ad",
      "revId": "3e46bbbc2c49706a40539a9b3b52b9c48046e2c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c287a9ae_29ac8cb4",
        "filename": "vpx_dsp/bitwriter_buffer.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-03-28T18:36:31Z",
      "side": 1,
      "message": "\u003e Thank you. I placed the struct members in that order. I also removed the `off \u003d\u003d INT_MAX` check. Given how `vpx_write_bit_buffer` is used in libvpx, `wb-\u003ebit_offset` will never reach `INT_MAX`.\n\u003e \n\u003e Since `vpx_write_bit_buffer` is only used to write the uncompressed header in VP9, I can try to calculate an upper bound on the uncompressed header size, and just check that size before using `vpx_write_bit_buffer` in `vp9_pack_bitstream()`. Then no changes to `vpx_write_bit_buffer` are needed.\n\u003e \n\u003e Another idea is to optimize `vpx_wb_write_literal()` so that it writes multiple bits or a whole byte at a time.\n\nGiven the use is somewhat small that might be unnecessary for now.",
      "parentUuid": "af26367b_3ba194fc",
      "revId": "3e46bbbc2c49706a40539a9b3b52b9c48046e2c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5fa3e63e_1f905eb2",
        "filename": "vpx_dsp/bitwriter_buffer.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-28T19:10:31Z",
      "side": 1,
      "message": "I checked the VP9 specification. It is not easy to calculate the maximum size of tile_info().\n\nI modified the libvpx source code to make the output buffers too small and tested the two new `vpx_internal_error()` calls in this CL and the vpx_internal_error()` call after an `encode_tile_worker` failure. There are no memory leaks.",
      "parentUuid": "c287a9ae_29ac8cb4",
      "revId": "3e46bbbc2c49706a40539a9b3b52b9c48046e2c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}