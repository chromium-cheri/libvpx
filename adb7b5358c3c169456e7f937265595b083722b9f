{
  "comments": [
    {
      "key": {
        "uuid": "AAAAGX//zT0\u003d",
        "filename": "vpx/src/vpx_image.c",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 1000856
      },
      "writtenOn": "2011-12-05T23:16:51Z",
      "side": 1,
      "message": "Rather than changing the API, I think we could just use stride_align*2 internally, anyone who wants more control can use vpx_img_wrap() or set up the descriptor themselves. Are there any useful cases where that doesn\u0027t hold?",
      "revId": "adb7b5358c3c169456e7f937265595b083722b9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAGX//zR0\u003d",
        "filename": "vpx/src/vpx_image.c",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2011-12-05T23:32:54Z",
      "side": 1,
      "message": "For me, buf_align equals stride_align (32 bytes). I think it is ok to use 1 parameter for both in vpx_img_alloc. But, in img_alloc_helper(), still use 2 parameters to make it clear. What do you think?",
      "parentUuid": "AAAAGX//zT0\u003d",
      "revId": "adb7b5358c3c169456e7f937265595b083722b9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAGX//zPw\u003d",
        "filename": "vpx/src/vpx_image.c",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 1000856
      },
      "writtenOn": "2011-12-06T00:00:32Z",
      "side": 1,
      "message": "To preserve the behavior where you can dump the buffer say from the debugger and get something most other tools will accept, I think we want to maintain that the chroma stride is half the luma stride. So I think stride_align only tells you the alignment of the stride on the y plane. Since the stride is halved for the UV, the alignment for those planes gets halved too (the first plane has the same alignment as the y plane, but the second has half that. So to get say n-byte alignment on all 3 planes, you want the base pointer to have 2*n alignment. So buf_align\u003d32, stride_align\u003d16 to get all 3 planes to have 16 byte alignment.\n\nOk to leave it as an extra parameter to img_alloc_helper if you think it makes difference in terms of readability. Put a comment either way to explain the calculation.",
      "parentUuid": "AAAAGX//zR0\u003d",
      "revId": "adb7b5358c3c169456e7f937265595b083722b9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAAGX//zAU\u003d",
        "filename": "vpx/src/vpx_image.c",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2011-12-06T14:01:56Z",
      "side": 1,
      "message": "In my example, I need to ensure that each row is 16-byte aligned in y, u, v planes. If choose stride_align \u003d 16, we can only guarantee u\u0026v rows are 8-byte aligned. That is why I pick buf_align \u003d stride_align\u003d32.",
      "parentUuid": "AAAAGX//zPw\u003d",
      "revId": "adb7b5358c3c169456e7f937265595b083722b9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}