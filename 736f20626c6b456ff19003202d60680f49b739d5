{
  "comments": [
    {
      "key": {
        "uuid": "ef7aea8c_2778101e",
        "filename": "vp8/vp8_cx_iface.c",
        "patchSetId": 19
      },
      "lineNbr": 134,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2019-06-12T06:30:14Z",
      "side": 1,
      "message": "this is incorrect, we don\u0027t define this. It\u0027s meant at least for _MSC_VER, but maybe hit mingw as well (_WIN32). I think this branch may work in all cases.",
      "revId": "736f20626c6b456ff19003202d60680f49b739d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dc80b97_a8d8c3be",
        "filename": "vp8/vp8_cx_iface.c",
        "patchSetId": 19
      },
      "lineNbr": 134,
      "author": {
        "id": 1003078
      },
      "writtenOn": "2019-06-13T22:15:38Z",
      "side": 1,
      "message": "Thanks, I changed it to _WIN32 but there is a compiler failure, therefore I deleted this branch.",
      "parentUuid": "ef7aea8c_2778101e",
      "revId": "736f20626c6b456ff19003202d60680f49b739d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14344b89_742de927",
        "filename": "vp8/vp8_cx_iface.c",
        "patchSetId": 19
      },
      "lineNbr": 134,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2019-06-14T01:35:04Z",
      "side": 1,
      "message": "\u003e Thanks, I changed it to _WIN32 but there is a compiler failure, therefore I deleted this branch.\n\nIt was there for visual studio at least:\nvp8\\vp8_cx_iface.c(748): error C2149: \u0027compile_time_assert\u0027: named bit field cannot have zero width",
      "parentUuid": "0dc80b97_a8d8c3be",
      "revId": "736f20626c6b456ff19003202d60680f49b739d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc97feea_0c7daac1",
        "filename": "vp8/vp8_cx_iface.c",
        "patchSetId": 19
      },
      "lineNbr": 134,
      "author": {
        "id": 1003078
      },
      "writtenOn": "2019-06-14T17:47:23Z",
      "side": 1,
      "message": "I mean since the first branch causes compiler failure that you mentioned, therefore I deleted the first branch so always use the second one regardless of win32 or not, seems like Jenkins does not complain, is it OK?",
      "parentUuid": "14344b89_742de927",
      "revId": "736f20626c6b456ff19003202d60680f49b739d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8e5712a_c9d7f147",
        "filename": "vp8/vp8_cx_iface.c",
        "patchSetId": 19
      },
      "lineNbr": 756,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2019-06-12T21:50:38Z",
      "side": 1,
      "message": "you may not really need a compile time assert for this check since it\u0027s all integer constants and operations as opposed to say sizeof(). you can just check this with #if ..., it would most likely be better placed near the define or just make it a comment",
      "revId": "736f20626c6b456ff19003202d60680f49b739d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9699271b_a8e47cfb",
        "filename": "vp8/vp8_cx_iface.c",
        "patchSetId": 19
      },
      "lineNbr": 756,
      "author": {
        "id": 1341651
      },
      "writtenOn": "2019-06-13T01:21:28Z",
      "side": 1,
      "message": "Just for the record, static asserts originated from my patch. The rationale for having the asserts located at the places that rely on some property of the constant is that if the constant is incompatibly modified, such places immediately become apparent. They are, of course, not functionally necessary and can be removed or replaced with comments, but that would make the code less maintainable.",
      "parentUuid": "e8e5712a_c9d7f147",
      "revId": "736f20626c6b456ff19003202d60680f49b739d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44d12b4d_af4450db",
        "filename": "vp8/vp8_cx_iface.c",
        "patchSetId": 19
      },
      "lineNbr": 756,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2019-06-13T03:39:19Z",
      "side": 1,
      "message": "\u003e Just for the record, static asserts originated from my patch. The rationale for having the asserts located at the places that rely on some property of the constant is that if the constant is incompatibly modified, such places immediately become apparent. They are, of course, not functionally necessary and can be removed or replaced with comments, but that would make the code less maintainable.\n\nI understand the reasoning. In this case I was just noting that bringing in something that needs special platform treatment may not be worth it if we can cover it with a #if.",
      "parentUuid": "9699271b_a8e47cfb",
      "revId": "736f20626c6b456ff19003202d60680f49b739d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30f49922_96829207",
        "filename": "vp8/vp8_cx_iface.c",
        "patchSetId": 19
      },
      "lineNbr": 756,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2019-06-13T03:40:53Z",
      "side": 1,
      "message": "\u003e \u003e Just for the record, static asserts originated from my patch. The rationale for having the asserts located at the places that rely on some property of the constant is that if the constant is incompatibly modified, such places immediately become apparent. They are, of course, not functionally necessary and can be removed or replaced with comments, but that would make the code less maintainable.\n\u003e \n\u003e I understand the reasoning. In this case I was just noting that bringing in something that needs special platform treatment may not be worth it if we can cover it with a #if.\n\nI\u0027m OK with keeping it the COMPILE_TIME_ASSERT as well as long as the platform detection is corrected.",
      "parentUuid": "44d12b4d_af4450db",
      "revId": "736f20626c6b456ff19003202d60680f49b739d5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}