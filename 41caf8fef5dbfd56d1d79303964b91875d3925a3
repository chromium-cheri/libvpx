{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7a89f227_991e2e25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1573372
      },
      "writtenOn": "2023-10-04T11:42:45Z",
      "side": 1,
      "message": "This commit adds an `emms` instruction at the end of MMX assembly for vpx_subtract_block to clear the MMX registers. With this change the mismatch between x86 build and C only build is resolved.",
      "revId": "41caf8fef5dbfd56d1d79303964b91875d3925a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fbd2945_3a993d94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2023-10-05T18:08:19Z",
      "side": 1,
      "message": "\u003e This commit adds an `emms` instruction at the end of MMX assembly for vpx_subtract_block to clear the MMX registers. With this change the mismatch between x86 build and C only build is resolved.\n\nIn libvpx `vpx_clear_system_state()` is generally used to avoid the overhead between assembly calls. This suggests one is missing before some floating point operations.",
      "parentUuid": "7a89f227_991e2e25",
      "revId": "41caf8fef5dbfd56d1d79303964b91875d3925a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cb561b0_fc4c9ae8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1573372
      },
      "writtenOn": "2023-10-10T08:47:16Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "4fbd2945_3a993d94",
      "revId": "41caf8fef5dbfd56d1d79303964b91875d3925a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84e89ce1_99f061b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2023-10-10T22:36:52Z",
      "side": 1,
      "message": "\u003e Acknowledged\n\nWhat I was looking for here was an identification of the area to blame and the addition of `vpx_clear_system_state()` instead of this change, which would make it inconsistent with the other assembly.",
      "parentUuid": "1cb561b0_fc4c9ae8",
      "revId": "41caf8fef5dbfd56d1d79303964b91875d3925a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e4a954e_2286872c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1573372
      },
      "writtenOn": "2023-10-12T13:25:29Z",
      "side": 1,
      "message": "We accept that the addition of `vpx_clear_system_state()` would be consistent with other changes in codebase. When we tried identifying the code areas of floating-point operations, there seem to be multiple `vpx_subtract_block()` calls due to which mis-match seems to originate (potentially multiple code areas). As we identified the actual problem in this case, we went ahead with current approach as\n\n1) it can help in cleaning-up `vpx_clear_system_state()` from the codebase in future (similar to libaom)\n\n2) identification of the floating point operations before which `vpx_clear_system_state()` has to be added may be time-consuming/open-ended\n\nHence we request you to reconsider the current approach. Kindly let us know what you think.",
      "parentUuid": "84e89ce1_99f061b6",
      "revId": "41caf8fef5dbfd56d1d79303964b91875d3925a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07c5d39e_208d6ca3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2023-10-12T19:28:13Z",
      "side": 1,
      "message": "\u003e We accept that the addition of `vpx_clear_system_state()` would be consistent with other changes in codebase. When we tried identifying the code areas of floating-point operations, there seem to be multiple `vpx_subtract_block()` calls due to which mis-match seems to originate (potentially multiple code areas). As we identified the actual problem in this case, we went ahead with current approach as\n\u003e \n\u003e 1) it can help in cleaning-up `vpx_clear_system_state()` from the codebase in future (similar to libaom)\n\u003e \n\nThat isn\u0027t scheduled and I\u0027d like to see performance data. It should be minor, but in several locations we can defer this across multiple calls.\n\n\u003e 2) identification of the floating point operations before which `vpx_clear_system_state()` has to be added may be time-consuming/open-ended\n\u003e \n\u003e Hence we request you to reconsider the current approach. Kindly let us know what you think.\n\nI would prefer to be consistent with the codebase and call `vpx_clear_system_state()` before any floating point calculations, not necessarily at the end of `vpx_subtract_block()` calls.",
      "parentUuid": "2e4a954e_2286872c",
      "revId": "41caf8fef5dbfd56d1d79303964b91875d3925a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4941800_5608fbb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-10-19T17:43:31Z",
      "side": 1,
      "message": "In AV1, after seeing this type of bugs from time to time, we felt our old handling method was quite error-prone, and hard to maintain. We changed the way of clearing MMX registers in AV1:\nhttps://bugs.chromium.org/p/aomedia/issues/detail?id\u003d2968\nNow, with this also happens in VP9, IMO, the final solution is to change the handling following AV1 method. This shouldn\u0027t affect performance much as we saw in AV1. Of course, this is beyond the scope of this CL. We can discuss it separately.\n\nRegarding this CL, the fix follows AV1 method, but inconsistent with VP9 method. This can be a quick workaround. Could you run some speed tests to show the performance impact?",
      "revId": "41caf8fef5dbfd56d1d79303964b91875d3925a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a936084f_90241a5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1573372
      },
      "writtenOn": "2023-10-23T15:45:23Z",
      "side": 1,
      "message": "We tested the performance of this CL for 3 clips (hantro_collage_w352h288.yuv, niklas_640_480_30.yuv and niklas_1280_720_30.y4m) at encoding bitrates of 1600kbps and 6400kbps for 160 frames.\n\nWe observed a negligible change in encode time (averaged over clips and bitrates) as follows:\n```\nGood\ncpu-used  Encode time reduction (%)\n       0             0.43\n       4             0.30\n       5             0.00\nrt\ncpu-used\n       0             0.20\n       7            -0.65\n       8            -0.20\n       9            -0.70\n```\nAlso, when we performed the encoding of rt cpu9 preset for one of the test cases multiple times (to check the variation of encode time from one run to another), the average encode time reduction seen was ~0.25%.",
      "parentUuid": "d4941800_5608fbb1",
      "revId": "41caf8fef5dbfd56d1d79303964b91875d3925a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "970cedc8_cf662886",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-11-02T03:39:46Z",
      "side": 1,
      "message": "Thanks for the testing. Talked to James, and we agree to checking in this fix so that the 32-bit build test can be enabled.",
      "parentUuid": "a936084f_90241a5c",
      "revId": "41caf8fef5dbfd56d1d79303964b91875d3925a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}