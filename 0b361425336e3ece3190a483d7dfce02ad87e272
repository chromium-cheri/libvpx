{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "efa6f8c4_14568288",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2022-10-11T22:59:26Z",
      "side": 1,
      "message": "This will need to be rebased on the main branch. It shows as a merge conflict currently.",
      "revId": "0b361425336e3ece3190a483d7dfce02ad87e272",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1926d089_79b1faec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2022-10-11T23:15:21Z",
      "side": 1,
      "message": "\u003e This will need to be rebased on the main branch. It shows as a merge conflict currently.\n\nLet\u0027s also keep this change as just a cosmetic move. The vqrdmulhq_s16 investigation can be done in a follow up as well as the vclt.",
      "parentUuid": "efa6f8c4_14568288",
      "revId": "0b361425336e3ece3190a483d7dfce02ad87e272",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfa052f6_e2233111",
        "filename": "vpx_dsp/arm/fdct_neon.h",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2022-10-10T09:55:00Z",
      "side": 1,
      "message": "Is it possible to do all of this with a vqrdmulhq_s16()[1]?\n\nE.g. something like: \n*add \u003d vqrdmulhq_s16(vaddq_s16(a, b), 2 * c);\n*sub \u003d vqrdmulhq_s16(vsubq_s16(a, b), 2 * c);\n\n[1] https://developer.arm.com/architectures/instruction-sets/intrinsics/vqrdmulhq_s16",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 32,
        "endChar": 1
      },
      "revId": "0b361425336e3ece3190a483d7dfce02ad87e272",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e86e7032_778673af",
        "filename": "vpx_dsp/arm/fdct_neon.h",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1537919
      },
      "writtenOn": "2022-10-11T06:38:16Z",
      "side": 1,
      "message": "So, I did try this, and it worked -passed all of the accuracy tests, however failed on one memcheck tests. (NEON/TransDCT.MemCheck/2). After some investigation, there are just two cornercases where this breaks: \nFor example:\n           a: 0000 0000 0000 0000 0000 0000 0000 a5d8 \n           b: 0000 0000 0000 0000 0000 0000 0000 a5d8\n   constant : 00002d41\nOriginal code produces:\n        *add: 0000 0000 0000 0000 0000 0000 0000 8081\nvqrdmulhq_s16:\n        add2: 0000 0000 0000 0000 0000 0000 0000 3585\n        \nSo it fails the test. However, I\u0027m not sure if this is right, the constant is too large. The opportunity for optimization here is too large to ignore, as it\u0027s just one function, perhaps it wouldn\u0027t be out of the question to change the test to lower the max value of the constant here? James, Scott?",
      "parentUuid": "bfa052f6_e2233111",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 32,
        "endChar": 1
      },
      "revId": "0b361425336e3ece3190a483d7dfce02ad87e272",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb416c51_7a27a820",
        "filename": "vpx_dsp/arm/fdct_neon.h",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1537919
      },
      "writtenOn": "2022-10-11T06:41:36Z",
      "side": 1,
      "message": "for clarification, this is not the highbd version of the function.",
      "parentUuid": "e86e7032_778673af",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 32,
        "endChar": 1
      },
      "revId": "0b361425336e3ece3190a483d7dfce02ad87e272",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3034ebab_6029e364",
        "filename": "vpx_dsp/arm/fdct_neon.h",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1537919
      },
      "writtenOn": "2022-10-11T07:24:11Z",
      "side": 1,
      "message": "ignore my last comment. It\u0027s not the constant that\u0027s the problem, these are just cospi coefficients, it\u0027s the max_pixel_value in the tests.",
      "parentUuid": "eb416c51_7a27a820",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 32,
        "endChar": 1
      },
      "revId": "0b361425336e3ece3190a483d7dfce02ad87e272",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e57f4a2_326a1677",
        "filename": "vpx_dsp/arm/fdct_neon.h",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1000882
      },
      "writtenOn": "2022-10-11T23:03:23Z",
      "side": 1,
      "message": "To make debugging easier, I hard-coded max_pixel_value to 255 and forced input_extreme_block to be set to 255 as well. NEON/TransDCT.MemCheck/2 still reported an error. During the debug, I noticed a case where two positive numbers (0x5a28) added together (0xb450) in butterfly_one_coeff() would be seen as negative by vqrdmulhq_s16(). So it appears that the intermediate values are overflowing into the sign bit, causing errors. fdct goes through the data in two passes. (see vpx_fdct16x16_c) The overflow I am seeing occurs in the second pass. It might be possible to use vqrdmulhq_s16 during the first pass, and the original butterfly_one_coeff during the second pass.",
      "parentUuid": "3034ebab_6029e364",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 32,
        "endChar": 1
      },
      "revId": "0b361425336e3ece3190a483d7dfce02ad87e272",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2b22196_c2a870d3",
        "filename": "vpx_dsp/arm/fdct_neon.h",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2022-10-10T09:55:00Z",
      "side": 1,
      "message": "Versions of GCC and Clang that have been released in the last year will get us out of jail here and transform this code to use a CMLT #0 instruction instead of a right shift. (CMLT is double the throughput of SSHR on Arm OoO cores.) Regardless, we ought to use the CMLT intrinsic[1] directly.\n\n(CMGT with a zero-vector will get transformed to CMLT #0 and is available on both 32- and 64-bit, unlike [2].)\n\nThis comment applies to all places in this Neon code where we want to isolate the sign bit.\n\n[1] https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltq_s16\n[2] https://developer.arm.com/architectures/instruction-sets/intrinsics/vcltzq_s16",
      "range": {
        "startLine": 59,
        "startChar": 2,
        "endLine": 59,
        "endChar": 55
      },
      "revId": "0b361425336e3ece3190a483d7dfce02ad87e272",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40c666bb_ad7b10bd",
        "filename": "vpx_dsp/arm/fdct_neon.h",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1537919
      },
      "writtenOn": "2022-10-11T06:01:28Z",
      "side": 1,
      "message": "Jonathan, \nI reproduced it with vcltq_s16(), but I couldn\u0027t do it with just the vcltq, I had to also use an AND in there, to isolate the sign bit, perhaps I\u0027m missing something obvious? In any case, it worked, I didn\u0027t see any difference in performance though.\n\nconst uint16x8_t a_sign_u16 \u003d vandq_u16(vcltq_s16(a, vdupq_n_s16(0)), vdupq_n_u16(1));",
      "parentUuid": "a2b22196_c2a870d3",
      "range": {
        "startLine": 59,
        "startChar": 2,
        "endLine": 59,
        "endChar": 55
      },
      "revId": "0b361425336e3ece3190a483d7dfce02ad87e272",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}