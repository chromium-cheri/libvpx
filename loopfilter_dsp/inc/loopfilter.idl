#include "AEEStdDef.idl"

const short TX_SIZES_IDL = 4;

struct BUF_INFO {
  long offset;
  long stride;
  long plane_type;
  long pad;
};

// This structure holds bit masks for all 8x8 blocks in a 64x64 region.
// Each 1 bit represents a position in which we want to apply the loop filter.
// Left_ entries refer to whether we apply a filter on the border to the
// left of the block.   Above_ entries refer to whether or not to apply a
// filter on the above border.   Int_ entries refer to whether or not to
// apply borders on the 4x4 edges within the 8x8 block that each bit
// represents.
// Since each transform is accompanied by a potentially different type of
// loop filter there is a different entry in the array for each transform size.
struct LOOP_FILTER_MASK {
  unsigned long long left_y[TX_SIZES_IDL];
  unsigned long long above_y[TX_SIZES_IDL];
  unsigned long long int_4x4_y;
  unsigned short left_uv[TX_SIZES_IDL];
  unsigned short above_uv[TX_SIZES_IDL];
  unsigned short int_4x4_uv;
  octet lfl_y[64];
  octet lfl_uv[16];
};

interface loopfilter{

long rows_work_dsp(in long start, in long stop,
                   in long num_planes,
                   in long mi_rows, in long mi_cols,
                   rout sequence<octet> buffer_alloc,
                   rout sequence<BUF_INFO> buf_infos,
                   in sequence<octet> lf_info_serialized,
                   rout sequence<LOOP_FILTER_MASK> lfms);
};