{
  "comments": [
    {
      "key": {
        "uuid": "218e78b3_f746601c",
        "filename": "vpx_dsp/arm/intrapred_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 265,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-10-27T03:58:46Z",
      "side": 1,
      "message": "this implementation causes clang to generate more arm code than neon. reverting still incurs an increase in runtime at the function level, maybe due to the overall code size change.\ngcc-4.9 is neutral with this change",
      "revId": "ed76a9aa11e5cc2dee6c56f12bfc35212afc20bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c685b2c9_62f1f6c0",
        "filename": "vpx_dsp/arm/intrapred_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 265,
      "author": {
        "id": 1153359
      },
      "writtenOn": "2016-10-27T21:30:25Z",
      "side": 1,
      "message": "For the original neon code, clang generates 3 \"vst1_lane_u32()\", and 1 \"vget_lane_u32()\" plus \"str r3, [r0, r1]!\".\nFor the new neon code, clang generates 4 \"vget_lane_u32()\" plus \"str r3, [r0, r1]!\", which is slower.\n\nThe new neon code (with dst +\u003d stride) is more compiler friendly, but current clang compiles it with redundancy.\n\nI reverted thess 4 memory stores back.",
      "parentUuid": "218e78b3_f746601c",
      "revId": "ed76a9aa11e5cc2dee6c56f12bfc35212afc20bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c685b2c9_057ef41e",
        "filename": "vpx_dsp/arm/intrapred_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 265,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-10-27T21:47:05Z",
      "side": 1,
      "message": "\u003e For the original neon code, clang generates 3 \"vst1_lane_u32()\",\n \u003e and 1 \"vget_lane_u32()\" plus \"str r3, [r0, r1]!\".\n \u003e For the new neon code, clang generates 4 \"vget_lane_u32()\" plus\n \u003e \"str r3, [r0, r1]!\", which is slower.\n \u003e \n \u003e The new neon code (with dst +\u003d stride) is more compiler friendly,\n \u003e but current clang compiles it with redundancy.\n \u003e \n \u003e I reverted thess 4 memory stores back.\n\nall right, I think I ran locally with something similar and though the code was the same as the base the overall runtime was still penalized. I wonder if there\u0027s an outlier in the individual runs that is causing things to shift upward.",
      "parentUuid": "c685b2c9_62f1f6c0",
      "revId": "ed76a9aa11e5cc2dee6c56f12bfc35212afc20bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "218e78b3_773b308f",
        "filename": "vpx_dsp/arm/intrapred_neon.c",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-10-27T03:58:46Z",
      "side": 1,
      "message": "this shows the most gain; 16x16 is neutral with gcc, slightly positive with clang",
      "revId": "ed76a9aa11e5cc2dee6c56f12bfc35212afc20bd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}