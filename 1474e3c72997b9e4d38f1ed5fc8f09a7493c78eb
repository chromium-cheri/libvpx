{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "678bc5bc_edb924f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-01-03T20:18:43Z",
      "side": 1,
      "message": "LGTM. I suggest two related changes that you can make in a separate CL.\n\nIf you make those two changes in this CL, remember to update the commit message.",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8bb4383e_f909cd8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-03T20:34:27Z",
      "side": 1,
      "message": "I\u0027ll address your comments in new CLs as they\u0027re different aspects of this interface.",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fa2fcdb_ac68763c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-03T20:48:44Z",
      "side": 1,
      "message": "Addressed in https://chromium-review.googlesource.com/c/webm/libvpx/+/5165749",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e7762f4_d0af37e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-03T20:48:59Z",
      "side": 1,
      "message": "Addressed in https://chromium-review.googlesource.com/c/webm/libvpx/+/5165749",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d86fe414_fac41b0d",
        "filename": "vp9/encoder/vp9_ratectrl.c",
        "patchSetId": 1
      },
      "lineNbr": 1711,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-01-03T20:18:43Z",
      "side": 1,
      "message": "There are two calls to `vp9_extrc_get_encodeframe_decision()` in libvpx. Both of them are guarded with the condition `cpi-\u003eext_ratectrl.ready \u0026\u0026 (cpi-\u003eext_ratectrl.funcs.rc_type \u0026 VPX_RC_QP) !\u003d 0`.\n\nSo I think the second if conditional in `vp9_extrc_get_encodeframe_decision()` could become an assertion:\n\n```\nvpx_codec_err_t vp9_extrc_get_encodeframe_decision(\n    EXT_RATECTRL *ext_ratectrl, int show_index, int coding_index, int gop_index,\n    FRAME_UPDATE_TYPE update_type, int gop_size, int use_alt_ref,\n    RefCntBuffer *ref_frame_bufs[MAX_INTER_REF_FRAMES], int ref_frame_flags,\n    vpx_rc_encodeframe_decision_t *encode_frame_decision) {\n  if (ext_ratectrl \u003d\u003d NULL) {\n    return VPX_CODEC_INVALID_PARAM;\n  }\n  if (ext_ratectrl-\u003eready \u0026\u0026 (ext_ratectrl-\u003efuncs.rc_type \u0026 VPX_RC_QP) !\u003d 0) {\n    ...\n    rc_status \u003d ext_ratectrl-\u003efuncs.get_encodeframe_decision(\n        ext_ratectrl-\u003emodel, \u0026encode_frame_info, encode_frame_decision);\n    if (rc_status \u003d\u003d VPX_RC_ERROR) {\n      return VPX_CODEC_ERROR;\n    }\n  } \n  return VPX_CODEC_OK;\n}\n```\n\nOtherwise, we need to return an error at the end of the function, because we cannot return `VPX_CODEC_OK` without setting the output parameter `*encode_frame_decision`. Note that we need to return `VPX_CODEC_OK` at the end of the second if statement:\n\n```\nvpx_codec_err_t vp9_extrc_get_encodeframe_decision(\n    EXT_RATECTRL *ext_ratectrl, int show_index, int coding_index, int gop_index,\n    FRAME_UPDATE_TYPE update_type, int gop_size, int use_alt_ref,\n    RefCntBuffer *ref_frame_bufs[MAX_INTER_REF_FRAMES], int ref_frame_flags,\n    vpx_rc_encodeframe_decision_t *encode_frame_decision) {\n  if (ext_ratectrl \u003d\u003d NULL) {\n    return VPX_CODEC_INVALID_PARAM;\n  }\n  if (ext_ratectrl-\u003eready \u0026\u0026 (ext_ratectrl-\u003efuncs.rc_type \u0026 VPX_RC_QP) !\u003d 0) {\n    ...\n    rc_status \u003d ext_ratectrl-\u003efuncs.get_encodeframe_decision(\n        ext_ratectrl-\u003emodel, \u0026encode_frame_info, encode_frame_decision);\n    if (rc_status \u003d\u003d VPX_RC_ERROR) {\n      return VPX_CODEC_ERROR;\n    }\n    return VPX_CODEC_OK;  \u003c\u003d ADD THIS\n  } \n  return VPX_CODEC_INVALID_PARAMETER;  \u003c\u003d CHANGE TO THIS\n}\n```",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "739e0d3c_f5306049",
        "filename": "vp9/encoder/vp9_ratectrl.c",
        "patchSetId": 1
      },
      "lineNbr": 1711,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-03T20:48:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d86fe414_fac41b0d",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "711c9b61_5d95af94",
        "filename": "vp9/encoder/vp9_ratectrl.c",
        "patchSetId": 1
      },
      "lineNbr": 1711,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-03T20:48:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d86fe414_fac41b0d",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3265a577_e1026baa",
        "filename": "vp9/encoder/vp9_ratectrl.c",
        "patchSetId": 1
      },
      "lineNbr": 1723,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-01-03T19:28:40Z",
      "side": 1,
      "message": "This error message seems to be for the condition\n\n```\n          cpi-\u003eext_ratectrl.ready \u0026\u0026\n          (cpi-\u003eext_ratectrl.funcs.rc_type \u0026 VPX_RC_QP) !\u003d 0 \u0026\u0026\n          cpi-\u003eext_ratectrl.funcs.get_encodeframe_decision \u003d\u003d NULL\n```\n\nBut we also get here if `cpi-\u003eext_ratectrl.ready` is false or `(cpi-\u003eext_ratectrl.funcs.rc_type \u0026 VPX_RC_QP) \u003d\u003d 0`. Should we call `vpx_internal_error()` under those two conditions?",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84a3043e_6c4a369a",
        "filename": "vp9/encoder/vp9_ratectrl.c",
        "patchSetId": 1
      },
      "lineNbr": 1723,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-03T19:33:36Z",
      "side": 1,
      "message": "`vpx_internal_error()` isn\u0027t the best choice since the external RC isn\u0027t properly set (instead of an internal error).\n\nIs there a better error return function for this? I guess I can always change the signature of this function to return an error code, which can be propagated to `vp9_get_compressed_data()`.\n\nLet me know what you think.",
      "parentUuid": "3265a577_e1026baa",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48869fdc_aa85ffe7",
        "filename": "vp9/encoder/vp9_ratectrl.c",
        "patchSetId": 1
      },
      "lineNbr": 1723,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-01-03T19:53:46Z",
      "side": 1,
      "message": "I am not familiar with the external rate control library, so I don\u0027t know what is the right way to report an error here.\n\nBut I am afraid that my question was not clear. What I meant to ask is: if `cpi-\u003eext_ratectrl.ready` is false or if `(cpi-\u003eext_ratectrl.funcs.rc_type \u0026 VPX_RC_QP) \u003d\u003d 0`, should we report an error or should we set `tpl_frame-\u003ebase_qindex` using the code at lines 1726-1728?",
      "parentUuid": "84a3043e_6c4a369a",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e535ed9_70c43e89",
        "filename": "vp9/encoder/vp9_ratectrl.c",
        "patchSetId": 1
      },
      "lineNbr": 1723,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-03T19:55:43Z",
      "side": 1,
      "message": "Oh, I think an error should be reported because `cpi-\u003etpl_with_external_rc` is true, which means the user intends to control TPL with external RC, but fails to set up the proper callback or the library.",
      "parentUuid": "48869fdc_aa85ffe7",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4805d2ad_8b218fc0",
        "filename": "vp9/encoder/vp9_ratectrl.c",
        "patchSetId": 1
      },
      "lineNbr": 1723,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-01-03T20:18:43Z",
      "side": 1,
      "message": "In the comment for the `VP9E_ENABLE_EXTERNAL_RC_TPL` codec control:\n\n```\n  /*!\\brief Codec control to use external RC to control TPL.\n   *\n   * This will use external RC to control the QP and GOP structure for TPL.\n   *\n   * Supported in codecs: VP9\n   */\n  VP9E_ENABLE_EXTERNAL_RC_TPL,\n```\n\nI think we should mention that VPX_RC_QP must be set in `rc_type` and the `get_encodeframe_decision` callback must be set.",
      "parentUuid": "2e535ed9_70c43e89",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "711359de_0133840f",
        "filename": "vp9/encoder/vp9_ratectrl.c",
        "patchSetId": 1
      },
      "lineNbr": 1723,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-03T20:48:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4805d2ad_8b218fc0",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "062c9d92_6fd00d87",
        "filename": "vp9/encoder/vp9_ratectrl.c",
        "patchSetId": 1
      },
      "lineNbr": 1723,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-03T20:48:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4805d2ad_8b218fc0",
      "revId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Commit-Queue",
        "description": {
          "value": "Submit requirement for the \u0027Commit-Queue\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "1474e3c72997b9e4d38f1ed5fc8f09a7493c78eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}