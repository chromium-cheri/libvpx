{
  "comments": [
    {
      "key": {
        "uuid": "3710a130_d91c6153",
        "filename": "vpx_dsp/quantize.c",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 1001914
      },
      "writtenOn": "2017-08-15T17:48:55Z",
      "side": 1,
      "message": "If the decoder saturates this and the encoder allows it to overflow, this disparity might cause enc/dec mismatch.",
      "range": {
        "startLine": 160,
        "startChar": 35,
        "endLine": 160,
        "endChar": 74
      },
      "revId": "8d28710263cc17b51fd45efbce46cf73858805d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "039d57ab_9bb6455a",
        "filename": "vpx_dsp/quantize.c",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-08-15T19:50:32Z",
      "side": 1,
      "message": "This is the current behavior in lowbd builds.\n\nI thought quantize was encoder only and used to make a decision in the encode process. What\u0027s the equivalent decoder function?",
      "parentUuid": "3710a130_d91c6153",
      "range": {
        "startLine": 160,
        "startChar": 35,
        "endLine": 160,
        "endChar": 74
      },
      "revId": "8d28710263cc17b51fd45efbce46cf73858805d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7dd17b9_de40913c",
        "filename": "vpx_dsp/quantize.c",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 1001914
      },
      "writtenOn": "2017-08-15T22:54:05Z",
      "side": 1,
      "message": "https://cs.corp.google.com/piper///depot/google3/third_party/libvpx/git_root/vp9/decoder/vp9_detokenize.c\n\nline 176 - 178",
      "parentUuid": "039d57ab_9bb6455a",
      "range": {
        "startLine": 160,
        "startChar": 35,
        "endLine": 160,
        "endChar": 74
      },
      "revId": "8d28710263cc17b51fd45efbce46cf73858805d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5ff0196_096c437a",
        "filename": "vpx_dsp/quantize.c",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-08-16T17:28:36Z",
      "side": 1,
      "message": "#if CONFIG_VP9_HIGHBITDEPTH\n        // val may use 18-bits\n        v \u003d (int)(((int64_t)val * dqv) \u003e\u003e dq_shift);\n#else\n        v \u003d (val * dqv) \u003e\u003e dq_shift;\n#endif\n\nis \u0027val may use 18-bits\u0027 true for 8 bit files or just 10/12 bit files?",
      "parentUuid": "b7dd17b9_de40913c",
      "range": {
        "startLine": 160,
        "startChar": 35,
        "endLine": 160,
        "endChar": 74
      },
      "revId": "8d28710263cc17b51fd45efbce46cf73858805d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53f3a86b_2f97d290",
        "filename": "vpx_dsp/quantize.c",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-08-16T17:30:23Z",
      "side": 1,
      "message": "are the dqcoeff values encoded directly in the bitstream? is that what dqv refers to?",
      "parentUuid": "d5ff0196_096c437a",
      "range": {
        "startLine": 160,
        "startChar": 35,
        "endLine": 160,
        "endChar": 74
      },
      "revId": "8d28710263cc17b51fd45efbce46cf73858805d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}