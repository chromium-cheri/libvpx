{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "69c097f5_a892088a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-27T17:21:44Z",
      "side": 1,
      "message": "I still don\u0027t fully understand the row_base_thresh_freq_fact code. My suggestions aim to preserve the current behavior when `sb_rows` doesn\u0027t change.",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "575778c1_61330db6",
        "filename": "vp9/encoder/vp9_encodeframe.c",
        "patchSetId": 4
      },
      "lineNbr": 5888,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-26T22:31:10Z",
      "side": 1,
      "message": "This variable (`sb_rows`) is loop-invariant. Move it outside the for loop.",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a126e02a_f5195512",
        "filename": "vp9/encoder/vp9_encodeframe.c",
        "patchSetId": 4
      },
      "lineNbr": 5888,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-27T17:21:44Z",
      "side": 1,
      "message": "1) One way to handle this is to move this if statement into a separate for loop.\n\nSpecifically, delete lines 5886-5893, and add the folllwing for loop at the end of this function:\n\n```\n  if (cpi-\u003esf.adaptive_rd_thresh_row_mt) {\n    const int sb_rows \u003d\n        (mi_cols_aligned_to_sb(cm-\u003emi_rows) \u003e\u003e MI_BLOCK_SIZE_LOG2) + 1;\n    for (tile_row \u003d 0; tile_row \u003c tile_rows; ++tile_row) {\n      for (tile_col \u003d 0; tile_col \u003c tile_cols; ++tile_col) {\n        TileDataEnc *this_tile \u003d\n            \u0026cpi-\u003etile_data[tile_row * tile_cols + tile_col];\n        if (this_tile-\u003erow_base_thresh_freq_fact \u003d\u003d NULL ||\n            sb_rows \u003e this_tile-\u003esb_rows) {\n          vp9_row_mt_alloc_rd_thresh(cpi, this_tile);\n        }\n      }\n    }\n  }\n```\n\n2) A second way to handle this is to perform the buffer size check inside `vp9_row_mt_alloc_rd_thresh()`.\n\nSpecifically, change lines 5886-5893 to\n\n```\n      if (cpi-\u003esf.adaptive_rd_thresh_row_mt) {\n        vp9_row_mt_alloc_rd_thresh(cpi, this_tile);\n      }\n```\n\nAnd then change the beginning of the `vp9_row_mt_alloc_rd_thresh()` function to:\n\n```\nvoid vp9_row_mt_alloc_rd_thresh(VP9_COMP *const cpi,\n                                TileDataEnc *const this_tile) {\n  VP9_COMMON *const cm \u003d \u0026cpi-\u003ecommon;\n  const int sb_rows \u003d\n      (mi_cols_aligned_to_sb(cm-\u003emi_rows) \u003e\u003e MI_BLOCK_SIZE_LOG2) + 1;\n  int i;\n\n  if (this_tile-\u003erow_base_thresh_freq_fact !\u003d NULL) {\n    // I wonder if we should test equality here: sb_rows \u003d\u003d this_tile-\u003esb_rows\n    if (sb_rows \u003c\u003d this_tile-\u003esb_rows) {\n      return;\n    }\n    vpx_free(this_tile-\u003erow_base_thresh_freq_fact);\n    this_tile-\u003erow_base_thresh_freq_fact \u003d NULL;\n  }\n  CHECK_MEM_ERROR(\n```",
      "parentUuid": "575778c1_61330db6",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3aefc6f6_cbe5ab7a",
        "filename": "vp9/encoder/vp9_encodeframe.c",
        "patchSetId": 4
      },
      "lineNbr": 5888,
      "author": {
        "id": 1126910
      },
      "writtenOn": "2024-03-27T18:38:07Z",
      "side": 1,
      "message": "Done. We should check equaliy here (sb_rows \u003d\u003d this_tile-\u003esb_rows), otherwise we will re-alloc on every frame.",
      "parentUuid": "a126e02a_f5195512",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c822cf7_1d179b2d",
        "filename": "vp9/encoder/vp9_encodeframe.c",
        "patchSetId": 4
      },
      "lineNbr": 5888,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-27T22:17:34Z",
      "side": 1,
      "message": "In patchset 9, we have:\n\n```\nvoid vp9_row_mt_alloc_rd_thresh(VP9_COMP *const cpi,\n                                TileDataEnc *const this_tile) {\n  ...\n\n  if (this_tile-\u003erow_base_thresh_freq_fact !\u003d NULL) {\n    if (sb_rows \u003c\u003d this_tile-\u003esb_rows) {\n      return;\n    }\n    vpx_free(this_tile-\u003erow_base_thresh_freq_fact);\n    this_tile-\u003erow_base_thresh_freq_fact \u003d NULL;\n  }\n```\n\nSo we are still checking `sb_rows \u003c\u003d this_tile-\u003esb_rows`. This seems to contradict your comment that \"We should check equaliy here (sb_rows \u003d\u003d this_tile-\u003esb_rows)\".\n\nChecking `sb_rows \u003c\u003d this_tile-\u003esb_rows` means we will reuse a larger `row_base_thresh_freq_fact` buffer.\n\nChecking `sb_rows \u003d\u003d this_tile-\u003esb_rows` means we will not reuse a larger buffer.",
      "parentUuid": "3aefc6f6_cbe5ab7a",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "673fd137_ba17ff73",
        "filename": "vp9/encoder/vp9_encoder.h",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-26T22:31:10Z",
      "side": 1,
      "message": "Nit: Since this `sb_rows` field is closely related to `row_base_thresh_freq_fact`, I suggest moving this field right below `row_base_thresh_freq_fact`.\n\nAdd a comment to describe its relation to `row_base_thresh_freq_fact`, e.g., \"The value of sb_rows when row_base_thresh_freq_fact is allocated.\" Alternatively, we can say \"The row_base_thresh_freq_fact array has sb_rows * BLOCK_SIZES * MAX_MODES elements.\"",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ca6279d_0109698b",
        "filename": "vp9/encoder/vp9_encoder.h",
        "patchSetId": 4
      },
      "lineNbr": 343,
      "author": {
        "id": 1126910
      },
      "writtenOn": "2024-03-27T18:38:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "673fd137_ba17ff73",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0a1cec8_8515adfd",
        "filename": "vp9/encoder/vp9_multi_thread.c",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-26T22:31:10Z",
      "side": 1,
      "message": "Why is this `sb_rows` different from the `sb_rows` at lines 58-59?\n\nThey differ by 1.",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b87d2101_ef06ec5f",
        "filename": "vp9/encoder/vp9_multi_thread.c",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1126910
      },
      "writtenOn": "2024-03-27T18:38:07Z",
      "side": 1,
      "message": "not sure, Jerome any idea?",
      "parentUuid": "d0a1cec8_8515adfd",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2d418c3_203ed07a",
        "filename": "vp9/encoder/vp9_multi_thread.c",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-03-27T18:46:15Z",
      "side": 1,
      "message": "I\u0027m not sure... It has been too long.\n\nThat seems to be the only place where sb_rows is assigned with + 1\n\nMaybe we can try to remove \"+1\" and see anything bad happens...",
      "parentUuid": "b87d2101_ef06ec5f",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2644f363_1f3f9a5c",
        "filename": "vp9/encoder/vp9_multi_thread.c",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1126910
      },
      "writtenOn": "2024-03-27T21:22:18Z",
      "side": 1,
      "message": "Removed the +1, locally the new tests passes, let see if all tests pass.",
      "parentUuid": "a2d418c3_203ed07a",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "992055cc_bd5f95b1",
        "filename": "vp9/encoder/vp9_multi_thread.c",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-27T22:17:34Z",
      "side": 1,
      "message": "I searched for \" sb_rows \u003d \" in libvpx. I confirm Jerome\u0027s statement. The value of `sb_rows` should be `mi_cols_aligned_to_sb(cm-\u003emi_rows) \u003e\u003e MI_BLOCK_SIZE_LOG2`, without the `+ 1`.\n\nNote: An equivalent form is `cm-\u003emi_rows + MI_BLOCK_SIZE - 1) / MI_BLOCK_SIZE`.\n\nIf it is necessary to add 1 in `vp9_row_mt_alloc_rd_thresh()`, I suggest we use the standard definition of `sb_rows` and use `sb_rows + 1` in the allocation size.",
      "parentUuid": "2644f363_1f3f9a5c",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "106cec16_9e224450",
        "filename": "vp9/encoder/vp9_multi_thread.c",
        "patchSetId": 4
      },
      "lineNbr": 111,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-03-26T22:31:10Z",
      "side": 1,
      "message": "We should be able to delete this if statement (lines 109-111). It is redundant with lines 5889-5892 in vp9/encoder/vp9_encodeframe.c.\n\nNote that this function (`vp9_row_mt_mem_alloc`) is always called after a `vp9_init_tile_data()` call.",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98b6d439_ee5b08bd",
        "filename": "vp9/encoder/vp9_multi_thread.c",
        "patchSetId": 4
      },
      "lineNbr": 111,
      "author": {
        "id": 1126910
      },
      "writtenOn": "2024-03-27T18:38:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "106cec16_9e224450",
      "revId": "ac761651208ed801bac62fa2608edeef03a58b1b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}