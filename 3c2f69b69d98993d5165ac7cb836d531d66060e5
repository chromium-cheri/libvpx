{
  "comments": [
    {
      "key": {
        "uuid": "97234ad4_1cd4aefd",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2017-05-09T23:05:04Z",
      "side": 1,
      "message": "I think you should add this to Buffer\u003cT\u003e. I don\u0027t think this needs its own class-- just overload Buffer\u003cT\u003e::Buffer w/an extra arg to add the alignment and default it to 0 in the other ctors.",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17966f45_effa1aff",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-05-10T04:41:53Z",
      "side": 1,
      "message": "\u003e I think you should add this to Buffer\u003cT\u003e. I don\u0027t think this needs its own class-- just overload Buffer\u003cT\u003e::Buffer w/an extra arg to add the alignment and default it to 0 in the other ctors.\n\nI made the opposite case. If we\u0027re going to do custom things to a Buffer, then it makes sense to logically split it",
      "parentUuid": "97234ad4_1cd4aefd",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94abc6bb_47686f06",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-05-10T20:32:20Z",
      "side": 1,
      "message": "When we discussed this earlier I objected that it\u0027s not really a general purpose buffer class, it\u0027s for use within the codec. I could go either way, but this is the only way I was able to make this approach work.",
      "parentUuid": "17966f45_effa1aff",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b17514d_5af43f2f",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2017-05-12T01:09:12Z",
      "side": 1,
      "message": "Given the context in which this class is used I think alignment is an opaque implementation detail of the buffer object. Yes, DSPBuffer\u003cT\u003e is very small, but I think the changes req\u0027d to make Buffer\u003cT\u003e capable of supporting an alignment are even smaller. It also gets rid of the that weird looking delete in the ctor, which just looks wrong (ok, probably getting hung up on aesthetics given this is for testing, but i really hate it).  I think all that\u0027s needed to do this in Buffer\u003cT\u003e are a ctor overload and some minor tweaks in Init() and the dtor. \n\nI guess I just don\u0027t think buffer alignment is something special enough for the extra class when the original only provides access to buffer data via an accessor. In the normal unaligned use case the user shouldn\u0027t care, and in the alignment use case I don\u0027t think it\u0027s really necessary to make the test writer find another class to use. Forcing them to use the ctor overload seems like enough of an indicator that something is different. \n\nI could be convinced about keeping this setup, and if I were the main comment I have is that this should be renamed:\n- s/DSPBuffer/AlignedBuffer\n- s/dspbuffer/aligned_buffer/",
      "parentUuid": "94abc6bb_47686f06",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b465a671_c0c50772",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-05-12T13:20:07Z",
      "side": 1,
      "message": "\u003e Given the context in which this class is used I think alignment is an opaque implementation detail of the buffer object. Yes, DSPBuffer\u003cT\u003e is very small, but I think the changes req\u0027d to make Buffer\u003cT\u003e capable of supporting an alignment are even smaller. It also gets rid of the that weird looking delete in the ctor, which just looks wrong (ok, probably getting hung up on aesthetics given this is for testing, but i really hate it).  I think all that\u0027s needed to do this in Buffer\u003cT\u003e are a ctor overload and some minor tweaks in Init() and the dtor. \n\u003e \n\u003e I guess I just don\u0027t think buffer alignment is something special enough for the extra class when the original only provides access to buffer data via an accessor. In the normal unaligned use case the user shouldn\u0027t care, and in the alignment use case I don\u0027t think it\u0027s really necessary to make the test writer find another class to use. Forcing them to use the ctor overload seems like enough of an indicator that something is different. \n\u003e \n\u003e I could be convinced about keeping this setup, and if I were the main comment I have is that this should be renamed:\n\u003e - s/DSPBuffer/AlignedBuffer\n\u003e - s/dspbuffer/aligned_buffer/\n\nto distinguish the two I think this makes sense, but I\u0027ll need to have a closer look if there\u0027s some ctor weirdness -- that really isn\u0027t desirable",
      "parentUuid": "9b17514d_5af43f2f",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06c1f99a_f94b43a8",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-05-12T16:18:08Z",
      "side": 1,
      "message": "I\u0027d rather not rename this if the only feature is ever going to be aligning the buffer. I agreed to the split with the understanding that other dsp-useful things could go here, like extending borders.\n\nThe ctor weirdness is due to allocating the buffer in the constructor. If I skip that, it can work, but it requires everyone who uses it calling .Init() or something which is really annoying.",
      "parentUuid": "b465a671_c0c50772",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "609a7bfc_202abf54",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-05-12T16:25:17Z",
      "side": 1,
      "message": "\u003e I\u0027d rather not rename this if the only feature is ever going to be aligning the buffer. I agreed to the split with the understanding that other dsp-useful things could go here, like extending borders.\n\u003e \n\u003e The ctor weirdness is due to allocating the buffer in the constructor. If I skip that, it can work, but it requires everyone who uses it calling .Init() or something which is really annoying.\n\nthat is the motivation behind this though:\nhttps://google.github.io/styleguide/cppguide.html#Doing_Work_in_Constructors",
      "parentUuid": "06c1f99a_f94b43a8",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad67c996_223fcd83",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-05-12T17:04:57Z",
      "side": 1,
      "message": "It is not calling a virtual function. I tried that, and it didn\u0027t work.\n\nRe signaling errors, it uses ASSERT() in the constructor, so it does signal error.\n\nNot sure which part of that you are trying to highlight.",
      "parentUuid": "609a7bfc_202abf54",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1dc14f7_19015983",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-05-13T00:26:30Z",
      "side": 1,
      "message": "\u003e It is not calling a virtual function. I tried that, and it didn\u0027t work.\n\u003e \n\u003e Re signaling errors, it uses ASSERT() in the constructor, so it does signal error.\n\u003e \n\u003e Not sure which part of that you are trying to highlight.\n\nI was pointing out the reason for init. ASSERT only signals errors if you handle them later, it\u0027s just going to return from the constructor and crash later if you don\u0027t add another ASSERT at the call site, in which case Init makes sense.",
      "parentUuid": "ad67c996_223fcd83",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b0eb80f_53b9fb18",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-05-13T03:48:12Z",
      "side": 1,
      "message": "That\u0027s a fundamental issue with the original design of the Buffer class. Do you want the whole thing redesigned?",
      "parentUuid": "f1dc14f7_19015983",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6baf3fa_91005747",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2017-05-09T23:05:04Z",
      "side": 1,
      "message": "these should all be size_t\n\nDid we already go over this in the initial review for Buffer\u003cT\u003e?  Was it just to avoid casting pain, or did I miss it entirely?",
      "range": {
        "startLine": 29,
        "startChar": 12,
        "endLine": 29,
        "endChar": 66
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b65c6206_552e1473",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-05-11T22:23:06Z",
      "side": 1,
      "message": "i can do this as a follow up, and do buffer.h as well",
      "parentUuid": "a6baf3fa_91005747",
      "range": {
        "startLine": 29,
        "startChar": 12,
        "endLine": 29,
        "endChar": 66
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3749491_1a267013",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 31,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2017-05-09T23:05:04Z",
      "side": 1,
      "message": "this line is an argument in favor of adding this to Buffer\u003cT\u003e. In a test this extra reallocation isn\u0027t really harmful, but it\u0027s suboptimal and not really necessary.",
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23fdc70a_5b6058f0",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 31,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-05-11T22:23:06Z",
      "side": 1,
      "message": "i tried a bunch of ways around this but honestly this was the best i could come up with (outside making one class)",
      "parentUuid": "e3749491_1a267013",
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2bf9d75_e80504e9",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2017-05-09T23:05:04Z",
      "side": 1,
      "message": "could use an ASSERT_GE(alignment_bits, 0) if we\u0027re sticking with int",
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "296f8830_df13cb0f",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-05-11T22:23:06Z",
      "side": 1,
      "message": "done, and can follow up with size_t later",
      "parentUuid": "d2bf9d75_e80504e9",
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "889178ff_355ab6f2",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 63,
      "author": {
        "id": 1002431
      },
      "writtenOn": "2017-05-09T23:05:04Z",
      "side": 1,
      "message": "This doesn\u0027t compile for x86_64-darwin16-gcc:\n\n    [CXX] test/cpu_speed_test.cc.o\nIn file included from ../../../libvpx/test/comp_avg_pred_test.cc:17:\n../../../libvpx/test/dspbuffer.h:63:36: error: use of undeclared identifier \u0027aligned_alloc\u0027\n    buffer \u003d reinterpret_cast\u003cT *\u003e(aligned_alloc(alignment_bits_, size));\n\nvpx_memalign()?\n                                   ^",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 63,
        "endChar": 73
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0414efe_f7ebefe3",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 63,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-05-10T20:32:20Z",
      "side": 1,
      "message": "O_o\n\nthanks for pointing out vpx_memalign",
      "parentUuid": "889178ff_355ab6f2",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 63,
        "endChar": 73
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a678659_fe69b7b8",
        "filename": "test/dspbuffer.h",
        "patchSetId": 9
      },
      "lineNbr": 63,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-05-11T22:23:06Z",
      "side": 1,
      "message": "fixed",
      "parentUuid": "d0414efe_f7ebefe3",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 63,
        "endChar": 73
      },
      "revId": "3c2f69b69d98993d5165ac7cb836d531d66060e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}