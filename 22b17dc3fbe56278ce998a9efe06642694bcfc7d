{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5c13f58a_f29e3aef",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 8,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-01-03T18:57:04Z",
      "side": 1,
      "message": "Here are the changes to the public headers, compared with v1.13.1. (I omitted the comment changes.)\n\n1) In vpx/vpx_codec.h, `const` is added to the `vpx_codec_ctx_t *ctx` parameters of `vpx_codec_error()` and `vpx_codec_error_detail()`.\n\nThis change is ABI and API compatible.\n\n2) In vpx/vpx_encoder.h, the `VPX_ENCODER_ABI_VERSION` macro is bumped (from 15 to 16) and also gets a new component `VPX_TPL_ABI_VERSION`.\n\nThis change is ABI incompatible. This change is API compatible.\n\nI have two comments on this header.\n\n* I think it is incorrect to bump the 15 to 16 in `VPX_ENCODER_ABI_VERSION`, because there is no change to the API in vpx/vpx_encoder.h itself.\n* It doesn\u0027t seem necessary for vpx/vpx_encoder.h to include vpx_tpl.h, because vpx/vpx_encoder.h doesn\u0027t use anything defined in vpx_tpl.h except the `VPX_TPL_ABI_VERSION` macro. It seems that we could remove the `VPX_TPL_ABI_VERSION` component from `VPX_ENCODER_ABI_VERSION`. See my last comment on vpx/vpx_ext_ratectrl.h below.\n\n3) In vpx/vpx_ext_ratectrl.h, the `VPX_EXT_RATECTRL_ABI_VERSION` macro is bumped (from 6 to 7) and several structs get new members.\n\nThese changes are ABI incompatible. These changes seem to be API compatible, i.e., no source code changes to libvpx clients seem necessary because I believe they don\u0027t need to use the new struct members.\n\nSince vpx/vpx_ext_ratectrl.h uses a type (`VpxTplGopStats`) defined in vpx_tpl.h, I think we should add a `VPX_TPL_ABI_VERSION` component to `VPX_EXT_RATECTRL_ABI_VERSION`. See my last comment on vpx/vpx_encoder.h above.\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nIn summary, libvpx users that don\u0027t use vpx/vpx_ext_ratectrl.h just need to recompile their code. They don\u0027t need to change their source code.\n\nIf libvpx users that use vpx/vpx_ext_ratectrl.h don\u0027t need to use the new struct members added in vpx/vpx_ext_ratectrl.h, they also just need to recompile their code and don\u0027t need to change their source code.",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eafe8d52_ef74f27a",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-01-03T18:57:04Z",
      "side": 1,
      "message": "The new `send_tpl_gop_stats` callback should be mentioned here. It doesn\u0027t seem to be covered by this sentence.\n\nOptional: It might be useful to mention the new struct members added in vpx/vpx_ext_ratectrl.h. I don\u0027t know what level of detail on new features this changelog goes into, but it seems that new functions and new struct members should be mentioned.\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nThe following is a suggestion for the source code. You just need to make the suggested change on the main branch.\n\nIn vpx/vpx_ext_ratectrl.h, we should document which callback functions may be null. (Code Search shows that `send_firstpass_stats`, `send_tpl_gop_stats`, `get_encodeframe_decision`, `update_encodeframe_result`, `get_gop_decision`, and `get_frame_rdmult` may be null.). Alternatively, document which callback functions must be set.",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Commit-Queue",
        "description": {
          "value": "Submit requirement for the \u0027Commit-Queue\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}