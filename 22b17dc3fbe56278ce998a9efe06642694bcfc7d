{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "651544ef_025b6e07",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-04T20:24:18Z",
      "side": 1,
      "message": "New CL:\n\nhttps://chromium-review.googlesource.com/c/webm/libvpx/+/5169189",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c13f58a_f29e3aef",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 8,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-01-03T18:57:04Z",
      "side": 1,
      "message": "Here are the changes to the public headers, compared with v1.13.1. (I omitted the comment changes.)\n\n1) In vpx/vpx_codec.h, `const` is added to the `vpx_codec_ctx_t *ctx` parameters of `vpx_codec_error()` and `vpx_codec_error_detail()`.\n\nThis change is ABI and API compatible.\n\n2) In vpx/vpx_encoder.h, the `VPX_ENCODER_ABI_VERSION` macro is bumped (from 15 to 16) and also gets a new component `VPX_TPL_ABI_VERSION`.\n\nThis change is ABI incompatible. This change is API compatible.\n\nI have two comments on this header.\n\n* I think it is incorrect to bump the 15 to 16 in `VPX_ENCODER_ABI_VERSION`, because there is no change to the API in vpx/vpx_encoder.h itself.\n* It doesn\u0027t seem necessary for vpx/vpx_encoder.h to include vpx_tpl.h, because vpx/vpx_encoder.h doesn\u0027t use anything defined in vpx_tpl.h except the `VPX_TPL_ABI_VERSION` macro. It seems that we could remove the `VPX_TPL_ABI_VERSION` component from `VPX_ENCODER_ABI_VERSION`. See my last comment on vpx/vpx_ext_ratectrl.h below.\n\n3) In vpx/vpx_ext_ratectrl.h, the `VPX_EXT_RATECTRL_ABI_VERSION` macro is bumped (from 6 to 7) and several structs get new members.\n\nThese changes are ABI incompatible. These changes seem to be API compatible, i.e., no source code changes to libvpx clients seem necessary because I believe they don\u0027t need to use the new struct members.\n\nSince vpx/vpx_ext_ratectrl.h uses a type (`VpxTplGopStats`) defined in vpx_tpl.h, I think we should add a `VPX_TPL_ABI_VERSION` component to `VPX_EXT_RATECTRL_ABI_VERSION`. See my last comment on vpx/vpx_encoder.h above.\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nIn summary, libvpx users that don\u0027t use vpx/vpx_ext_ratectrl.h just need to recompile their code. They don\u0027t need to change their source code.\n\nIf libvpx users that use vpx/vpx_ext_ratectrl.h don\u0027t need to use the new struct members added in vpx/vpx_ext_ratectrl.h, they also just need to recompile their code and don\u0027t need to change their source code.",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7292d2ac_627db26e",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 8,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-04T20:24:18Z",
      "side": 1,
      "message": "I found the original CL making changes to ABI version:\n\nhttps://chromium-review.googlesource.com/c/webm/libvpx/+/4539169\n\nThe TPL structures `VpxTplGopStats` etc were moved from vpx_encoder.h to vpx_tpl.h and I believe this was the reason why VPX_ENCODER_ABI_VERSION needs to be modified.\n\nHowever maybe it only needs to be bumped by 1, instead of adding VPX_TPL_ABI_VERSION to it.\n\nWhat do you think?",
      "parentUuid": "5c13f58a_f29e3aef",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66b4b5f8_93246f6f",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 8,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-01-05T17:04:11Z",
      "side": 1,
      "message": "I studied the changes to vpx_encoder,h and vpx_tpl.h in https://chromium-review.googlesource.com/c/webm/libvpx/+/4539169. I verified that the three VpxTpl* structs were moved from vpx_encoder.h to vpx_tpl.h unchanged.\n\nSince vpx_encoder.h itself doesn\u0027t use any of the VpxTpl* structs, it wasn\u0027t clear why vpx_encoder.h needs to include vpx_tpl.h. The original CL answered this question for me: to avoid breaking code that includes vpx_encoder.h for the VpxTpl* structs.\n\nI also think your changes to vpx_encoder.h and vpx_tpl.h in the original CL regarding VPX_ENCODER_ABI_VERSION and VPX_TPL_ABI_VERSION are correct. It is correct to add the VPX_TPL_ABI_VERSION component to VPX_ENCODER_ABI_VERSION. However, since VPX_TPL_ABI_VERSION was equal to 0 in the original CL, VPX_ENCODER_ABI_VERSION was not bumped. That is also correct, because the original CL did not change the VpxTpl* structs.\n\nHowever, I think the VPX_ENCODER_ABI_VERSION bump in the following CL is incorrect:\nhttps://chromium-review.googlesource.com/c/webm/libvpx/+/4491027\n\nAdding a new encoder-side codec control (VP9E_GET_TPL_STATS) does not require bumping VPX_ENCODER_ABI_VERSION. I misunderstood this before, and I may have asked you to do this before. (I thought our users need to test the VPX_ENCODER_ABI_VERSION macro to detect the presence of the new codec control, but the correct way to do that is the test the VPX_CTRL_* macros, such as VPX_CTRL_VP9E_GET_TPL_STATS.)\n\nIt might be good to add a comment to vpx_encoder.h to explain why it includes vpx_tpl.h (because the VpxTpl* structs used to be defined in vpx_encoder.h).",
      "parentUuid": "7292d2ac_627db26e",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eafe8d52_ef74f27a",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-01-03T18:57:04Z",
      "side": 1,
      "message": "The new `send_tpl_gop_stats` callback should be mentioned here. It doesn\u0027t seem to be covered by this sentence.\n\nOptional: It might be useful to mention the new struct members added in vpx/vpx_ext_ratectrl.h. I don\u0027t know what level of detail on new features this changelog goes into, but it seems that new functions and new struct members should be mentioned.\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nThe following is a suggestion for the source code. You just need to make the suggested change on the main branch.\n\nIn vpx/vpx_ext_ratectrl.h, we should document which callback functions may be null. (Code Search shows that `send_firstpass_stats`, `send_tpl_gop_stats`, `get_encodeframe_decision`, `update_encodeframe_result`, `get_gop_decision`, and `get_frame_rdmult` may be null.). Alternatively, document which callback functions must be set.",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26407b3d_0cf4ff48",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-04T20:24:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eafe8d52_ef74f27a",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "27dac463_bbc2e223",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-04T20:24:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eafe8d52_ef74f27a",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76896e0b_960190b8",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2024-01-03T20:20:57Z",
      "side": 1,
      "message": "We should mention the new public header vpx_tpl.h. This is useful information to the libvpx-dev package owners.",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "440dd70a_ac2f9c94",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-04T20:24:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76896e0b_960190b8",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6520347_869dae69",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1171444
      },
      "writtenOn": "2024-01-04T20:24:18Z",
      "side": 1,
      "message": "this header is not for the realtime rc lib. But I added a new item here for it.",
      "parentUuid": "76896e0b_960190b8",
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f0dac67_2bd50720",
        "filename": "CHANGELOG",
        "patchSetId": 3
      },
      "lineNbr": 42,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2024-01-09T20:43:27Z",
      "side": 1,
      "message": "integer. Maybe there was a typo in the commit message or bug.",
      "range": {
        "startLine": 42,
        "startChar": 11,
        "endLine": 42,
        "endChar": 19
      },
      "revId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Commit-Queue",
        "description": {
          "value": "Submit requirement for the \u0027Commit-Queue\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "22b17dc3fbe56278ce998a9efe06642694bcfc7d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}