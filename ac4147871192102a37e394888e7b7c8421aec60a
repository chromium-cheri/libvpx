{
  "comments": [
    {
      "key": {
        "uuid": "e6dd565f_65552a0c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 9,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-11-01T22:33:05Z",
      "side": 1,
      "message": "typically it\u0027s best to bring the test in first with the broken code named DISABLED_* [1] then fixing them in a separate commit to avoid having to revert the entire change if there\u0027s unforeseen error.\n\n[1] https://github.com/google/googletest/blob/master/googletest/docs/AdvancedGuide.md#temporarily-disabling-tests",
      "revId": "ac4147871192102a37e394888e7b7c8421aec60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6dd565f_a59c32f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 10,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-11-01T22:33:05Z",
      "side": 1,
      "message": "this is better spelled BUG\u003d..., either long form or webm:1321 will work. this allows the bug to to auto-updated when the change is submitted.",
      "revId": "ac4147871192102a37e394888e7b7c8421aec60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6dd565f_c5c29e92",
        "filename": "test/pp_filter_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 33,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-11-01T22:33:05Z",
      "side": 1,
      "message": "static isn\u0027t necessary in an anonymous namespace; the function name could be more verbose so the reader doesn\u0027t have to decode the abbreviations",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 6
      },
      "revId": "ac4147871192102a37e394888e7b7c8421aec60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6dd565f_e5bd9a0e",
        "filename": "test/pp_filter_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 49,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-11-01T22:33:05Z",
      "side": 1,
      "message": "this is cosmetic and should be a separate change. any cleanup to the existing test we can land first to cut the noise on the implementation commit",
      "range": {
        "startLine": 49,
        "startChar": 7,
        "endLine": 49,
        "endChar": 40
      },
      "revId": "ac4147871192102a37e394888e7b7c8421aec60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6dd565f_456d8ee1",
        "filename": "test/pp_filter_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 104,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-11-01T22:33:05Z",
      "side": 1,
      "message": "the name of the test is contained in the failure output, this can go, better would be to include the index of the failure. with tests like this ASSERT_EQ is likely sufficient to minimize the error output",
      "range": {
        "startLine": 104,
        "startChar": 14,
        "endLine": 104,
        "endChar": 47
      },
      "revId": "ac4147871192102a37e394888e7b7c8421aec60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6dd565f_45846e59",
        "filename": "test/pp_filter_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 129,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-11-01T22:33:05Z",
      "side": 1,
      "message": "use of calloc followed by a memset to non-zero is excessive. note this also might be hiding alignment requirements (where we\u0027d want to use vpx_memalign() to be explicit). if there aren\u0027t any in the assembly this should be switched to new[].",
      "range": {
        "startLine": 129,
        "startChar": 40,
        "endLine": 129,
        "endChar": 50
      },
      "revId": "ac4147871192102a37e394888e7b7c8421aec60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6dd565f_05f2e6ee",
        "filename": "test/pp_filter_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 131,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-11-01T22:33:05Z",
      "side": 1,
      "message": "+ src_left_padding?",
      "range": {
        "startLine": 131,
        "startChar": 27,
        "endLine": 131,
        "endChar": 29
      },
      "revId": "ac4147871192102a37e394888e7b7c8421aec60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6dd565f_a5f0b2e3",
        "filename": "test/pp_filter_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 144,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-11-01T22:33:05Z",
      "side": 1,
      "message": "for tables and other global consts the naming is typically kConstant. local const int, const char*... don\u0027t usually follow the pattern though\n\nhttps://google.github.io/styleguide/cppguide.html#Constant_Names",
      "range": {
        "startLine": 144,
        "startChar": 23,
        "endLine": 144,
        "endChar": 36
      },
      "revId": "ac4147871192102a37e394888e7b7c8421aec60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6dd565f_a54c323e",
        "filename": "test/pp_filter_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 218,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-11-01T22:33:05Z",
      "side": 1,
      "message": "I guess this is meant C vs. Assembly; I always read it as CVS. spelling would probably be better as CvsAssembly. Can we change this to be check random (and possibly extreme) input so we could verify saturation?",
      "range": {
        "startLine": 218,
        "startChar": 30,
        "endLine": 218,
        "endChar": 46
      },
      "revId": "ac4147871192102a37e394888e7b7c8421aec60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6dd565f_254f2280",
        "filename": "test/pp_filter_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 290,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-11-01T22:33:05Z",
      "side": 1,
      "message": "coalesce these to minimize the #if\u0027deffry",
      "revId": "ac4147871192102a37e394888e7b7c8421aec60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}