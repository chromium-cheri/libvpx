{
  "comments": [
    {
      "key": {
        "uuid": "65871656_a2754d8a",
        "filename": "vp8/common/threading.h",
        "patchSetId": 8
      },
      "lineNbr": 200,
      "author": {
        "id": 1000853
      },
      "writtenOn": "2017-08-30T18:15:26Z",
      "side": 1,
      "message": "Is there understanding of whether the combination of this macro (essentially an asm(\"pause\") on x86) and the following one (which is a sched_yield()) actually improves the performance?\nWhat I previously heard about this pattern was \"The original multi-threaded code in VP8 was implemented based on VP8\u0027s data access patterns with help from Intel Engineers.\", but the intention of it wasn\u0027t documented anywhere.\n\nI suspect what we actually want here is to spin for certain number of iterations using a pause instruction, and then back off to sched_yield().",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1699d10b_cd6f79ec",
        "filename": "vp8/common/threading.h",
        "patchSetId": 8
      },
      "lineNbr": 200,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-08-30T18:55:14Z",
      "side": 1,
      "message": "\u003e Is there understanding of whether the combination of this macro (essentially an asm(\"pause\") on x86) and the following one (which is a sched_yield()) actually improves the performance?\n\u003e What I previously heard about this pattern was \"The original multi-threaded code in VP8 was implemented based on VP8\u0027s data access patterns with help from Intel Engineers.\", but the intention of it wasn\u0027t documented anywhere.\n\u003e \n\u003e I suspect what we actually want here is to spin for certain number of iterations using a pause instruction, and then back off to sched_yield().\n\nThat\u0027s probably legacy at this point, it did originate from Intel, but it may have relied on their timing claims. It would be worth revisiting in a separate change.",
      "parentUuid": "65871656_a2754d8a",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6490d00a_19cade8b",
        "filename": "vp8/common/threading.h",
        "patchSetId": 8
      },
      "lineNbr": 200,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2017-08-30T19:49:52Z",
      "side": 1,
      "message": "I\u0027d like to keep this potential perf improvement separate from fixing synchronization. If it turns out to be a regression to remove this macro I wouldn\u0027t want atomics reverted because of that.",
      "parentUuid": "65871656_a2754d8a",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7febe4dd_b1a9d7a8",
        "filename": "vp8/common/threading.h",
        "patchSetId": 8
      },
      "lineNbr": 200,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2017-08-30T19:49:52Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1699d10b_cd6f79ec",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3fe88e9_abfc31a8",
        "filename": "vp8/common/threading.h",
        "patchSetId": 8
      },
      "lineNbr": 200,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-08-30T20:19:52Z",
      "side": 1,
      "message": "\u003e I\u0027d like to keep this potential perf improvement separate from fixing synchronization. If it turns out to be a regression to remove this macro I wouldn\u0027t want atomics reverted because of that.\n\nIf it greatly affected performance and was intended as a fix then it would be better to limit to that platform. In this case I imagine it\u0027s close, but it\u0027s important to have an idea of what the effect will be before landing.",
      "parentUuid": "7febe4dd_b1a9d7a8",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "822e7867_d23babf3",
        "filename": "vp8/encoder/onyx_if.c",
        "patchSetId": 8
      },
      "lineNbr": 5318,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-08-30T06:03:21Z",
      "side": 1,
      "message": "I think this is only used to indicate cleanup should be done. It\u0027s only read and written in this file.",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6132941a_c76879fc",
        "filename": "vp8/encoder/onyx_if.c",
        "patchSetId": 8
      },
      "lineNbr": 5318,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2017-08-30T19:49:52Z",
      "side": 1,
      "message": "Gotcha, I take \"in this file\" to mean that it\u0027s only read/written by the main thread, which makes sense to me given the functions they are in. Comment removed.",
      "parentUuid": "822e7867_d23babf3",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f220226_95940b7d",
        "filename": "vpx_util/vpx_atomics.h",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-08-30T06:03:21Z",
      "side": 1,
      "message": "I\u0027d put this after the include as often defines before them are meant to have some affect",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55db9334_13b3861a",
        "filename": "vpx_util/vpx_atomics.h",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2017-08-30T19:49:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f220226_95940b7d",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "478220c3_5989e9e6",
        "filename": "vpx_util/vpx_atomics.h",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-08-30T06:03:21Z",
      "side": 1,
      "message": "the style of check in endian_inl.h would be more consistent with existing checks, though there is a mix this only appears in gtest.\n\nhttps://chromium.googlesource.com/webm/libvpx/+/master/vpx_util/endian_inl.h#19",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a143f482_fc21c389",
        "filename": "vpx_util/vpx_atomics.h",
        "patchSetId": 8
      },
      "lineNbr": 35,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2017-08-30T19:49:52Z",
      "side": 1,
      "message": "Matching vpx_thread.h, done.",
      "parentUuid": "478220c3_5989e9e6",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d06088dc_8698b3db",
        "filename": "vpx_util/vpx_atomics.h",
        "patchSetId": 8
      },
      "lineNbr": 40,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-08-30T06:03:21Z",
      "side": 1,
      "message": "you could check _MSC_VER if this is visual studio specific. mingw-w64 would probably hit the gcc / inline asm paths",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a6c4f7c_9f647958",
        "filename": "vpx_util/vpx_atomics.h",
        "patchSetId": 8
      },
      "lineNbr": 40,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2017-08-30T19:49:52Z",
      "side": 1,
      "message": "Perfect, thanks!",
      "parentUuid": "d06088dc_8698b3db",
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d380a708_6e3a3159",
        "filename": "vpx_util/vpx_atomics.h",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-08-30T06:03:21Z",
      "side": 1,
      "message": "I think there\u0027s \u003catomic\u003e, but not stdatomic.h otherwise you\u0027d want a version check for that above.\nSome platform specific Interlocked* calls could be used in this branch. It might be better to phrase a TODO that way",
      "range": {
        "startLine": 46,
        "startChar": 26,
        "endLine": 47,
        "endChar": 15
      },
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f816a2d_d4fdbf79",
        "filename": "vpx_util/vpx_atomics.h",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1126912
      },
      "writtenOn": "2017-08-30T19:49:52Z",
      "side": 1,
      "message": "I put the TODO to consider adding \u003catomic\u003e support when building C++11 under _MSC_VER. There are no InterlockedRead or InterlockedStore for just loading and storing. This could be implemented on top of InterlockedExchange and CAS but I believe both operations are significantly more expensive than the load/stores in x86 asm.\n\nI\u0027ve heavily reworded this, PTAL.",
      "parentUuid": "d380a708_6e3a3159",
      "range": {
        "startLine": 46,
        "startChar": 26,
        "endLine": 47,
        "endChar": 15
      },
      "revId": "4057947d29d71b02acfd187fab4a2d80c76337ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}