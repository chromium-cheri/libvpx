{
  "comments": [
    {
      "key": {
        "uuid": "f85faa96_5f6b9980",
        "filename": "vpx_dsp/x86/avg_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2018-11-07T18:54:23Z",
      "side": 1,
      "message": "Why is the code expanding to 32 bits here? It looks like the hadamard is just adds/subs with 8/10/12 bit input. That should fit inside 16 bits and just the store at the end needs to be in 32 bits.",
      "range": {
        "startLine": 109,
        "startChar": 13,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "2eb86d4b2e6db17a7f3de069d2d62bc06ebd312a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35f53578_a3f0178b",
        "filename": "vpx_dsp/x86/avg_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1001914
      },
      "writtenOn": "2018-11-07T19:01:48Z",
      "side": 1,
      "message": "12-bit input gets 13-bit difference as input.\n\nInside the 8x8 transform, each coefficient would effectively go through 3 adds/subs in 1-D operation. Hence 2-D operation would get 6 adds/subs, which would make the bit range towards 19 bits ?",
      "parentUuid": "f85faa96_5f6b9980",
      "range": {
        "startLine": 109,
        "startChar": 13,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "2eb86d4b2e6db17a7f3de069d2d62bc06ebd312a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcd8d29f_7fc8b480",
        "filename": "vpx_dsp/x86/avg_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2018-11-07T19:05:01Z",
      "side": 1,
      "message": "I need to sit down with a pencil to double check. Where is the highbd C version? This only has 8 bit:\nhttps://aomedia.googlesource.com/aom/+/master/aom_dsp/avg.c",
      "parentUuid": "35f53578_a3f0178b",
      "range": {
        "startLine": 109,
        "startChar": 13,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "2eb86d4b2e6db17a7f3de069d2d62bc06ebd312a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "946af3f2_c230d288",
        "filename": "vpx_dsp/x86/avg_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1001914
      },
      "writtenOn": "2018-11-07T19:05:56Z",
      "side": 1,
      "message": "Here it comes:\nhttps://chromium-review.googlesource.com/c/webm/libvpx/+/1312246/2/vpx_dsp/avg.c",
      "parentUuid": "dcd8d29f_7fc8b480",
      "range": {
        "startLine": 109,
        "startChar": 13,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "2eb86d4b2e6db17a7f3de069d2d62bc06ebd312a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f47939a6_8fb16842",
        "filename": "vpx_dsp/x86/avg_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2018-11-08T18:25:10Z",
      "side": 1,
      "message": "Apologies, I was looking at aom by mistake.\n\nThe first pass should still fit in 16 bits though?\n\n#if CONFIG_VP9_HIGHBITDEPTH\n// src_diff: 13 bit, dynamic range [-4095, 4095]\n// coeff: 16 bit\nstatic void hadamard_highbd_col8_first_pass(const int16_t *src_diff,\n                                            ptrdiff_t src_stride,\n                                            int32_t *coeff) {\n\nNot sure why the C uses int32_t for coeff.",
      "parentUuid": "946af3f2_c230d288",
      "range": {
        "startLine": 109,
        "startChar": 13,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "2eb86d4b2e6db17a7f3de069d2d62bc06ebd312a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18156ed5_4c1b19a4",
        "filename": "vpx_dsp/x86/avg_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1300510
      },
      "writtenOn": "2018-11-09T13:08:36Z",
      "side": 1,
      "message": "Thanks for the reviews. I will address the comments after my vacation.",
      "parentUuid": "f47939a6_8fb16842",
      "range": {
        "startLine": 109,
        "startChar": 13,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "2eb86d4b2e6db17a7f3de069d2d62bc06ebd312a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbdaefb6_ad55a49a",
        "filename": "vpx_dsp/x86/avg_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1300510
      },
      "writtenOn": "2018-11-29T23:06:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18156ed5_4c1b19a4",
      "range": {
        "startLine": 109,
        "startChar": 13,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "2eb86d4b2e6db17a7f3de069d2d62bc06ebd312a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95369914_a755312d",
        "filename": "vpx_dsp/x86/avg_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2018-11-29T23:09:07Z",
      "side": 1,
      "message": "The C version is using int16_t, but the assembly is still using int32_t?\n\nIf you do want to change the C, it should be submitted as a separate change.",
      "parentUuid": "dbdaefb6_ad55a49a",
      "range": {
        "startLine": 109,
        "startChar": 13,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "2eb86d4b2e6db17a7f3de069d2d62bc06ebd312a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3de8b07b_f848f343",
        "filename": "vpx_dsp/x86/avg_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1300510
      },
      "writtenOn": "2018-11-30T05:51:13Z",
      "side": 1,
      "message": "I do not have a good way to make the assembly using int16_t.\nIf I use sse2 128 bit instructions, it will be slower than the current version.\nOn the other hand, it would be very complicated if packing two rows (16 16-bit ints) into one __m256i.\nAny thoughts?",
      "parentUuid": "95369914_a755312d",
      "range": {
        "startLine": 109,
        "startChar": 13,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "2eb86d4b2e6db17a7f3de069d2d62bc06ebd312a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40202e6b_f992a32a",
        "filename": "vpx_dsp/x86/avg_intrin_avx2.c",
        "patchSetId": 3
      },
      "lineNbr": 109,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2018-11-30T20:16:34Z",
      "side": 1,
      "message": "What makes using the 128 bit instructions slower?\n\nI suppose since you need to step up to 32 bits at some point anyway, it doesn\u0027t really matter if you do it at the very beginning or between the two loops.",
      "parentUuid": "3de8b07b_f848f343",
      "range": {
        "startLine": 109,
        "startChar": 13,
        "endLine": 109,
        "endChar": 34
      },
      "revId": "2eb86d4b2e6db17a7f3de069d2d62bc06ebd312a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}