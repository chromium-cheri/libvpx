{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "49548477_b7ae21df",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-06-26T22:58:36Z",
      "side": 1,
      "message": "The vpx_hadamard_32x32_neon() function was added in https://chromium-review.googlesource.com/c/webm/libvpx/+/4004626.",
      "revId": "19f3a754d62dcd21e400a3c715f2ed4235d1c4ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18ce962e_2577ad25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-06-27T16:33:08Z",
      "side": 1,
      "message": "Hi Gerda: This is the libvpx version of https://aomedia-review.googlesource.com/c/aom/+/177323.\n\nIn libvpx, `tran_low_t` is defined as either `int32_t` or `int16_t` depending on the value of the compile-time option `CONFIG_VP9_HIGHBITDEPTH`, whereas in libaom `tran_low_t` is always defined as `int32_t`. In this CL I made the minimal change and only fixed the incorrect assumption that `a / 2 + b / 2 \u003d\u003d (a + b) / 2` and `a / 2 - b / 2 \u003d\u003d (a - b) / 2`.",
      "revId": "19f3a754d62dcd21e400a3c715f2ed4235d1c4ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65d5b3e3_fee5813f",
        "filename": "vpx_dsp/arm/hadamard_neon.c",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1001562
      },
      "writtenOn": "2023-06-27T16:38:17Z",
      "side": 1,
      "message": "For ease of comparison, here is the corresponding for loop in `vpx_hadamard_32x32_c()` (modified to use the same loop index variable `i`):\n\n```\n  // coeff: 16 bit, dynamic range [-32768, 32767] \n  for (i \u003d 0; i \u003c 256; ++i) {\n    tran_low_t a0 \u003d coeff[0];\n    tran_low_t a1 \u003d coeff[256];\n    tran_low_t a2 \u003d coeff[512];\n    tran_low_t a3 \u003d coeff[768];\n  \n    tran_low_t b0 \u003d (a0 + a1) \u003e\u003e 2;  // (a0 + a1): 17 bit, [-65536, 65535]\n    tran_low_t b1 \u003d (a0 - a1) \u003e\u003e 2;  // b0-b3: 15 bit, dynamic range\n    tran_low_t b2 \u003d (a2 + a3) \u003e\u003e 2;  // [-16384, 16383]\n    tran_low_t b3 \u003d (a2 - a3) \u003e\u003e 2;\n\n    coeff[0] \u003d b0 + b2;  // 16 bit, [-32768, 32767]\n    coeff[256] \u003d b1 + b3;\n    coeff[512] \u003d b0 - b2;\n    coeff[768] \u003d b1 - b3;\n  \n    ++coeff; \n  }\n```",
      "revId": "19f3a754d62dcd21e400a3c715f2ed4235d1c4ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}