{
  "comments": [
    {
      "key": {
        "uuid": "9974efbe_85c3e405",
        "filename": "vpx_dsp/arm/loopfilter_mb_neon.c",
        "patchSetId": 7
      },
      "lineNbr": 86,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-08-09T01:32:21Z",
      "side": 1,
      "message": "this is supposed to be a compile-time constant, you might just be getting lucky with the inlining; try a configure with --disable-optimizations",
      "range": {
        "startLine": 86,
        "startChar": 51,
        "endLine": 86,
        "endChar": 56
      },
      "revId": "072f9fc24f87dc31b2380ed182d6d8cd9b7feb1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9974efbe_e583b8a9",
        "filename": "vpx_dsp/arm/loopfilter_mb_neon.c",
        "patchSetId": 7
      },
      "lineNbr": 90,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-08-09T01:32:21Z",
      "side": 1,
      "message": "mark what you can const",
      "range": {
        "startLine": 90,
        "startChar": 38,
        "endLine": 90,
        "endChar": 47
      },
      "revId": "072f9fc24f87dc31b2380ed182d6d8cd9b7feb1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9974efbe_058114a1",
        "filename": "vpx_dsp/arm/loopfilter_mb_neon.c",
        "patchSetId": 7
      },
      "lineNbr": 91,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-08-09T01:32:21Z",
      "side": 1,
      "message": "I\u0027d prefer not to duplicate the size of the vector in the name. the prototype here is visible an all of the intrinsics encode the size of the types in there name",
      "range": {
        "startLine": 91,
        "startChar": 50,
        "endLine": 91,
        "endChar": 55
      },
      "revId": "072f9fc24f87dc31b2380ed182d6d8cd9b7feb1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9974efbe_45770ce3",
        "filename": "vpx_dsp/arm/loopfilter_mb_neon.c",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-08-09T01:32:21Z",
      "side": 1,
      "message": "I wonder how the compiler is handling register allocation here. you could hold a few of the results in intermediates before doing the final combine",
      "revId": "072f9fc24f87dc31b2380ed182d6d8cd9b7feb1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9974efbe_059a7403",
        "filename": "vpx_dsp/arm/loopfilter_mb_neon.c",
        "patchSetId": 7
      },
      "lineNbr": 258,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-08-09T01:32:21Z",
      "side": 1,
      "message": "this comment doesn\u0027t need to be copied from the c code",
      "revId": "072f9fc24f87dc31b2380ed182d6d8cd9b7feb1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9974efbe_056b54ee",
        "filename": "vpx_dsp/arm/loopfilter_mb_neon.c",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2016-08-09T01:32:21Z",
      "side": 1,
      "message": "if it doesn\u0027t make a difference in the generated code, offsets by constant * p would be a bit more readable.",
      "revId": "072f9fc24f87dc31b2380ed182d6d8cd9b7feb1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}