{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3d00b6ba_dfadf4ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1262226
      },
      "writtenOn": "2023-03-30T12:50:19Z",
      "side": 1,
      "message": "This CL introduces a speed feature to prune single inter modes (NEARMV and ZEROMV) based on mv difference and mode rate w.r.t previously evaluated mode corresponding to the same reference frame.\n\nPlease check the applicability of the sf across resolution w.r.t frame type. The sf is not enabled for HDRES2 resolution set as the trade-off is not good.\n```\n Frame type \u003d\u003e Boosted  Non-boosted\n  LOWRES2        ON         ON\n  MIDRES2       OFF         ON\n   HDRES2       OFF        OFF\n```\nIn commit message:\n[-] sign indicates instruction count increase\n[+] sign indicates instruction count reduction \n\nThe instruction count reduction specified has been measured using command:\n`$ perf stat -e instructions:u ./vpxenc …`",
      "revId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "486434b1_df60b188",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-03-31T04:01:32Z",
      "side": 1,
      "message": "The strategy looks fine to me since NEARESTMV and NEWMV are always evaluated (is there any other feature to prune these 2 modes?). As you mentioned, the tradeoff isn\u0027t good for hdres. Is there any midres clip having large coding loss?",
      "parentUuid": "3d00b6ba_dfadf4ae",
      "revId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03c3831b_f1b2d0ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1262226
      },
      "writtenOn": "2023-03-31T08:54:20Z",
      "side": 1,
      "message": "Thank you for the review.\n\u003e **The strategy looks fine to me since NEARESTMV and NEWMV are always evaluated (is there any other feature to prune these 2 modes?)**\n\nThere is a pruning logic for `NEARESTMV` in `check_best_zero_mv()` function\n- prunes `NEARESTMV`, `NEARMV` and `ZEROMV` modes having zero mv based on mode cost\n- the pruning logic used in this function accounts only mode cost whereas the logic introduced in this CL accounts mode cost, mv rate and absolute mv difference\n- the logic used in this function is not defined under any speed feature\n\nThere is a speed feature related to `NEWMV` mode - `limit_newmv_early_exit`\n- the sf reduces the rd threshold update used for early exit based on variance\n- applicable only for `NEWMV` mode with ref frame `LAST_FRAME`\n\n\u003e **As you mentioned, the tradeoff isn\u0027t good for hdres. Is there any midres clip having large coding loss?**\n\nCoding loss observed in `MIDRES2` testset is minimal. Please check the results of contents with worst case quality loss.\n```\n                               Instruction Count  BD-Rate Loss(%)\ncpu            Content            Reduction(%)      avg.psnr\n 0     Tango_854x480_60fps_8bit     -0.105           0.2311\n 0  CatRobot_854x480_60fps_8bit      2.166           0.1596\n 0                park_joy_480p      0.155           0.1544\n```",
      "revId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e855621_f03c0239",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-03-31T19:29:36Z",
      "side": 1,
      "message": "Thanks for the investigation. The result looks good. My concern is that in rare cases the inter modes are skipped more than what we expect, then this may cause issues. Is it possible to add a check in your change - e.g. we only skip the mode if NEARESTMV and NEWMV are not skipped by other sf features? What do you think?",
      "parentUuid": "03c3831b_f1b2d0ca",
      "revId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97b5e9a9_5d0c3b3b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1262226
      },
      "writtenOn": "2023-04-03T12:36:26Z",
      "side": 1,
      "message": "The pruning logic used in this speed feature already addressed this scenario.\n\nIn this patch, the mode rate of single modes are maintained in `single_mode_rate[]` array. The array is initialized with `INT_MAX` and updated after motion search in `handle_inter_mode()`. When `NEARESTMV` or `NEWMV` mode is pruned by the speed feature, the array is not updated (i.e., it still holds `INT_MAX`). In such scenarios, `NEARMV` and `ZEROMV` modes are not pruned by the sf since `this_mode_rate` is less than `INT_MAX`.\n\nWe believe that any other additional check is not required for this pruning logic. Please let us know your thoughts.",
      "parentUuid": "9e855621_f03c0239",
      "revId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55d797ce_94b47ec7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-04-10T17:00:45Z",
      "side": 1,
      "message": "That makes sense. Thanks for the clarification.",
      "parentUuid": "97b5e9a9_5d0c3b3b",
      "revId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "776795d0_77828e80",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000884
      },
      "writtenOn": "2023-04-10T17:33:35Z",
      "side": 1,
      "message": "Is it ok to add an assertion in the function to ensure the logic works correctly as you explained above (so others won\u0027t break the logic.)?",
      "parentUuid": "55d797ce_94b47ec7",
      "revId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Commit-Queue",
        "description": {
          "value": "Submit requirement for the \u0027Commit-Queue\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI or human verified the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "1025d37b03247c790723dac7f4084e04fd45f2b3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}