{
  "comments": [
    {
      "key": {
        "uuid": "9924ef48_f6b3fe98",
        "filename": "vp10/encoder/palette.c",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1003005
      },
      "writtenOn": "2016-08-09T22:52:40Z",
      "side": 1,
      "message": "We tried to avoid large stack memory allocation. I\u0027m not quite sure why, maybe Alex could give us some comments on it.",
      "range": {
        "startLine": 96,
        "startChar": 2,
        "endLine": 96,
        "endChar": 37
      },
      "revId": "d00002084064c686556afe498eee03c72bc02faa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9924ef48_59a543fb",
        "filename": "vp10/encoder/palette.c",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1108009
      },
      "writtenOn": "2016-08-10T00:54:15Z",
      "side": 1,
      "message": "There are a few reasons to avoid large stack allocations: \n1) https://www.securecoding.cert.org/confluence/display/c/MEM05-C.+Avoid+large+stack+allocations\n2) See also https://docs.google.com/presentation/d/1o4Yx-H5Cp1G8Aa4rrDiuXrJcnyfOVta-d-9gGrbUPvw/edit#slide\u003did.g12eccb359c_0_127\n\nThat said, we aren\u0027t making concrete step towards eliminating big stack frames globally, and more seem to be creeping in since most people dob\u0027t seem to police this.",
      "parentUuid": "9924ef48_f6b3fe98",
      "range": {
        "startLine": 96,
        "startChar": 2,
        "endLine": 96,
        "endChar": 37
      },
      "revId": "d00002084064c686556afe498eee03c72bc02faa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9924ef48_624728aa",
        "filename": "vp10/encoder/palette.c",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1123219
      },
      "writtenOn": "2016-08-10T16:51:13Z",
      "side": 1,
      "message": "Let\u0027s see what the article is saying and whether it applies here:\n(1) The article mentions avoiding VLAs, where array length is influenced by untrusted data source.\n--\u003e But this is a fixed length array, with length known at compile time.\n(2) The article mentions large stack allocations through recursion.\n--\u003e But no recursion here.\n\nSo, all in all, the article doesn\u0027t apply here.\n\nAlso, this array was on stack even before: it was just part of a struct, and was passed to this function. We have just moved it here, where it\u0027s actually used. That also means that the memory for that the array will be used only during this function call, unlike previously, where it would have been used throughout the life of the struct object.",
      "parentUuid": "9924ef48_59a543fb",
      "range": {
        "startLine": 96,
        "startChar": 2,
        "endLine": 96,
        "endChar": 37
      },
      "revId": "d00002084064c686556afe498eee03c72bc02faa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9924ef48_22d7f016",
        "filename": "vp10/encoder/palette.c",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1003005
      },
      "writtenOn": "2016-08-10T17:55:35Z",
      "side": 1,
      "message": "pre_indices[] was part of struct PALETTE_BUFFER in MACROBLOCK, which was allocated by malloc when creating encoder.",
      "parentUuid": "9924ef48_624728aa",
      "range": {
        "startLine": 96,
        "startChar": 2,
        "endLine": 96,
        "endChar": 37
      },
      "revId": "d00002084064c686556afe498eee03c72bc02faa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9924ef48_d9e2b331",
        "filename": "vp10/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 1937,
      "author": {
        "id": 1108009
      },
      "writtenOn": "2016-08-10T00:54:15Z",
      "side": 1,
      "message": "current 39.9 -\u003e 40\nproposed 39.9 -\u003e 39\n\nAlso calc_dist() in pallette.c assumes the centroid rounding is matches that of roundf().\n\nPerhaps all rounding should be done in palette.c.\n\nThe description says avoid rounding twice. Is there anther round I\u0027m missing here? Can we assert that these are already rounded()?",
      "range": {
        "startLine": 1937,
        "startChar": 45,
        "endLine": 1937,
        "endChar": 65
      },
      "revId": "d00002084064c686556afe498eee03c72bc02faa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9924ef48_fca99d7b",
        "filename": "vp10/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 1937,
      "author": {
        "id": 1108009
      },
      "writtenOn": "2016-08-10T01:30:41Z",
      "side": 1,
      "message": "Oh, I see that rounding is already in the deduplication, nevermind.\n\nI think the palette module handling all the rounding and type conversion internally is a \"would be nice\" (but I\u0027m not suggesting it be required in this refactoring.)",
      "parentUuid": "9924ef48_d9e2b331",
      "range": {
        "startLine": 1937,
        "startChar": 45,
        "endLine": 1937,
        "endChar": 65
      },
      "revId": "d00002084064c686556afe498eee03c72bc02faa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9924ef48_a2bd407d",
        "filename": "vp10/encoder/rdopt.c",
        "patchSetId": 1
      },
      "lineNbr": 1937,
      "author": {
        "id": 1123219
      },
      "writtenOn": "2016-08-10T16:51:13Z",
      "side": 1,
      "message": "Ack.\nIt indeed makes sense to take care of rounding at the time of centroids creation itself.\nLet me do this in a separate patch, so that it\u0027s easier to review and also to make sure it doesn\u0027t result in any functional change.",
      "parentUuid": "9924ef48_fca99d7b",
      "range": {
        "startLine": 1937,
        "startChar": 45,
        "endLine": 1937,
        "endChar": 65
      },
      "revId": "d00002084064c686556afe498eee03c72bc02faa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}