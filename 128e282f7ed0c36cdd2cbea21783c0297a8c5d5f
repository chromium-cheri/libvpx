{
  "comments": [
    {
      "key": {
        "uuid": "919a28fd_827103c6",
        "filename": "test/acm_random.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-06-28T22:49:20Z",
      "side": 1,
      "message": "testing::internal::Random::kMaxRange actually, 1u \u003c\u003c 31.\nbe good to note at the function level the range must be within that or just keep this to uint32 and let the caller adjust the output if a wider range is needed",
      "range": {
        "startLine": 58,
        "startChar": 62,
        "endLine": 58,
        "endChar": 70
      },
      "revId": "128e282f7ed0c36cdd2cbea21783c0297a8c5d5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caa9bbd4_4e81e4bd",
        "filename": "test/acm_random.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-06-30T02:00:23Z",
      "side": 1,
      "message": "So this would be used like:\n\na \u003d RandRange(range);\na \u003d a - low;\n\n?",
      "parentUuid": "919a28fd_827103c6",
      "range": {
        "startLine": 58,
        "startChar": 62,
        "endLine": 58,
        "endChar": 70
      },
      "revId": "128e282f7ed0c36cdd2cbea21783c0297a8c5d5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad23881b_f60a1979",
        "filename": "test/acm_random.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-06-30T02:27:45Z",
      "side": 1,
      "message": "\u003e So this would be used like:\n\u003e \n\u003e a \u003d RandRange(range);\n\u003e a \u003d a - low;\n\u003e \n\u003e ?\n\n\u0027+ low\u0027 like you have here, but yes. this might be an OK convenience, but it\u0027s limited by the underlying implementation, so minimally that needs to be documented at the function level.",
      "parentUuid": "caa9bbd4_4e81e4bd",
      "range": {
        "startLine": 58,
        "startChar": 62,
        "endLine": 58,
        "endChar": 70
      },
      "revId": "128e282f7ed0c36cdd2cbea21783c0297a8c5d5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d62d097_58cf31b7",
        "filename": "test/acm_random.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-06-30T03:56:13Z",
      "side": 1,
      "message": "I see your point, but I feel like with some EXPECT_x() or assert() this could be effectively documented, especially because the Buffer call needs to do this for you anyway.",
      "parentUuid": "ad23881b_f60a1979",
      "range": {
        "startLine": 58,
        "startChar": 62,
        "endLine": 58,
        "endChar": 70
      },
      "revId": "128e282f7ed0c36cdd2cbea21783c0297a8c5d5f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}