{
  "comments": [
    {
      "key": {
        "uuid": "b79a03fa_6245695b",
        "filename": "vpx_dsp/x86/bitdepth_conversion_sse2.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1153359
      },
      "writtenOn": "2017-02-15T00:53:35Z",
      "side": 1,
      "message": "These 2 instructions need 16-byte alignment. Please do real encoding/decoding to verify.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 59
      },
      "revId": "327a02d77ef45932c7cce39fca53765b8acc158d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "979ec77d_b0b7efcf",
        "filename": "vpx_dsp/x86/bitdepth_conversion_sse2.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-02-15T21:22:32Z",
      "side": 1,
      "message": "load_tran_low is only used for coeff/qcoeff/dqcoeff which are properly aligned:\nhttps://chromium.googlesource.com/webm/libvpx/+/master/vp9/encoder/vp9_context_tree.c#28\n\nand this is already used in the assembly version of this file:\nhttps://chromium.googlesource.com/webm/libvpx/+/master/vpx_dsp/x86/bitdepth_conversion_sse2.asm#42\n\nIt also runs locally without any issues.",
      "parentUuid": "b79a03fa_6245695b",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 59
      },
      "revId": "327a02d77ef45932c7cce39fca53765b8acc158d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c25889aa_9ff23cf7",
        "filename": "vpx_dsp/x86/bitdepth_conversion_sse2.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1153359
      },
      "writtenOn": "2017-02-15T21:29:36Z",
      "side": 1,
      "message": "Good to know. Thanks.",
      "parentUuid": "979ec77d_b0b7efcf",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 59
      },
      "revId": "327a02d77ef45932c7cce39fca53765b8acc158d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29751456_445b600a",
        "filename": "vpx_dsp/x86/bitdepth_conversion_sse2.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-02-16T00:27:50Z",
      "side": 1,
      "message": "just to be sure, does 32-bit pass?",
      "parentUuid": "c25889aa_9ff23cf7",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 59
      },
      "revId": "327a02d77ef45932c7cce39fca53765b8acc158d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43587682_a5ec2e36",
        "filename": "vpx_dsp/x86/bitdepth_conversion_sse2.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-02-16T00:55:10Z",
      "side": 1,
      "message": "i tried \nreturn _mm_packs_epi32(*(const __m128i *)a, *(const __m128i *)(a + 4));\nto drop the temp var and got the same disassembly. leaving it as it is now.",
      "parentUuid": "29751456_445b600a",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 59
      },
      "revId": "327a02d77ef45932c7cce39fca53765b8acc158d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "568a4a4d_5a971008",
        "filename": "vpx_dsp/x86/bitdepth_conversion_sse2.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-02-16T02:06:16Z",
      "side": 1,
      "message": "\u003e i tried \n\u003e return _mm_packs_epi32(*(const __m128i *)a, *(const __m128i *)(a + 4));\n\u003e to drop the temp var and got the same disassembly. leaving it as it is now.\n\nOK it\u0027s simple to go to loadu if there\u0027s an issue",
      "parentUuid": "43587682_a5ec2e36",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 59
      },
      "revId": "327a02d77ef45932c7cce39fca53765b8acc158d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e4e4d07_0c262dbb",
        "filename": "vpx_dsp/x86/bitdepth_conversion_sse2.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-02-16T02:40:37Z",
      "side": 1,
      "message": "Linfeng mentioned that \"these 2 instructions\" (assuming the load and the packssdw) require 16 byte alignment. I think that means loadu would help, but only some. I guess we could load both values into registers first, if it came to that.",
      "parentUuid": "568a4a4d_5a971008",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 59
      },
      "revId": "327a02d77ef45932c7cce39fca53765b8acc158d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f020094_76cee058",
        "filename": "vpx_dsp/x86/bitdepth_conversion_sse2.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1002219
      },
      "writtenOn": "2017-02-16T02:06:16Z",
      "side": 1,
      "message": "alternatively this could be a load too",
      "range": {
        "startLine": 24,
        "startChar": 32,
        "endLine": 24,
        "endChar": 57
      },
      "revId": "327a02d77ef45932c7cce39fca53765b8acc158d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5b5bcd9_78b60cd5",
        "filename": "vpx_dsp/x86/bitdepth_conversion_sse2.h",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1117029
      },
      "writtenOn": "2017-02-16T02:40:37Z",
      "side": 1,
      "message": "I didn\u0027t test with 2 loads, but we explicitly don\u0027t want 2 loads. This is currently:\npackssdw 0x10(%ebx),%xmm1\n\nwhich pulls straight from memory. Not sure how much slower loading it first would be, but it would at least require an extra register.",
      "parentUuid": "3f020094_76cee058",
      "range": {
        "startLine": 24,
        "startChar": 32,
        "endLine": 24,
        "endChar": 57
      },
      "revId": "327a02d77ef45932c7cce39fca53765b8acc158d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}